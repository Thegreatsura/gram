// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package repo

import (
	"context"

	"github.com/google/uuid"
)

const createAsset = `-- name: CreateAsset :one
INSERT INTO assets (
    name
  , url
  , project_id
  , sha256
  , kind
  , content_type
  , content_length
) VALUES (
    $1
  , $2
  , $3
  , $4
  , $5
  , $6
  , $7
)
ON CONFLICT (project_id, sha256) DO UPDATE SET
    deleted_at = NULL,
    url = $2,
    updated_at = clock_timestamp()
RETURNING id, project_id, name, url, kind, content_type, content_length, sha256, created_at, updated_at, deleted_at, deleted
`

type CreateAssetParams struct {
	Name          string
	Url           string
	ProjectID     uuid.UUID
	Sha256        string
	Kind          string
	ContentType   string
	ContentLength int64
}

func (q *Queries) CreateAsset(ctx context.Context, arg CreateAssetParams) (Asset, error) {
	row := q.db.QueryRow(ctx, createAsset,
		arg.Name,
		arg.Url,
		arg.ProjectID,
		arg.Sha256,
		arg.Kind,
		arg.ContentType,
		arg.ContentLength,
	)
	var i Asset
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Name,
		&i.Url,
		&i.Kind,
		&i.ContentType,
		&i.ContentLength,
		&i.Sha256,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Deleted,
	)
	return i, err
}

const getProjectAsset = `-- name: GetProjectAsset :one
SELECT id, project_id, name, url, kind, content_type, content_length, sha256, created_at, updated_at, deleted_at, deleted FROM assets WHERE project_id = $1 AND id = $2
`

type GetProjectAssetParams struct {
	ProjectID uuid.UUID
	ID        uuid.UUID
}

func (q *Queries) GetProjectAsset(ctx context.Context, arg GetProjectAssetParams) (Asset, error) {
	row := q.db.QueryRow(ctx, getProjectAsset, arg.ProjectID, arg.ID)
	var i Asset
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Name,
		&i.Url,
		&i.Kind,
		&i.ContentType,
		&i.ContentLength,
		&i.Sha256,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Deleted,
	)
	return i, err
}

const getProjectAssetBySHA256 = `-- name: GetProjectAssetBySHA256 :one
SELECT id, project_id, name, url, kind, content_type, content_length, sha256, created_at, updated_at, deleted_at, deleted FROM assets WHERE project_id = $1 AND sha256 = $2
`

type GetProjectAssetBySHA256Params struct {
	ProjectID uuid.UUID
	Sha256    string
}

func (q *Queries) GetProjectAssetBySHA256(ctx context.Context, arg GetProjectAssetBySHA256Params) (Asset, error) {
	row := q.db.QueryRow(ctx, getProjectAssetBySHA256, arg.ProjectID, arg.Sha256)
	var i Asset
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Name,
		&i.Url,
		&i.Kind,
		&i.ContentType,
		&i.ContentLength,
		&i.Sha256,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Deleted,
	)
	return i, err
}
