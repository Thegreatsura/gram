// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package repo

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createGramKey = `-- name: CreateGramKey :one
INSERT INTO gram_keys (
    organization_id
  , project_id
  , created_by_user_id
  , name
  , token
  , scopes
) VALUES (
    $1
  , $2
  , $3
  , $4
  , $5
  , $6::text[]
)
RETURNING 
    id
  , organization_id
  , project_id
  , created_by_user_id
  , name
  , token
  , scopes
  , created_at
  , updated_at
  , deleted_at
  , deleted
`

type CreateGramKeyParams struct {
	OrganizationID  string
	ProjectID       uuid.NullUUID
	CreatedByUserID pgtype.Text
	Name            string
	Token           string
	Scopes          []string
}

func (q *Queries) CreateGramKey(ctx context.Context, arg CreateGramKeyParams) (GramKey, error) {
	row := q.db.QueryRow(ctx, createGramKey,
		arg.OrganizationID,
		arg.ProjectID,
		arg.CreatedByUserID,
		arg.Name,
		arg.Token,
		arg.Scopes,
	)
	var i GramKey
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.ProjectID,
		&i.CreatedByUserID,
		&i.Name,
		&i.Token,
		&i.Scopes,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Deleted,
	)
	return i, err
}

const getGramKeyByToken = `-- name: GetGramKeyByToken :one
SELECT 
    id
  , organization_id
  , project_id
  , created_by_user_id
  , name
  , token
  , scopes
  , created_at
  , updated_at
  , deleted_at
  , deleted
FROM gram_keys
WHERE token = $1
  AND deleted_at IS NULL
`

func (q *Queries) GetGramKeyByToken(ctx context.Context, token string) (GramKey, error) {
	row := q.db.QueryRow(ctx, getGramKeyByToken, token)
	var i GramKey
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.ProjectID,
		&i.CreatedByUserID,
		&i.Name,
		&i.Token,
		&i.Scopes,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Deleted,
	)
	return i, err
}

const listGramKeysByOrganization = `-- name: ListGramKeysByOrganization :many
SELECT 
    id
  , organization_id
  , project_id
  , created_by_user_id
  , name
  , token
  , scopes
  , created_at
  , updated_at
  , deleted_at
  , deleted
FROM gram_keys
WHERE organization_id = $1
  AND deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) ListGramKeysByOrganization(ctx context.Context, organizationID string) ([]GramKey, error) {
	rows, err := q.db.Query(ctx, listGramKeysByOrganization, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GramKey
	for rows.Next() {
		var i GramKey
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.ProjectID,
			&i.CreatedByUserID,
			&i.Name,
			&i.Token,
			&i.Scopes,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
