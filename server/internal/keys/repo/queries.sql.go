// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package repo

import (
	"context"

	"github.com/google/uuid"
)

const createAPIKey = `-- name: CreateAPIKey :one
INSERT INTO api_keys (
    organization_id
  , project_id
  , created_by_user_id
  , name
  , key_prefix
  , key_hash
  , scopes
) VALUES (
    $1
  , $2
  , $3
  , $4
  , $5
  , $6
  , $7::text[]
)
RETURNING id, organization_id, project_id, created_by_user_id, name, key_prefix, key_hash, scopes, created_at, updated_at, deleted_at, deleted
`

type CreateAPIKeyParams struct {
	OrganizationID  string
	ProjectID       uuid.NullUUID
	CreatedByUserID string
	Name            string
	KeyPrefix       string
	KeyHash         string
	Scopes          []string
}

func (q *Queries) CreateAPIKey(ctx context.Context, arg CreateAPIKeyParams) (ApiKey, error) {
	row := q.db.QueryRow(ctx, createAPIKey,
		arg.OrganizationID,
		arg.ProjectID,
		arg.CreatedByUserID,
		arg.Name,
		arg.KeyPrefix,
		arg.KeyHash,
		arg.Scopes,
	)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.ProjectID,
		&i.CreatedByUserID,
		&i.Name,
		&i.KeyPrefix,
		&i.KeyHash,
		&i.Scopes,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Deleted,
	)
	return i, err
}

const deleteAPIKey = `-- name: DeleteAPIKey :exec
UPDATE api_keys
SET deleted_at = NOW()
WHERE id = $1
  AND organization_id = $2
  AND deleted IS FALSE
`

type DeleteAPIKeyParams struct {
	ID             uuid.UUID
	OrganizationID string
}

func (q *Queries) DeleteAPIKey(ctx context.Context, arg DeleteAPIKeyParams) error {
	_, err := q.db.Exec(ctx, deleteAPIKey, arg.ID, arg.OrganizationID)
	return err
}

const getAPIKeyByKeyHash = `-- name: GetAPIKeyByKeyHash :one
SELECT id, organization_id, project_id, created_by_user_id, name, key_prefix, key_hash, scopes, created_at, updated_at, deleted_at, deleted
FROM api_keys
WHERE key_hash = $1
  AND deleted IS FALSE
`

func (q *Queries) GetAPIKeyByKeyHash(ctx context.Context, keyHash string) (ApiKey, error) {
	row := q.db.QueryRow(ctx, getAPIKeyByKeyHash, keyHash)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.ProjectID,
		&i.CreatedByUserID,
		&i.Name,
		&i.KeyPrefix,
		&i.KeyHash,
		&i.Scopes,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Deleted,
	)
	return i, err
}

const listAPIKeysByOrganization = `-- name: ListAPIKeysByOrganization :many
SELECT id, organization_id, project_id, created_by_user_id, name, key_prefix, key_hash, scopes, created_at, updated_at, deleted_at, deleted
FROM api_keys
WHERE organization_id = $1
  AND deleted IS FALSE
ORDER BY created_at DESC
`

func (q *Queries) ListAPIKeysByOrganization(ctx context.Context, organizationID string) ([]ApiKey, error) {
	rows, err := q.db.Query(ctx, listAPIKeysByOrganization, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ApiKey
	for rows.Next() {
		var i ApiKey
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.ProjectID,
			&i.CreatedByUserID,
			&i.Name,
			&i.KeyPrefix,
			&i.KeyHash,
			&i.Scopes,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
