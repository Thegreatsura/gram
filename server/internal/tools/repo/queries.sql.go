// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package repo

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getHTTPToolDefinitionByID = `-- name: GetHTTPToolDefinitionByID :one
SELECT id, project_id, deployment_id, openapiv3_document_id, name, summary, description, openapiv3_operation, tags, server_env_var, default_server_url, security, http_method, path, schema_version, schema, created_at, updated_at, deleted_at, deleted
FROM http_tool_definitions
WHERE id = $1
  AND project_id = $2
  AND deleted IS FALSE
`

type GetHTTPToolDefinitionByIDParams struct {
	ID        uuid.UUID
	ProjectID uuid.UUID
}

func (q *Queries) GetHTTPToolDefinitionByID(ctx context.Context, arg GetHTTPToolDefinitionByIDParams) (HttpToolDefinition, error) {
	row := q.db.QueryRow(ctx, getHTTPToolDefinitionByID, arg.ID, arg.ProjectID)
	var i HttpToolDefinition
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DeploymentID,
		&i.Openapiv3DocumentID,
		&i.Name,
		&i.Summary,
		&i.Description,
		&i.Openapiv3Operation,
		&i.Tags,
		&i.ServerEnvVar,
		&i.DefaultServerUrl,
		&i.Security,
		&i.HttpMethod,
		&i.Path,
		&i.SchemaVersion,
		&i.Schema,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Deleted,
	)
	return i, err
}

const listAllHttpToolDefinitions = `-- name: ListAllHttpToolDefinitions :many
WITH latest_deployment AS (
    SELECT id, max(seq)
    FROM deployments
    WHERE project_id = $1
    GROUP BY id
)
SELECT http_tool_definitions.id, project_id, deployment_id, openapiv3_document_id, name, summary, description, openapiv3_operation, tags, server_env_var, default_server_url, security, http_method, path, schema_version, schema, created_at, updated_at, deleted_at, deleted, latest_deployment.id, max
FROM http_tool_definitions
INNER JOIN latest_deployment ON http_tool_definitions.deployment_id = latest_deployment.id
WHERE http_tool_definitions.project_id = $1 
  AND http_tool_definitions.deleted IS FALSE
  AND ($2::uuid IS NULL OR http_tool_definitions.id < $2)
ORDER BY http_tool_definitions.id DESC
LIMIT 100
`

type ListAllHttpToolDefinitionsParams struct {
	ProjectID uuid.UUID
	Cursor    uuid.NullUUID
}

type ListAllHttpToolDefinitionsRow struct {
	ID                  uuid.UUID
	ProjectID           uuid.UUID
	DeploymentID        uuid.UUID
	Openapiv3DocumentID uuid.NullUUID
	Name                string
	Summary             string
	Description         string
	Openapiv3Operation  pgtype.Text
	Tags                []string
	ServerEnvVar        string
	DefaultServerUrl    pgtype.Text
	Security            []byte
	HttpMethod          string
	Path                string
	SchemaVersion       string
	Schema              []byte
	CreatedAt           pgtype.Timestamptz
	UpdatedAt           pgtype.Timestamptz
	DeletedAt           pgtype.Timestamptz
	Deleted             bool
	ID_2                uuid.UUID
	Max                 interface{}
}

func (q *Queries) ListAllHttpToolDefinitions(ctx context.Context, arg ListAllHttpToolDefinitionsParams) ([]ListAllHttpToolDefinitionsRow, error) {
	rows, err := q.db.Query(ctx, listAllHttpToolDefinitions, arg.ProjectID, arg.Cursor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAllHttpToolDefinitionsRow
	for rows.Next() {
		var i ListAllHttpToolDefinitionsRow
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.DeploymentID,
			&i.Openapiv3DocumentID,
			&i.Name,
			&i.Summary,
			&i.Description,
			&i.Openapiv3Operation,
			&i.Tags,
			&i.ServerEnvVar,
			&i.DefaultServerUrl,
			&i.Security,
			&i.HttpMethod,
			&i.Path,
			&i.SchemaVersion,
			&i.Schema,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Deleted,
			&i.ID_2,
			&i.Max,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
