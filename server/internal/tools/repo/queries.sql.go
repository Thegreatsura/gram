// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package repo

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const findToolsByName = `-- name: FindToolsByName :many
WITH deployment AS (
    SELECT id
    FROM deployments
    WHERE deployments.project_id = $1
      AND (
        $3::uuid IS NULL
        OR id = $3::uuid
      )
    ORDER BY seq DESC
    LIMIT 1
),
external_deployments AS (
  SELECT package_versions.deployment_id as id
  FROM deployments_packages
  INNER JOIN package_versions ON deployments_packages.version_id = package_versions.id
  WHERE deployments_packages.deployment_id = (SELECT id FROM deployment)
)
SELECT 
  http_tool_definitions.id, http_tool_definitions.project_id, http_tool_definitions.deployment_id, http_tool_definitions.openapiv3_document_id, http_tool_definitions.confirm, http_tool_definitions.confirm_prompt, http_tool_definitions.summarizer, http_tool_definitions.name, http_tool_definitions.summary, http_tool_definitions.description, http_tool_definitions.openapiv3_operation, http_tool_definitions.tags, http_tool_definitions.x_gram, http_tool_definitions.original_name, http_tool_definitions.original_summary, http_tool_definitions.original_description, http_tool_definitions.server_env_var, http_tool_definitions.default_server_url, http_tool_definitions.security, http_tool_definitions.http_method, http_tool_definitions.path, http_tool_definitions.schema_version, http_tool_definitions.schema, http_tool_definitions.header_settings, http_tool_definitions.query_settings, http_tool_definitions.path_settings, http_tool_definitions.request_content_type, http_tool_definitions.created_at, http_tool_definitions.updated_at, http_tool_definitions.deleted_at, http_tool_definitions.deleted,
  (select id from deployment) as owning_deployment_id,
  (CASE
    WHEN http_tool_definitions.project_id = $1 THEN ''
    WHEN packages.id IS NOT NULL THEN packages.name
    ELSE ''
  END) as package_name
FROM http_tool_definitions
LEFT JOIN packages ON http_tool_definitions.project_id = packages.project_id
WHERE
  http_tool_definitions.deployment_id = ANY (SELECT id FROM deployment UNION ALL SELECT id FROM external_deployments)
  AND http_tool_definitions.deleted IS FALSE
  AND http_tool_definitions.name = ANY ($2::text[])
ORDER BY http_tool_definitions.id DESC
`

type FindToolsByNameParams struct {
	ProjectID    uuid.UUID
	Names        []string
	DeploymentID uuid.NullUUID
}

type FindToolsByNameRow struct {
	HttpToolDefinition HttpToolDefinition
	OwningDeploymentID uuid.UUID
	PackageName        string
}

func (q *Queries) FindToolsByName(ctx context.Context, arg FindToolsByNameParams) ([]FindToolsByNameRow, error) {
	rows, err := q.db.Query(ctx, findToolsByName, arg.ProjectID, arg.Names, arg.DeploymentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindToolsByNameRow
	for rows.Next() {
		var i FindToolsByNameRow
		if err := rows.Scan(
			&i.HttpToolDefinition.ID,
			&i.HttpToolDefinition.ProjectID,
			&i.HttpToolDefinition.DeploymentID,
			&i.HttpToolDefinition.Openapiv3DocumentID,
			&i.HttpToolDefinition.Confirm,
			&i.HttpToolDefinition.ConfirmPrompt,
			&i.HttpToolDefinition.Summarizer,
			&i.HttpToolDefinition.Name,
			&i.HttpToolDefinition.Summary,
			&i.HttpToolDefinition.Description,
			&i.HttpToolDefinition.Openapiv3Operation,
			&i.HttpToolDefinition.Tags,
			&i.HttpToolDefinition.XGram,
			&i.HttpToolDefinition.OriginalName,
			&i.HttpToolDefinition.OriginalSummary,
			&i.HttpToolDefinition.OriginalDescription,
			&i.HttpToolDefinition.ServerEnvVar,
			&i.HttpToolDefinition.DefaultServerUrl,
			&i.HttpToolDefinition.Security,
			&i.HttpToolDefinition.HttpMethod,
			&i.HttpToolDefinition.Path,
			&i.HttpToolDefinition.SchemaVersion,
			&i.HttpToolDefinition.Schema,
			&i.HttpToolDefinition.HeaderSettings,
			&i.HttpToolDefinition.QuerySettings,
			&i.HttpToolDefinition.PathSettings,
			&i.HttpToolDefinition.RequestContentType,
			&i.HttpToolDefinition.CreatedAt,
			&i.HttpToolDefinition.UpdatedAt,
			&i.HttpToolDefinition.DeletedAt,
			&i.HttpToolDefinition.Deleted,
			&i.OwningDeploymentID,
			&i.PackageName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHTTPToolDefinitionByID = `-- name: GetHTTPToolDefinitionByID :one
WITH first_party AS (
  SELECT id
  FROM http_tool_definitions
  WHERE http_tool_definitions.id = $1
    AND http_tool_definitions.project_id = $2
    AND http_tool_definitions.deleted IS FALSE
  LIMIT 1
),
third_party AS (
  SELECT htd.id
  FROM deployments d
  INNER JOIN deployments_packages dp ON d.id =  dp.deployment_id
  INNER JOIN package_versions pv ON dp.version_id = pv.id
  INNER JOIN http_tool_definitions htd ON htd.deployment_id = pv.deployment_id
  WHERE d.project_id = $2
    AND htd.id = $1
    AND NOT EXISTS(SELECT 1 FROM first_party)
  LIMIT 1
)
SELECT id, project_id, deployment_id, openapiv3_document_id, confirm, confirm_prompt, summarizer, name, summary, description, openapiv3_operation, tags, x_gram, original_name, original_summary, original_description, server_env_var, default_server_url, security, http_method, path, schema_version, schema, header_settings, query_settings, path_settings, request_content_type, created_at, updated_at, deleted_at, deleted
FROM http_tool_definitions
WHERE id = COALESCE((SELECT id FROM first_party), (SELECT id FROM  third_party))
`

type GetHTTPToolDefinitionByIDParams struct {
	ID        uuid.UUID
	ProjectID uuid.UUID
}

// This CTE is for integrating third party tools by checking for tool definitions from external deployments/packages.
func (q *Queries) GetHTTPToolDefinitionByID(ctx context.Context, arg GetHTTPToolDefinitionByIDParams) (HttpToolDefinition, error) {
	row := q.db.QueryRow(ctx, getHTTPToolDefinitionByID, arg.ID, arg.ProjectID)
	var i HttpToolDefinition
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DeploymentID,
		&i.Openapiv3DocumentID,
		&i.Confirm,
		&i.ConfirmPrompt,
		&i.Summarizer,
		&i.Name,
		&i.Summary,
		&i.Description,
		&i.Openapiv3Operation,
		&i.Tags,
		&i.XGram,
		&i.OriginalName,
		&i.OriginalSummary,
		&i.OriginalDescription,
		&i.ServerEnvVar,
		&i.DefaultServerUrl,
		&i.Security,
		&i.HttpMethod,
		&i.Path,
		&i.SchemaVersion,
		&i.Schema,
		&i.HeaderSettings,
		&i.QuerySettings,
		&i.PathSettings,
		&i.RequestContentType,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Deleted,
	)
	return i, err
}

const listFirstPartyHTTPTools = `-- name: ListFirstPartyHTTPTools :many
WITH deployment AS (
    SELECT id
    FROM deployments
    WHERE deployments.project_id = $1
      AND (
        $3::uuid IS NULL
        OR id = $3::uuid
      )
    ORDER BY seq DESC
    LIMIT 1
)
SELECT http_tool_definitions.id, project_id, deployment_id, openapiv3_document_id, confirm, confirm_prompt, summarizer, name, summary, description, openapiv3_operation, tags, x_gram, original_name, original_summary, original_description, server_env_var, default_server_url, security, http_method, path, schema_version, schema, header_settings, query_settings, path_settings, request_content_type, created_at, updated_at, deleted_at, deleted, deployment.id
FROM http_tool_definitions
INNER JOIN deployment ON http_tool_definitions.deployment_id = deployment.id
WHERE http_tool_definitions.project_id = $1 
  AND http_tool_definitions.deleted IS FALSE
  AND ($2::uuid IS NULL OR http_tool_definitions.id < $2)
ORDER BY http_tool_definitions.id DESC
`

type ListFirstPartyHTTPToolsParams struct {
	ProjectID    uuid.UUID
	Cursor       uuid.NullUUID
	DeploymentID uuid.NullUUID
}

type ListFirstPartyHTTPToolsRow struct {
	ID                  uuid.UUID
	ProjectID           uuid.UUID
	DeploymentID        uuid.UUID
	Openapiv3DocumentID uuid.NullUUID
	Confirm             pgtype.Text
	ConfirmPrompt       pgtype.Text
	Summarizer          pgtype.Text
	Name                string
	Summary             string
	Description         string
	Openapiv3Operation  pgtype.Text
	Tags                []string
	XGram               pgtype.Bool
	OriginalName        pgtype.Text
	OriginalSummary     pgtype.Text
	OriginalDescription pgtype.Text
	ServerEnvVar        string
	DefaultServerUrl    pgtype.Text
	Security            []byte
	HttpMethod          string
	Path                string
	SchemaVersion       string
	Schema              []byte
	HeaderSettings      []byte
	QuerySettings       []byte
	PathSettings        []byte
	RequestContentType  pgtype.Text
	CreatedAt           pgtype.Timestamptz
	UpdatedAt           pgtype.Timestamptz
	DeletedAt           pgtype.Timestamptz
	Deleted             bool
	ID_2                uuid.UUID
}

func (q *Queries) ListFirstPartyHTTPTools(ctx context.Context, arg ListFirstPartyHTTPToolsParams) ([]ListFirstPartyHTTPToolsRow, error) {
	rows, err := q.db.Query(ctx, listFirstPartyHTTPTools, arg.ProjectID, arg.Cursor, arg.DeploymentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListFirstPartyHTTPToolsRow
	for rows.Next() {
		var i ListFirstPartyHTTPToolsRow
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.DeploymentID,
			&i.Openapiv3DocumentID,
			&i.Confirm,
			&i.ConfirmPrompt,
			&i.Summarizer,
			&i.Name,
			&i.Summary,
			&i.Description,
			&i.Openapiv3Operation,
			&i.Tags,
			&i.XGram,
			&i.OriginalName,
			&i.OriginalSummary,
			&i.OriginalDescription,
			&i.ServerEnvVar,
			&i.DefaultServerUrl,
			&i.Security,
			&i.HttpMethod,
			&i.Path,
			&i.SchemaVersion,
			&i.Schema,
			&i.HeaderSettings,
			&i.QuerySettings,
			&i.PathSettings,
			&i.RequestContentType,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Deleted,
			&i.ID_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTools = `-- name: ListTools :many
WITH deployment AS (
    SELECT id
    FROM deployments
    WHERE deployments.project_id = $1
      AND (
        $3::uuid IS NULL
        OR id = $3::uuid
      )
    ORDER BY seq DESC
    LIMIT 1
),
external_deployments AS (
  SELECT package_versions.deployment_id as id
  FROM deployments_packages
  INNER JOIN package_versions ON deployments_packages.version_id = package_versions.id
  WHERE deployments_packages.deployment_id = (SELECT id FROM deployment)
)
SELECT 
  (SELECT id FROM deployment) as deployment_id,
  http_tool_definitions.id,
  http_tool_definitions.name,
  http_tool_definitions.summary,
  http_tool_definitions.description,
  http_tool_definitions.http_method,
  http_tool_definitions.confirm,
  http_tool_definitions.confirm_prompt,
  http_tool_definitions.summarizer,
  http_tool_definitions.path,
  http_tool_definitions.openapiv3_document_id,
  http_tool_definitions.created_at,
  http_tool_definitions.tags,
  (CASE
    WHEN http_tool_definitions.project_id = $1 THEN ''
    WHEN packages.id IS NOT NULL THEN packages.name
    ELSE ''
  END) as package_name
FROM http_tool_definitions
LEFT JOIN packages ON http_tool_definitions.project_id = packages.project_id
WHERE
  http_tool_definitions.deployment_id = ANY (SELECT id FROM deployment UNION ALL SELECT id FROM external_deployments)
  AND http_tool_definitions.deleted IS FALSE
  AND ($2::uuid IS NULL OR http_tool_definitions.id < $2)
ORDER BY http_tool_definitions.id DESC
`

type ListToolsParams struct {
	ProjectID    uuid.UUID
	Cursor       uuid.NullUUID
	DeploymentID uuid.NullUUID
}

type ListToolsRow struct {
	DeploymentID        uuid.UUID
	ID                  uuid.UUID
	Name                string
	Summary             string
	Description         string
	HttpMethod          string
	Confirm             pgtype.Text
	ConfirmPrompt       pgtype.Text
	Summarizer          pgtype.Text
	Path                string
	Openapiv3DocumentID uuid.NullUUID
	CreatedAt           pgtype.Timestamptz
	Tags                []string
	PackageName         string
}

func (q *Queries) ListTools(ctx context.Context, arg ListToolsParams) ([]ListToolsRow, error) {
	rows, err := q.db.Query(ctx, listTools, arg.ProjectID, arg.Cursor, arg.DeploymentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListToolsRow
	for rows.Next() {
		var i ListToolsRow
		if err := rows.Scan(
			&i.DeploymentID,
			&i.ID,
			&i.Name,
			&i.Summary,
			&i.Description,
			&i.HttpMethod,
			&i.Confirm,
			&i.ConfirmPrompt,
			&i.Summarizer,
			&i.Path,
			&i.Openapiv3DocumentID,
			&i.CreatedAt,
			&i.Tags,
			&i.PackageName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const pokeHTTPToolDefinitionByName = `-- name: PokeHTTPToolDefinitionByName :one
WITH first_party AS (
  SELECT id
  FROM http_tool_definitions
  WHERE http_tool_definitions.name = $1
    AND http_tool_definitions.project_id = $2
    AND http_tool_definitions.deleted IS FALSE
  LIMIT 1
),
third_party AS (
  SELECT htd.id
  FROM deployments d
  INNER JOIN deployments_packages dp ON d.id =  dp.deployment_id
  INNER JOIN package_versions pv ON dp.version_id = pv.id
  INNER JOIN http_tool_definitions htd ON htd.deployment_id = pv.deployment_id
  WHERE d.project_id = $2
    AND htd.name = $1
    AND NOT EXISTS(SELECT 1 FROM first_party)
  LIMIT 1
)
SELECT id
FROM http_tool_definitions
WHERE id = COALESCE((SELECT id FROM first_party), (SELECT id FROM  third_party))
`

type PokeHTTPToolDefinitionByNameParams struct {
	Name      string
	ProjectID uuid.UUID
}

// This CTE is for integrating third party tools by checking for tool definitions from external deployments/packages.
func (q *Queries) PokeHTTPToolDefinitionByName(ctx context.Context, arg PokeHTTPToolDefinitionByNameParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, pokeHTTPToolDefinitionByName, arg.Name, arg.ProjectID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
