// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package repo

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const listHttpToolDefinitions = `-- name: ListHttpToolDefinitions :many
SELECT 
  id
, organization_id
, project_id
, openapiv3_document_id
, name
, description
, tags
, server_env_var
, security_type
, bearer_env_var
, apikey_env_var
, username_env_var
, password_env_var
, http_method
, path
, headers_schema
, queries_schema
, pathparams_schema
, body_schema
, created_at
, updated_at
FROM http_tool_definitions
WHERE project_id = $1 
  AND deleted IS FALSE
  AND ($2::uuid IS NULL OR id < $2)
ORDER BY id DESC
LIMIT 100
`

type ListHttpToolDefinitionsParams struct {
	ProjectID uuid.UUID
	Cursor    uuid.NullUUID
}

type ListHttpToolDefinitionsRow struct {
	ID                  uuid.UUID
	OrganizationID      string
	ProjectID           uuid.UUID
	Openapiv3DocumentID uuid.NullUUID
	Name                string
	Description         string
	Tags                []string
	ServerEnvVar        string
	SecurityType        string
	BearerEnvVar        pgtype.Text
	ApikeyEnvVar        pgtype.Text
	UsernameEnvVar      pgtype.Text
	PasswordEnvVar      pgtype.Text
	HttpMethod          string
	Path                string
	HeadersSchema       []byte
	QueriesSchema       []byte
	PathparamsSchema    []byte
	BodySchema          []byte
	CreatedAt           pgtype.Timestamptz
	UpdatedAt           pgtype.Timestamptz
}

func (q *Queries) ListHttpToolDefinitions(ctx context.Context, arg ListHttpToolDefinitionsParams) ([]ListHttpToolDefinitionsRow, error) {
	rows, err := q.db.Query(ctx, listHttpToolDefinitions, arg.ProjectID, arg.Cursor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListHttpToolDefinitionsRow
	for rows.Next() {
		var i ListHttpToolDefinitionsRow
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.ProjectID,
			&i.Openapiv3DocumentID,
			&i.Name,
			&i.Description,
			&i.Tags,
			&i.ServerEnvVar,
			&i.SecurityType,
			&i.BearerEnvVar,
			&i.ApikeyEnvVar,
			&i.UsernameEnvVar,
			&i.PasswordEnvVar,
			&i.HttpMethod,
			&i.Path,
			&i.HeadersSchema,
			&i.QueriesSchema,
			&i.PathparamsSchema,
			&i.BodySchema,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
