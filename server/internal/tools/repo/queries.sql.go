// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package repo

import (
	"context"

	"github.com/google/uuid"
)

const listHttpToolDefinitions = `-- name: ListHttpToolDefinitions :many
SELECT id, project_id, deployment_id, openapiv3_document_id, name, summary, description, openapiv3_operation, tags, server_env_var, security_type, bearer_env_var, apikey_env_var, username_env_var, password_env_var, http_method, path, schema_version, schema, created_at, updated_at, deleted_at, deleted
FROM http_tool_definitions
WHERE project_id = $1 
  AND deleted IS FALSE
  AND ($2::uuid IS NULL OR id < $2)
ORDER BY id DESC
LIMIT 100
`

type ListHttpToolDefinitionsParams struct {
	ProjectID uuid.UUID
	Cursor    uuid.NullUUID
}

func (q *Queries) ListHttpToolDefinitions(ctx context.Context, arg ListHttpToolDefinitionsParams) ([]HttpToolDefinition, error) {
	rows, err := q.db.Query(ctx, listHttpToolDefinitions, arg.ProjectID, arg.Cursor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HttpToolDefinition
	for rows.Next() {
		var i HttpToolDefinition
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.DeploymentID,
			&i.Openapiv3DocumentID,
			&i.Name,
			&i.Summary,
			&i.Description,
			&i.Openapiv3Operation,
			&i.Tags,
			&i.ServerEnvVar,
			&i.SecurityType,
			&i.BearerEnvVar,
			&i.ApikeyEnvVar,
			&i.UsernameEnvVar,
			&i.PasswordEnvVar,
			&i.HttpMethod,
			&i.Path,
			&i.SchemaVersion,
			&i.Schema,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
