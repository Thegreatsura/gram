// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package repo

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	ulid "github.com/oklog/ulid/v2"
)

const createDeployment = `-- name: CreateDeployment :one
INSERT INTO deployments (
    user_id
  , organization_id
  , workspace_id
  , external_id
  , external_url
) VALUES (
    $1
  , $2
  , $3
  , $4
  , $5
)
RETURNING 
    id
  , user_id
  , organization_id
  , workspace_id
  , external_id
  , external_url
  , created_at
  , updated_at
`

type CreateDeploymentParams struct {
	UserID         ulid.ULID
	OrganizationID ulid.ULID
	WorkspaceID    ulid.ULID
	ExternalID     pgtype.Text
	ExternalUrl    pgtype.Text
}

type CreateDeploymentRow struct {
	ID             ulid.ULID
	UserID         ulid.ULID
	OrganizationID ulid.ULID
	WorkspaceID    ulid.ULID
	ExternalID     pgtype.Text
	ExternalUrl    pgtype.Text
	CreatedAt      pgtype.Timestamptz
	UpdatedAt      pgtype.Timestamptz
}

func (q *Queries) CreateDeployment(ctx context.Context, arg CreateDeploymentParams) (CreateDeploymentRow, error) {
	row := q.db.QueryRow(ctx, createDeployment,
		arg.UserID,
		arg.OrganizationID,
		arg.WorkspaceID,
		arg.ExternalID,
		arg.ExternalUrl,
	)
	var i CreateDeploymentRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OrganizationID,
		&i.WorkspaceID,
		&i.ExternalID,
		&i.ExternalUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDeployment = `-- name: GetDeployment :one
SELECT 
    id
  , user_id
  , organization_id
  , workspace_id
  , external_id
  , external_url
  , created_at
  , updated_at
FROM deployments
WHERE id = $1
`

type GetDeploymentRow struct {
	ID             ulid.ULID
	UserID         ulid.ULID
	OrganizationID ulid.ULID
	WorkspaceID    ulid.ULID
	ExternalID     pgtype.Text
	ExternalUrl    pgtype.Text
	CreatedAt      pgtype.Timestamptz
	UpdatedAt      pgtype.Timestamptz
}

func (q *Queries) GetDeployment(ctx context.Context, id ulid.ULID) (GetDeploymentRow, error) {
	row := q.db.QueryRow(ctx, getDeployment, id)
	var i GetDeploymentRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OrganizationID,
		&i.WorkspaceID,
		&i.ExternalID,
		&i.ExternalUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
