// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package repo

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createSlackAppConnection = `-- name: CreateSlackAppConnection :one
INSERT INTO slack_app_connections (
    organization_id
  , project_id
  , access_token
  , slack_team_name
  , slack_team_id
  , default_toolset_slug
) VALUES (
    $1
  , $2
  , $3
  , $4
  , $5
  , $6
)
RETURNING organization_id, project_id, access_token, slack_team_name, slack_team_id, default_toolset_slug, created_at, updated_at
`

type CreateSlackAppConnectionParams struct {
	OrganizationID     string
	ProjectID          uuid.UUID
	AccessToken        string
	SlackTeamName      string
	SlackTeamID        string
	DefaultToolsetSlug pgtype.Text
}

func (q *Queries) CreateSlackAppConnection(ctx context.Context, arg CreateSlackAppConnectionParams) (SlackAppConnection, error) {
	row := q.db.QueryRow(ctx, createSlackAppConnection,
		arg.OrganizationID,
		arg.ProjectID,
		arg.AccessToken,
		arg.SlackTeamName,
		arg.SlackTeamID,
		arg.DefaultToolsetSlug,
	)
	var i SlackAppConnection
	err := row.Scan(
		&i.OrganizationID,
		&i.ProjectID,
		&i.AccessToken,
		&i.SlackTeamName,
		&i.SlackTeamID,
		&i.DefaultToolsetSlug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSlackAppConnection = `-- name: DeleteSlackAppConnection :exec
DELETE FROM slack_app_connections
WHERE organization_id = $1
  AND project_id = $2
`

type DeleteSlackAppConnectionParams struct {
	OrganizationID string
	ProjectID      uuid.UUID
}

func (q *Queries) DeleteSlackAppConnection(ctx context.Context, arg DeleteSlackAppConnectionParams) error {
	_, err := q.db.Exec(ctx, deleteSlackAppConnection, arg.OrganizationID, arg.ProjectID)
	return err
}

const getSlackAppConnection = `-- name: GetSlackAppConnection :one
SELECT organization_id, project_id, access_token, slack_team_name, slack_team_id, default_toolset_slug, created_at, updated_at
FROM slack_app_connections
WHERE organization_id = $1
  AND project_id = $2
`

type GetSlackAppConnectionParams struct {
	OrganizationID string
	ProjectID      uuid.UUID
}

func (q *Queries) GetSlackAppConnection(ctx context.Context, arg GetSlackAppConnectionParams) (SlackAppConnection, error) {
	row := q.db.QueryRow(ctx, getSlackAppConnection, arg.OrganizationID, arg.ProjectID)
	var i SlackAppConnection
	err := row.Scan(
		&i.OrganizationID,
		&i.ProjectID,
		&i.AccessToken,
		&i.SlackTeamName,
		&i.SlackTeamID,
		&i.DefaultToolsetSlug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSlackAppConnection = `-- name: UpdateSlackAppConnection :one
UPDATE slack_app_connections
SET
    default_toolset_slug = $1,
    updated_at = clock_timestamp()
WHERE organization_id = $2
  AND project_id = $3
RETURNING organization_id, project_id, access_token, slack_team_name, slack_team_id, default_toolset_slug, created_at, updated_at
`

type UpdateSlackAppConnectionParams struct {
	DefaultToolsetSlug pgtype.Text
	OrganizationID     string
	ProjectID          uuid.UUID
}

func (q *Queries) UpdateSlackAppConnection(ctx context.Context, arg UpdateSlackAppConnectionParams) (SlackAppConnection, error) {
	row := q.db.QueryRow(ctx, updateSlackAppConnection, arg.DefaultToolsetSlug, arg.OrganizationID, arg.ProjectID)
	var i SlackAppConnection
	err := row.Scan(
		&i.OrganizationID,
		&i.ProjectID,
		&i.AccessToken,
		&i.SlackTeamName,
		&i.SlackTeamID,
		&i.DefaultToolsetSlug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
