// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package repo

import (
	"context"
)

const createOpenRouterAPIKey = `-- name: CreateOpenRouterAPIKey :one
INSERT INTO openrouter_api_keys (
    organization_id
  , key
  , key_hash
  , monthly_credits
) VALUES (
    $1
  , $2
  , $3
  , $4
)
RETURNING organization_id, key, key_hash, monthly_credits, disabled, created_at, updated_at, deleted_at, deleted
`

type CreateOpenRouterAPIKeyParams struct {
	OrganizationID string
	Key            string
	KeyHash        string
	MonthlyCredits int64
}

func (q *Queries) CreateOpenRouterAPIKey(ctx context.Context, arg CreateOpenRouterAPIKeyParams) (OpenrouterApiKey, error) {
	row := q.db.QueryRow(ctx, createOpenRouterAPIKey,
		arg.OrganizationID,
		arg.Key,
		arg.KeyHash,
		arg.MonthlyCredits,
	)
	var i OpenrouterApiKey
	err := row.Scan(
		&i.OrganizationID,
		&i.Key,
		&i.KeyHash,
		&i.MonthlyCredits,
		&i.Disabled,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Deleted,
	)
	return i, err
}

const getOpenRouterAPIKey = `-- name: GetOpenRouterAPIKey :one
SELECT organization_id, key, key_hash, monthly_credits, disabled, created_at, updated_at, deleted_at, deleted
FROM openrouter_api_keys
WHERE organization_id = $1
  AND deleted IS FALSE
`

func (q *Queries) GetOpenRouterAPIKey(ctx context.Context, organizationID string) (OpenrouterApiKey, error) {
	row := q.db.QueryRow(ctx, getOpenRouterAPIKey, organizationID)
	var i OpenrouterApiKey
	err := row.Scan(
		&i.OrganizationID,
		&i.Key,
		&i.KeyHash,
		&i.MonthlyCredits,
		&i.Disabled,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Deleted,
	)
	return i, err
}
