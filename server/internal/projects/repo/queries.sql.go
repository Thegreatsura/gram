// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package repo

import (
	"context"

	"github.com/google/uuid"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects (
    name
  , slug
  , organization_id
) VALUES (
    $1
  , $2
  , $3
)
RETURNING 
    id
  , name
  , slug
  , organization_id
  , created_at
  , updated_at
  , deleted_at
  , deleted
`

type CreateProjectParams struct {
	Name           string
	Slug           string
	OrganizationID uuid.UUID
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, createProject, arg.Name, arg.Slug, arg.OrganizationID)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.OrganizationID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Deleted,
	)
	return i, err
}

const getProject = `-- name: GetProject :one
SELECT 
    id
  , name
  , slug
  , organization_id
  , created_at
  , updated_at
  , deleted_at
  , deleted
FROM projects
WHERE id = $1
`

func (q *Queries) GetProject(ctx context.Context, id uuid.UUID) (Project, error) {
	row := q.db.QueryRow(ctx, getProject, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.OrganizationID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Deleted,
	)
	return i, err
}

const listProjectsByOrganization = `-- name: ListProjectsByOrganization :many
SELECT 
    id
  , name
  , slug
  , organization_id
  , created_at
  , updated_at
  , deleted_at
  , deleted
FROM projects
WHERE organization_id = $1
  AND deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) ListProjectsByOrganization(ctx context.Context, organizationID uuid.UUID) ([]Project, error) {
	rows, err := q.db.Query(ctx, listProjectsByOrganization, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.OrganizationID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
