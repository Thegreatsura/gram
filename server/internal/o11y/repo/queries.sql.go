// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package repo

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const statHTTPSecuritySchemes = `-- name: StatHTTPSecuritySchemes :many
WITH latest_deployments AS (
  SELECT DISTINCT ON (project_id) 
    id,
    project_id,
    seq
  FROM deployments
  ORDER BY project_id, seq DESC
)
SELECT 
  hs.type,
  hs.scheme,
  COUNT(*) as count
FROM latest_deployments ld
JOIN http_security hs ON hs.deployment_id = ld.id
WHERE hs.deleted = FALSE
GROUP BY hs.type, hs.scheme
ORDER BY hs.type, hs.scheme
`

type StatHTTPSecuritySchemesRow struct {
	Type   pgtype.Text
	Scheme pgtype.Text
	Count  int64
}

func (q *Queries) StatHTTPSecuritySchemes(ctx context.Context) ([]StatHTTPSecuritySchemesRow, error) {
	rows, err := q.db.Query(ctx, statHTTPSecuritySchemes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StatHTTPSecuritySchemesRow
	for rows.Next() {
		var i StatHTTPSecuritySchemesRow
		if err := rows.Scan(&i.Type, &i.Scheme, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const statOrganizationsCount = `-- name: StatOrganizationsCount :one
SELECT COUNT(*) as count
FROM organization_metadata
`

func (q *Queries) StatOrganizationsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, statOrganizationsCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const statProjectsCount = `-- name: StatProjectsCount :one
SELECT COUNT(*) as count
FROM projects
WHERE deleted = FALSE
`

func (q *Queries) StatProjectsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, statProjectsCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}
