// Code generated by goa v3.20.0, DO NOT EDIT.
//
// concerts HTTP client CLI support package
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design -o internal

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	concertsc "github.com/speakeasy-api/gram/internal/gen/http/concerts/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `concerts (list|create|show|update|delete)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` concerts list --page 224960679266521027 --limit 42` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		concertsFlags = flag.NewFlagSet("concerts", flag.ContinueOnError)

		concertsListFlags     = flag.NewFlagSet("list", flag.ExitOnError)
		concertsListPageFlag  = concertsListFlags.String("page", "1", "")
		concertsListLimitFlag = concertsListFlags.String("limit", "10", "")

		concertsCreateFlags    = flag.NewFlagSet("create", flag.ExitOnError)
		concertsCreateBodyFlag = concertsCreateFlags.String("body", "REQUIRED", "")

		concertsShowFlags         = flag.NewFlagSet("show", flag.ExitOnError)
		concertsShowConcertIDFlag = concertsShowFlags.String("concert-id", "REQUIRED", "Concert UUID")

		concertsUpdateFlags         = flag.NewFlagSet("update", flag.ExitOnError)
		concertsUpdateBodyFlag      = concertsUpdateFlags.String("body", "REQUIRED", "")
		concertsUpdateConcertIDFlag = concertsUpdateFlags.String("concert-id", "REQUIRED", "ID of the concert to update.")

		concertsDeleteFlags         = flag.NewFlagSet("delete", flag.ExitOnError)
		concertsDeleteConcertIDFlag = concertsDeleteFlags.String("concert-id", "REQUIRED", "ID of the concert to remove.")
	)
	concertsFlags.Usage = concertsUsage
	concertsListFlags.Usage = concertsListUsage
	concertsCreateFlags.Usage = concertsCreateUsage
	concertsShowFlags.Usage = concertsShowUsage
	concertsUpdateFlags.Usage = concertsUpdateUsage
	concertsDeleteFlags.Usage = concertsDeleteUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "concerts":
			svcf = concertsFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "concerts":
			switch epn {
			case "list":
				epf = concertsListFlags

			case "create":
				epf = concertsCreateFlags

			case "show":
				epf = concertsShowFlags

			case "update":
				epf = concertsUpdateFlags

			case "delete":
				epf = concertsDeleteFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "concerts":
			c := concertsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list":
				endpoint = c.List()
				data, err = concertsc.BuildListPayload(*concertsListPageFlag, *concertsListLimitFlag)
			case "create":
				endpoint = c.Create()
				data, err = concertsc.BuildCreatePayload(*concertsCreateBodyFlag)
			case "show":
				endpoint = c.Show()
				data, err = concertsc.BuildShowPayload(*concertsShowConcertIDFlag)
			case "update":
				endpoint = c.Update()
				data, err = concertsc.BuildUpdatePayload(*concertsUpdateBodyFlag, *concertsUpdateConcertIDFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = concertsc.BuildDeletePayload(*concertsDeleteConcertIDFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// concertsUsage displays the usage of the concerts command and its subcommands.
func concertsUsage() {
	fmt.Fprintf(os.Stderr, `The concerts service manages music concert data.
Usage:
    %[1]s [globalflags] concerts COMMAND [flags]

COMMAND:
    list: List upcoming concerts with optional pagination.
    create: Create a new concert entry.
    show: Get a single concert by ID.
    update: Update an existing concert by ID.
    delete: Remove a concert from the system by ID.

Additional help:
    %[1]s concerts COMMAND --help
`, os.Args[0])
}
func concertsListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] concerts list -page INT -limit INT

List upcoming concerts with optional pagination.
    -page INT: 
    -limit INT: 

Example:
    %[1]s concerts list --page 224960679266521027 --limit 42
`, os.Args[0])
}

func concertsCreateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] concerts create -body JSON

Create a new concert entry.
    -body JSON: 

Example:
    %[1]s concerts create --body '{
      "artist": "The Beatles",
      "date": "2024-01-01",
      "price": 100,
      "venue": "The O2 Arena"
   }'
`, os.Args[0])
}

func concertsShowUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] concerts show -concert-id STRING

Get a single concert by ID.
    -concert-id STRING: Concert UUID

Example:
    %[1]s concerts show --concert-id "3f2e3087-7968-469b-b0cd-07658e8a1491"
`, os.Args[0])
}

func concertsUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] concerts update -body JSON -concert-id STRING

Update an existing concert by ID.
    -body JSON: 
    -concert-id STRING: ID of the concert to update.

Example:
    %[1]s concerts update --body '{
      "artist": "The Beatles",
      "date": "2024-01-01",
      "price": 100,
      "venue": "The O2 Arena"
   }' --concert-id "74027be0-df7b-491f-b589-d3569d5800a9"
`, os.Args[0])
}

func concertsDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] concerts delete -concert-id STRING

Remove a concert from the system by ID.
    -concert-id STRING: ID of the concert to remove.

Example:
    %[1]s concerts delete --concert-id "06742365-34dd-4a73-9317-eef02a4421f0"
`, os.Args[0])
}
