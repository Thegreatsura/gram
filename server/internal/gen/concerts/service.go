// Code generated by goa v3.20.0, DO NOT EDIT.
//
// concerts service
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design -o internal

package concerts

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// The concerts service manages music concert data.
type Service interface {
	// List upcoming concerts with optional pagination.
	List(context.Context, *ListPayload) (res []*Concert, err error)
	// Create a new concert entry.
	Create(context.Context, *ConcertPayload) (res *Concert, err error)
	// Get a single concert by ID.
	Show(context.Context, *ShowPayload) (res *Concert, err error)
	// Update an existing concert by ID.
	Update(context.Context, *UpdatePayload) (res *Concert, err error)
	// Remove a concert from the system by ID.
	Delete(context.Context, *DeletePayload) (err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "concerts"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "concerts"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [5]string{"list", "create", "show", "update", "delete"}

// Concert is the result type of the concerts service create method.
type Concert struct {
	// Unique concert ID
	ID string
	// Performing artist/band
	Artist string
	// Concert date (YYYY-MM-DD)
	Date string
	// Concert venue
	Venue string
	// Ticket price (USD)
	Price int
}

// ConcertPayload is the payload type of the concerts service create method.
type ConcertPayload struct {
	// Performing artist/band
	Artist *string
	// Concert date (YYYY-MM-DD)
	Date *string
	// Concert venue
	Venue *string
	// Ticket price (USD)
	Price *int
}

// DeletePayload is the payload type of the concerts service delete method.
type DeletePayload struct {
	// ID of the concert to remove.
	ConcertID string
}

// ListPayload is the payload type of the concerts service list method.
type ListPayload struct {
	// Page number
	Page int
	// Items per page
	Limit int
}

// ShowPayload is the payload type of the concerts service show method.
type ShowPayload struct {
	// Concert UUID
	ConcertID string
}

// UpdatePayload is the payload type of the concerts service update method.
type UpdatePayload struct {
	// ID of the concert to update.
	ConcertID string
	// Performing artist/band
	Artist *string
	// Concert date (YYYY-MM-DD)
	Date *string
	// Concert venue
	Venue *string
	// Ticket price (USD)
	Price *int
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "not_found", false, false, false)
}
