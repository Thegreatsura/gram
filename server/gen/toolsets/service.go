// Code generated by goa v3.20.1, DO NOT EDIT.
//
// toolsets service
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package toolsets

import (
	"context"

	"goa.design/goa/v3/security"
)

// Managed toolsets for gram AI consumers.
type Service interface {
	// Create a new toolset with associated tools
	CreateToolset(context.Context, *CreateToolsetPayload) (res *Toolset, err error)
	// List all toolsets for a project
	ListToolsets(context.Context, *ListToolsetsPayload) (res *ListToolsetsResult, err error)
	// Update a toolset's properties including name, description, and HTTP tools
	UpdateToolset(context.Context, *UpdateToolsetPayload) (res *Toolset, err error)
	// Delete a toolset by its ID
	DeleteToolset(context.Context, *DeleteToolsetPayload) (err error)
	// Get detailed information about a toolset including full HTTP tool definitions
	GetToolsetDetails(context.Context, *GetToolsetDetailsPayload) (res *ToolsetDetails, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// APIKeyAuth implements the authorization logic for the APIKey security scheme.
	APIKeyAuth(ctx context.Context, key string, schema *security.APIKeyScheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "gram"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "toolsets"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [5]string{"createToolset", "listToolsets", "updateToolset", "deleteToolset", "getToolsetDetails"}

// CreateToolsetPayload is the payload type of the toolsets service
// createToolset method.
type CreateToolsetPayload struct {
	SessionToken *string
	// The name of the toolset
	Name string
	// Description of the toolset
	Description *string
	// List of HTTP tool names to include
	HTTPToolNames []string
	// The ID of the environment to use as the default for the toolset
	DefaultEnvironmentID *string
	ProjectSlugInput     *string
}

// DeleteToolsetPayload is the payload type of the toolsets service
// deleteToolset method.
type DeleteToolsetPayload struct {
	// The slug of the toolset
	Slug             string
	SessionToken     *string
	ProjectSlugInput *string
}

// GetToolsetDetailsPayload is the payload type of the toolsets service
// getToolsetDetails method.
type GetToolsetDetailsPayload struct {
	// The slug of the toolset
	Slug             string
	SessionToken     *string
	ProjectSlugInput *string
}

type HTTPToolDefinition struct {
	// The ID of the HTTP tool
	ID string
	// The ID of the project
	ProjectID string
	// The ID of the deployment
	DeploymentID string
	// The ID of the OpenAPI v3 document
	Openapiv3DocumentID *string
	// The name of the tool
	Name string
	// Summary of the tool
	Summary string
	// Description of the tool
	Description string
	// OpenAPI v3 operation
	Openapiv3Operation *string
	// The tags list for this http tool
	Tags []string
	// Security requirements for the underlying HTTP endpoint
	Security *string
	// HTTP method for the request
	HTTPMethod string
	// Path for the request
	Path string
	// Version of the schema
	SchemaVersion *string
	// JSON schema for the request
	Schema string
	// The creation date of the tool.
	CreatedAt string
	// The last update date of the tool.
	UpdatedAt string
}

// ListToolsetsPayload is the payload type of the toolsets service listToolsets
// method.
type ListToolsetsPayload struct {
	SessionToken     *string
	ProjectSlugInput *string
}

// ListToolsetsResult is the result type of the toolsets service listToolsets
// method.
type ListToolsetsResult struct {
	// The list of toolsets
	Toolsets []*Toolset
}

// Toolset is the result type of the toolsets service createToolset method.
type Toolset struct {
	// The ID of the toolset
	ID string
	// The project ID this toolset belongs to
	ProjectID string
	// The organization ID this toolset belongs to
	OrganizationID string
	// The name of the toolset
	Name string
	// The slug of the toolset
	Slug string
	// Description of the toolset
	Description *string
	// The ID of the environment to use as the default for the toolset
	DefaultEnvironmentID *string
	// List of HTTP tool names included in this toolset
	HTTPToolNames []string
	// When the toolset was created.
	CreatedAt string
	// When the toolset was last updated.
	UpdatedAt string
}

// ToolsetDetails is the result type of the toolsets service getToolsetDetails
// method.
type ToolsetDetails struct {
	// The ID of the toolset
	ID string
	// The project ID this toolset belongs to
	ProjectID string
	// The organization ID this toolset belongs to
	OrganizationID string
	// The name of the toolset
	Name string
	// The slug of the toolset
	Slug string
	// Description of the toolset
	Description *string
	// The ID of the environment to use as the default for the toolset
	DefaultEnvironmentID *string
	// The environment variables that are relevant to the toolset
	RelevantEnvironmentVariables []string
	// The HTTP tools in this toolset
	HTTPTools []*HTTPToolDefinition
	// When the toolset was created.
	CreatedAt string
	// When the toolset was last updated.
	UpdatedAt string
}

// UpdateToolsetPayload is the payload type of the toolsets service
// updateToolset method.
type UpdateToolsetPayload struct {
	SessionToken *string
	// The slug of the toolset to update
	Slug string
	// The new name of the toolset
	Name *string
	// The new description of the toolset
	Description *string
	// The ID of the environment to use as the default for the toolset
	DefaultEnvironmentID *string
	// List of HTTP tool names to include
	HTTPToolNames    []string
	ProjectSlugInput *string
}
