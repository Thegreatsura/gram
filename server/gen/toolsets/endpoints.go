// Code generated by goa v3.20.0, DO NOT EDIT.
//
// toolsets endpoints
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package toolsets

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "toolsets" service endpoints.
type Endpoints struct {
	CreateToolset     goa.Endpoint
	ListToolsets      goa.Endpoint
	UpdateToolset     goa.Endpoint
	DeleteToolset     goa.Endpoint
	GetToolsetDetails goa.Endpoint
}

// NewEndpoints wraps the methods of the "toolsets" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		CreateToolset:     NewCreateToolsetEndpoint(s, a.APIKeyAuth),
		ListToolsets:      NewListToolsetsEndpoint(s, a.APIKeyAuth),
		UpdateToolset:     NewUpdateToolsetEndpoint(s, a.APIKeyAuth),
		DeleteToolset:     NewDeleteToolsetEndpoint(s, a.APIKeyAuth),
		GetToolsetDetails: NewGetToolsetDetailsEndpoint(s, a.APIKeyAuth),
	}
}

// Use applies the given middleware to all the "toolsets" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.CreateToolset = m(e.CreateToolset)
	e.ListToolsets = m(e.ListToolsets)
	e.UpdateToolset = m(e.UpdateToolset)
	e.DeleteToolset = m(e.DeleteToolset)
	e.GetToolsetDetails = m(e.GetToolsetDetails)
}

// NewCreateToolsetEndpoint returns an endpoint function that calls the method
// "createToolset" of service "toolsets".
func NewCreateToolsetEndpoint(s Service, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CreateToolsetPayload)
		var err error
		sc := security.APIKeyScheme{
			Name:           "session",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var key string
		if p.SessionToken != nil {
			key = *p.SessionToken
		}
		ctx, err = authAPIKeyFn(ctx, key, &sc)
		if err != nil {
			return nil, err
		}
		return s.CreateToolset(ctx, p)
	}
}

// NewListToolsetsEndpoint returns an endpoint function that calls the method
// "listToolsets" of service "toolsets".
func NewListToolsetsEndpoint(s Service, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ListToolsetsPayload)
		var err error
		sc := security.APIKeyScheme{
			Name:           "session",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var key string
		if p.SessionToken != nil {
			key = *p.SessionToken
		}
		ctx, err = authAPIKeyFn(ctx, key, &sc)
		if err != nil {
			return nil, err
		}
		return s.ListToolsets(ctx, p)
	}
}

// NewUpdateToolsetEndpoint returns an endpoint function that calls the method
// "updateToolset" of service "toolsets".
func NewUpdateToolsetEndpoint(s Service, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*UpdateToolsetPayload)
		var err error
		sc := security.APIKeyScheme{
			Name:           "session",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var key string
		if p.SessionToken != nil {
			key = *p.SessionToken
		}
		ctx, err = authAPIKeyFn(ctx, key, &sc)
		if err != nil {
			return nil, err
		}
		return s.UpdateToolset(ctx, p)
	}
}

// NewDeleteToolsetEndpoint returns an endpoint function that calls the method
// "deleteToolset" of service "toolsets".
func NewDeleteToolsetEndpoint(s Service, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*DeleteToolsetPayload)
		var err error
		sc := security.APIKeyScheme{
			Name:           "session",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var key string
		if p.SessionToken != nil {
			key = *p.SessionToken
		}
		ctx, err = authAPIKeyFn(ctx, key, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.DeleteToolset(ctx, p)
	}
}

// NewGetToolsetDetailsEndpoint returns an endpoint function that calls the
// method "getToolsetDetails" of service "toolsets".
func NewGetToolsetDetailsEndpoint(s Service, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetToolsetDetailsPayload)
		var err error
		sc := security.APIKeyScheme{
			Name:           "session",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var key string
		if p.SessionToken != nil {
			key = *p.SessionToken
		}
		ctx, err = authAPIKeyFn(ctx, key, &sc)
		if err != nil {
			return nil, err
		}
		return s.GetToolsetDetails(ctx, p)
	}
}
