// Code generated by goa v3.20.0, DO NOT EDIT.
//
// keys client
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package keys

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "keys" service client.
type Client struct {
	CreateKeyEndpoint goa.Endpoint
	ListKeysEndpoint  goa.Endpoint
	RevokeKeyEndpoint goa.Endpoint
}

// NewClient initializes a "keys" service client given the endpoints.
func NewClient(createKey, listKeys, revokeKey goa.Endpoint) *Client {
	return &Client{
		CreateKeyEndpoint: createKey,
		ListKeysEndpoint:  listKeys,
		RevokeKeyEndpoint: revokeKey,
	}
}

// CreateKey calls the "createKey" endpoint of the "keys" service.
func (c *Client) CreateKey(ctx context.Context, p *CreateKeyPayload) (res *Key, err error) {
	var ires any
	ires, err = c.CreateKeyEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*Key), nil
}

// ListKeys calls the "listKeys" endpoint of the "keys" service.
func (c *Client) ListKeys(ctx context.Context, p *ListKeysPayload) (res *ListKeysResult, err error) {
	var ires any
	ires, err = c.ListKeysEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*ListKeysResult), nil
}

// RevokeKey calls the "revokeKey" endpoint of the "keys" service.
func (c *Client) RevokeKey(ctx context.Context, p *RevokeKeyPayload) (res *Key, err error) {
	var ires any
	ires, err = c.RevokeKeyEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*Key), nil
}
