// Code generated by goa v3.20.1, DO NOT EDIT.
//
// packages client
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package packages

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "packages" service client.
type Client struct {
	CreatePackageEndpoint goa.Endpoint
	ListVersionsEndpoint  goa.Endpoint
	PublishEndpoint       goa.Endpoint
}

// NewClient initializes a "packages" service client given the endpoints.
func NewClient(createPackage, listVersions, publish goa.Endpoint) *Client {
	return &Client{
		CreatePackageEndpoint: createPackage,
		ListVersionsEndpoint:  listVersions,
		PublishEndpoint:       publish,
	}
}

// CreatePackage calls the "createPackage" endpoint of the "packages" service.
func (c *Client) CreatePackage(ctx context.Context, p *CreatePackagePayload) (res *CreatePackageResult, err error) {
	var ires any
	ires, err = c.CreatePackageEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*CreatePackageResult), nil
}

// ListVersions calls the "listVersions" endpoint of the "packages" service.
func (c *Client) ListVersions(ctx context.Context, p *ListVersionsPayload) (res *ListVersionsResult, err error) {
	var ires any
	ires, err = c.ListVersionsEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*ListVersionsResult), nil
}

// Publish calls the "publish" endpoint of the "packages" service.
func (c *Client) Publish(ctx context.Context, p *PublishPayload) (res *PublishPackageResult, err error) {
	var ires any
	ires, err = c.PublishEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*PublishPackageResult), nil
}
