// Code generated by goa v3.20.1, DO NOT EDIT.
//
// packages service
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package packages

import (
	"context"

	"goa.design/goa/v3/security"
)

// Manages packages in Gram.
type Service interface {
	// Create a new package for a project.
	CreatePackage(context.Context, *CreatePackageForm) (res *CreatePackageResult, err error)
	// List published versions of a package.
	ListVersions(context.Context, *ListVersionsForm) (res *ListVersionsResult, err error)
	// Publish a new version of a package.
	Publish(context.Context, *PublishPackageForm) (res *PublishPackageResult, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// APIKeyAuth implements the authorization logic for the APIKey security scheme.
	APIKeyAuth(ctx context.Context, key string, schema *security.APIKeyScheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "gram"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "packages"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [3]string{"createPackage", "listVersions", "publish"}

// CreatePackageForm is the payload type of the packages service createPackage
// method.
type CreatePackageForm struct {
	// The name of the package
	Name string
	// The title of the package
	Title *string
	// The summary of the package
	Summary *string
	// The keywords of the package
	Keywords         []string
	SessionToken     *string
	ProjectSlugInput *string
}

// CreatePackageResult is the result type of the packages service createPackage
// method.
type CreatePackageResult struct {
	// The newly created package
	Package *Package
}

// ListVersionsForm is the payload type of the packages service listVersions
// method.
type ListVersionsForm struct {
	// The name of the package
	Name             string
	SessionToken     *string
	ProjectSlugInput *string
}

// ListVersionsResult is the result type of the packages service listVersions
// method.
type ListVersionsResult struct {
	Package  *Package
	Versions []*PackageVersion
}

type Package struct {
	// The ID of the package
	ID string
	// The ID of the project that owns the package
	ProjectID string
	// The ID of the organization that owns the package
	OrganizationID string
	// The name of the package
	Name string
	// The title of the package
	Title *string
	// The summary of the package
	Summary *string
	// The keywords of the package
	Keywords []string
	// The latest version of the package
	LatestVersion *string
	// The creation date of the package
	CreatedAt string
	// The last update date of the package
	UpdatedAt string
	// The deletion date of the package
	DeletedAt *string
}

type PackageVersion struct {
	// The ID of the package version
	ID string
	// The ID of the package that the version belongs to
	PackageID string
	// The ID of the deployment that the version belongs to
	DeploymentID string
	// The visibility of the package version
	Visibility string
	// The semantic version value
	Semver string
	// The creation date of the package version
	CreatedAt string
}

// PublishPackageForm is the payload type of the packages service publish
// method.
type PublishPackageForm struct {
	// The name of the package
	Name string
	// The new semantic version of the package to publish
	Version string
	// The deployment ID to associate with the package version
	DeploymentID string
	// The visibility of the package version
	Visibility       string
	SessionToken     *string
	ProjectSlugInput *string
}

// PublishPackageResult is the result type of the packages service publish
// method.
type PublishPackageResult struct {
	// The published package
	Package *Package
	// The published package version
	Version *PackageVersion
}
