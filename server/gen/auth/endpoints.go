// Code generated by goa v3.20.0, DO NOT EDIT.
//
// auth endpoints
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package auth

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "auth" service endpoints.
type Endpoints struct {
	AuthCallback     goa.Endpoint
	AuthSwitchScopes goa.Endpoint
	AuthLogout       goa.Endpoint
	AuthInfo         goa.Endpoint
}

// NewEndpoints wraps the methods of the "auth" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		AuthCallback:     NewAuthCallbackEndpoint(s),
		AuthSwitchScopes: NewAuthSwitchScopesEndpoint(s, a.APIKeyAuth),
		AuthLogout:       NewAuthLogoutEndpoint(s, a.APIKeyAuth),
		AuthInfo:         NewAuthInfoEndpoint(s, a.APIKeyAuth),
	}
}

// Use applies the given middleware to all the "auth" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.AuthCallback = m(e.AuthCallback)
	e.AuthSwitchScopes = m(e.AuthSwitchScopes)
	e.AuthLogout = m(e.AuthLogout)
	e.AuthInfo = m(e.AuthInfo)
}

// NewAuthCallbackEndpoint returns an endpoint function that calls the method
// "auth callback" of service "auth".
func NewAuthCallbackEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*AuthCallbackPayload)
		return s.AuthCallback(ctx, p)
	}
}

// NewAuthSwitchScopesEndpoint returns an endpoint function that calls the
// method "auth switch scopes" of service "auth".
func NewAuthSwitchScopesEndpoint(s Service, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*AuthSwitchScopesPayload)
		var err error
		sc := security.APIKeyScheme{
			Name:           "gram_session",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var key string
		if p.GramSessionToken != nil {
			key = *p.GramSessionToken
		}
		ctx, err = authAPIKeyFn(ctx, key, &sc)
		if err != nil {
			return nil, err
		}
		return s.AuthSwitchScopes(ctx, p)
	}
}

// NewAuthLogoutEndpoint returns an endpoint function that calls the method
// "auth logout" of service "auth".
func NewAuthLogoutEndpoint(s Service, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*AuthLogoutPayload)
		var err error
		sc := security.APIKeyScheme{
			Name:           "gram_session",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var key string
		if p.GramSessionToken != nil {
			key = *p.GramSessionToken
		}
		ctx, err = authAPIKeyFn(ctx, key, &sc)
		if err != nil {
			return nil, err
		}
		return s.AuthLogout(ctx, p)
	}
}

// NewAuthInfoEndpoint returns an endpoint function that calls the method "auth
// info" of service "auth".
func NewAuthInfoEndpoint(s Service, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*AuthInfoPayload)
		var err error
		sc := security.APIKeyScheme{
			Name:           "gram_session",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var key string
		if p.GramSessionToken != nil {
			key = *p.GramSessionToken
		}
		ctx, err = authAPIKeyFn(ctx, key, &sc)
		if err != nil {
			return nil, err
		}
		return s.AuthInfo(ctx, p)
	}
}
