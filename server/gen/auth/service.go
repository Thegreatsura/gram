// Code generated by goa v3.20.0, DO NOT EDIT.
//
// auth service
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package auth

import (
	"context"

	"goa.design/goa/v3/security"
)

// Managed auth for gram producers and dashboard.
type Service interface {
	// Handles the authentication callback.
	Callback(context.Context, *CallbackPayload) (res *CallbackResult, err error)
	// Switches the authentication scope to a different organization.
	SwitchScopes(context.Context, *SwitchScopesPayload) (res *SwitchScopesResult, err error)
	// Logs out the current user by clearing their session.
	Logout(context.Context, *LogoutPayload) (res *LogoutResult, err error)
	// Provides information about the current authentication status.
	Info(context.Context, *InfoPayload) (res *InfoResult, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// APIKeyAuth implements the authorization logic for the APIKey security scheme.
	APIKeyAuth(ctx context.Context, key string, schema *security.APIKeyScheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "gram"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "auth"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [4]string{"callback", "switchScopes", "logout", "info"}

// CallbackPayload is the payload type of the auth service callback method.
type CallbackPayload struct {
	// The shared token for authentication from the speakeasy system
	SharedToken string
}

// CallbackResult is the result type of the auth service callback method.
type CallbackResult struct {
	// The URL to redirect to after authentication
	Location string
	// The authentication session
	GramSessionToken string
	// The authentication session
	GramSessionCookie string
}

// InfoPayload is the payload type of the auth service info method.
type InfoPayload struct {
	GramSessionToken *string
}

// InfoResult is the result type of the auth service info method.
type InfoResult struct {
	UserID               string
	UserEmail            string
	ActiveOrganizationID string
	ActiveProjectID      string
	Organizations        []*Organization
	// The authentication session
	GramSessionToken string
	// The authentication session
	GramSessionCookie string
}

// LogoutPayload is the payload type of the auth service logout method.
type LogoutPayload struct {
	GramSessionToken *string
}

// LogoutResult is the result type of the auth service logout method.
type LogoutResult struct {
	// Empty string to clear the session
	GramSessionCookie string
}

type Organization struct {
	OrganizationID   string
	OrganizationName string
	OrganizationSlug string
	AccountType      string
	Projects         []*Project
}

type Project struct {
	ProjectID string
}

// SwitchScopesPayload is the payload type of the auth service switchScopes
// method.
type SwitchScopesPayload struct {
	// The organization slug to switch scopes
	OrganizationID *string
	// The project id to switch scopes too
	ProjectID        *string
	GramSessionToken *string
}

// SwitchScopesResult is the result type of the auth service switchScopes
// method.
type SwitchScopesResult struct {
	// The authentication session
	GramSessionToken string
	// The authentication session
	GramSessionCookie string
}
