// Code generated by goa v3.20.1, DO NOT EDIT.
//
// auth client
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package auth

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "auth" service client.
type Client struct {
	CallbackEndpoint     goa.Endpoint
	LoginEndpoint        goa.Endpoint
	SwitchScopesEndpoint goa.Endpoint
	LogoutEndpoint       goa.Endpoint
	InfoEndpoint         goa.Endpoint
}

// NewClient initializes a "auth" service client given the endpoints.
func NewClient(callback, login, switchScopes, logout, info goa.Endpoint) *Client {
	return &Client{
		CallbackEndpoint:     callback,
		LoginEndpoint:        login,
		SwitchScopesEndpoint: switchScopes,
		LogoutEndpoint:       logout,
		InfoEndpoint:         info,
	}
}

// Callback calls the "callback" endpoint of the "auth" service.
func (c *Client) Callback(ctx context.Context, p *CallbackPayload) (res *CallbackResult, err error) {
	var ires any
	ires, err = c.CallbackEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*CallbackResult), nil
}

// Login calls the "login" endpoint of the "auth" service.
func (c *Client) Login(ctx context.Context) (res *LoginResult, err error) {
	var ires any
	ires, err = c.LoginEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(*LoginResult), nil
}

// SwitchScopes calls the "switchScopes" endpoint of the "auth" service.
func (c *Client) SwitchScopes(ctx context.Context, p *SwitchScopesPayload) (res *SwitchScopesResult, err error) {
	var ires any
	ires, err = c.SwitchScopesEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*SwitchScopesResult), nil
}

// Logout calls the "logout" endpoint of the "auth" service.
func (c *Client) Logout(ctx context.Context, p *LogoutPayload) (res *LogoutResult, err error) {
	var ires any
	ires, err = c.LogoutEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*LogoutResult), nil
}

// Info calls the "info" endpoint of the "auth" service.
func (c *Client) Info(ctx context.Context, p *InfoPayload) (res *InfoResult, err error) {
	var ires any
	ires, err = c.InfoEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*InfoResult), nil
}
