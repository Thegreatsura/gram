// Code generated by goa v3.20.0, DO NOT EDIT.
//
// auth client
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package auth

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "auth" service client.
type Client struct {
	AuthCallbackEndpoint     goa.Endpoint
	AuthSwitchScopesEndpoint goa.Endpoint
	AuthLogoutEndpoint       goa.Endpoint
	AuthInfoEndpoint         goa.Endpoint
}

// NewClient initializes a "auth" service client given the endpoints.
func NewClient(authCallback, authSwitchScopes, authLogout, authInfo goa.Endpoint) *Client {
	return &Client{
		AuthCallbackEndpoint:     authCallback,
		AuthSwitchScopesEndpoint: authSwitchScopes,
		AuthLogoutEndpoint:       authLogout,
		AuthInfoEndpoint:         authInfo,
	}
}

// AuthCallback calls the "auth callback" endpoint of the "auth" service.
func (c *Client) AuthCallback(ctx context.Context, p *AuthCallbackPayload) (res *AuthCallbackResult, err error) {
	var ires any
	ires, err = c.AuthCallbackEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*AuthCallbackResult), nil
}

// AuthSwitchScopes calls the "auth switch scopes" endpoint of the "auth"
// service.
func (c *Client) AuthSwitchScopes(ctx context.Context, p *AuthSwitchScopesPayload) (res *AuthSwitchScopesResult, err error) {
	var ires any
	ires, err = c.AuthSwitchScopesEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*AuthSwitchScopesResult), nil
}

// AuthLogout calls the "auth logout" endpoint of the "auth" service.
func (c *Client) AuthLogout(ctx context.Context, p *AuthLogoutPayload) (res *AuthLogoutResult, err error) {
	var ires any
	ires, err = c.AuthLogoutEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*AuthLogoutResult), nil
}

// AuthInfo calls the "auth info" endpoint of the "auth" service.
func (c *Client) AuthInfo(ctx context.Context, p *AuthInfoPayload) (res *AuthInfoResult, err error) {
	var ires any
	ires, err = c.AuthInfoEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*AuthInfoResult), nil
}
