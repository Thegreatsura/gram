// Code generated by goa v3.20.1, DO NOT EDIT.
//
// tools service
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package tools

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Dashboard API for interacting with tools.
type Service interface {
	// List all tools for a project
	ListTools(context.Context, *ListToolsPayload) (res *ListToolsResult, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// APIKeyAuth implements the authorization logic for the APIKey security scheme.
	APIKeyAuth(ctx context.Context, key string, schema *security.APIKeyScheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "gram"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "tools"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"listTools"}

type HTTPToolDefinition struct {
	// The ID of the HTTP tool
	ID string
	// The ID of the project
	ProjectID string
	// The ID of the deployment
	DeploymentID string
	// The ID of the OpenAPI v3 document
	Openapiv3DocumentID *string
	// The name of the tool
	Name string
	// Summary of the tool
	Summary string
	// Description of the tool
	Description string
	// OpenAPI v3 operation
	Openapiv3Operation *string
	// The tags list for this http tool
	Tags []string
	// Security requirements for the underlying HTTP endpoint
	Security *string
	// HTTP method for the request
	HTTPMethod string
	// Path for the request
	Path string
	// Version of the schema
	SchemaVersion *string
	// JSON schema for the request
	Schema string
	// The creation date of the tool.
	CreatedAt string
	// The last update date of the tool.
	UpdatedAt string
}

// ListToolsPayload is the payload type of the tools service listTools method.
type ListToolsPayload struct {
	SessionToken     *string
	ProjectSlugInput *string
	// The deployment ID. If unset, latest deployment will be used.
	DeploymentID *string
	// The cursor to fetch results from
	Cursor *string
}

// ListToolsResult is the result type of the tools service listTools method.
type ListToolsResult struct {
	// The cursor to fetch results from
	NextCursor *string
	// The list of tools
	Tools []*HTTPToolDefinition
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unauthorized", false, false, false)
}

// MakeForbidden builds a goa.ServiceError from an error.
func MakeForbidden(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "forbidden", false, false, false)
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "bad_request", false, false, false)
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "not_found", false, false, false)
}

// MakeConflict builds a goa.ServiceError from an error.
func MakeConflict(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "conflict", false, false, false)
}

// MakeUnsupportedMedia builds a goa.ServiceError from an error.
func MakeUnsupportedMedia(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unsupported_media", false, false, false)
}

// MakeInvalid builds a goa.ServiceError from an error.
func MakeInvalid(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "invalid", false, false, false)
}

// MakeInvariantViolation builds a goa.ServiceError from an error.
func MakeInvariantViolation(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "invariant_violation", false, false, true)
}

// MakeUnexpected builds a goa.ServiceError from an error.
func MakeUnexpected(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unexpected", false, false, true)
}
