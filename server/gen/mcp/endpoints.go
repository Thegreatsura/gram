// Code generated by goa v3.20.1, DO NOT EDIT.
//
// mcp endpoints
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package mcp

import (
	"context"
	"io"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "mcp" service endpoints.
type Endpoints struct {
	ServePublic        goa.Endpoint
	ServeAuthenticated goa.Endpoint
}

// ServePublicRequestData holds both the payload and the HTTP request body
// reader of the "servePublic" method.
type ServePublicRequestData struct {
	// Payload is the method payload.
	Payload *ServePublicPayload
	// Body streams the HTTP request body.
	Body io.ReadCloser
}

// ServePublicResponseData holds both the result and the HTTP response body
// reader of the "servePublic" method.
type ServePublicResponseData struct {
	// Result is the method result.
	Result *ServePublicResult
	// Body streams the HTTP response body.
	Body io.ReadCloser
}

// ServeAuthenticatedRequestData holds both the payload and the HTTP request
// body reader of the "serveAuthenticated" method.
type ServeAuthenticatedRequestData struct {
	// Payload is the method payload.
	Payload *ServeAuthenticatedPayload
	// Body streams the HTTP request body.
	Body io.ReadCloser
}

// ServeAuthenticatedResponseData holds both the result and the HTTP response
// body reader of the "serveAuthenticated" method.
type ServeAuthenticatedResponseData struct {
	// Result is the method result.
	Result *ServeAuthenticatedResult
	// Body streams the HTTP response body.
	Body io.ReadCloser
}

// NewEndpoints wraps the methods of the "mcp" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		ServePublic:        NewServePublicEndpoint(s),
		ServeAuthenticated: NewServeAuthenticatedEndpoint(s, a.APIKeyAuth),
	}
}

// Use applies the given middleware to all the "mcp" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.ServePublic = m(e.ServePublic)
	e.ServeAuthenticated = m(e.ServeAuthenticated)
}

// NewServePublicEndpoint returns an endpoint function that calls the method
// "servePublic" of service "mcp".
func NewServePublicEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		ep := req.(*ServePublicRequestData)
		res, body, err := s.ServePublic(ctx, ep.Payload, ep.Body)
		if err != nil {
			return nil, err
		}
		return &ServePublicResponseData{Result: res, Body: body}, nil
	}
}

// NewServeAuthenticatedEndpoint returns an endpoint function that calls the
// method "serveAuthenticated" of service "mcp".
func NewServeAuthenticatedEndpoint(s Service, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		ep := req.(*ServeAuthenticatedRequestData)
		var err error
		sc := security.APIKeyScheme{
			Name:           "apikey",
			Scopes:         []string{"consumer", "producer"},
			RequiredScopes: []string{"consumer"},
		}
		var key string
		if ep.Payload.ApikeyToken != nil {
			key = *ep.Payload.ApikeyToken
		}
		ctx, err = authAPIKeyFn(ctx, key, &sc)
		if err == nil {
			sc := security.APIKeyScheme{
				Name:           "project_slug",
				Scopes:         []string{},
				RequiredScopes: []string{"consumer"},
			}
			var key string
			if ep.Payload.Project != nil {
				key = *ep.Payload.Project
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
		}
		if err != nil {
			return nil, err
		}
		res, body, err := s.ServeAuthenticated(ctx, ep.Payload, ep.Body)
		if err != nil {
			return nil, err
		}
		return &ServeAuthenticatedResponseData{Result: res, Body: body}, nil
	}
}
