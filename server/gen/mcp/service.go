// Code generated by goa v3.20.1, DO NOT EDIT.
//
// mcp service
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package mcp

import (
	"context"
	"io"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Model Context Protocol server hosting.
type Service interface {
	// MCP server endpoint for a toolset (public, no environment param).

	// If body implements [io.WriterTo], that implementation will be used instead.
	// Consider [goa.design/goa/v3/pkg.SkipResponseWriter] to adapt existing
	// implementations.
	ServePublic(context.Context, *ServePublicPayload, io.ReadCloser) (res *ServePublicResult, body io.ReadCloser, err error)
	// MCP server endpoint for a toolset (environment as path param, authenticated).

	// If body implements [io.WriterTo], that implementation will be used instead.
	// Consider [goa.design/goa/v3/pkg.SkipResponseWriter] to adapt existing
	// implementations.
	ServeAuthenticated(context.Context, *ServeAuthenticatedPayload, io.ReadCloser) (res *ServeAuthenticatedResult, body io.ReadCloser, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// APIKeyAuth implements the authorization logic for the APIKey security scheme.
	APIKeyAuth(ctx context.Context, key string, schema *security.APIKeyScheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "gram"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "mcp"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [2]string{"servePublic", "serveAuthenticated"}

// ServeAuthenticatedPayload is the payload type of the mcp service
// serveAuthenticated method.
type ServeAuthenticatedPayload struct {
	ApikeyToken *string
	Project     *string
	// The toolset to access via MCP.
	Toolset *string
	// The environment to access via MCP.
	Environment *string
	// The environment variables passed by user to MCP server (JSON Structured).
	EnvironmentVariables *string
}

// ServeAuthenticatedResult is the result type of the mcp service
// serveAuthenticated method.
type ServeAuthenticatedResult struct {
	ContentType string
}

// ServePublicPayload is the payload type of the mcp service servePublic method.
type ServePublicPayload struct {
	// The unique slug of the mcp server.
	McpSlug string
	// The environment variables passed by user to MCP server (JSON Structured).
	EnvironmentVariables *string
	// The API key token (OPTIONAL).
	ApikeyToken *string
}

// ServePublicResult is the result type of the mcp service servePublic method.
type ServePublicResult struct {
	ContentType string
}

type NoContent struct {
	Ack bool
}

// Error returns an error description.
func (e *NoContent) Error() string {
	return ""
}

// ErrorName returns "no_content".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *NoContent) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "no_content".
func (e *NoContent) GoaErrorName() string {
	return "no_content"
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unauthorized", false, false, false)
}

// MakeForbidden builds a goa.ServiceError from an error.
func MakeForbidden(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "forbidden", false, false, false)
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "bad_request", false, false, false)
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "not_found", false, false, false)
}

// MakeConflict builds a goa.ServiceError from an error.
func MakeConflict(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "conflict", false, false, false)
}

// MakeUnsupportedMedia builds a goa.ServiceError from an error.
func MakeUnsupportedMedia(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unsupported_media", false, false, false)
}

// MakeInvalid builds a goa.ServiceError from an error.
func MakeInvalid(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "invalid", false, false, false)
}

// MakeInvariantViolation builds a goa.ServiceError from an error.
func MakeInvariantViolation(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "invariant_violation", false, false, true)
}

// MakeUnexpected builds a goa.ServiceError from an error.
func MakeUnexpected(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unexpected", false, false, true)
}

// MakeGatewayError builds a goa.ServiceError from an error.
func MakeGatewayError(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "gateway_error", false, false, true)
}
