// Code generated by goa v3.20.0, DO NOT EDIT.
//
// environments HTTP client CLI support package
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package client

import (
	"encoding/json"
	"fmt"

	environments "github.com/speakeasy-api/gram/gen/environments"
	goa "goa.design/goa/v3/pkg"
)

// BuildCreateEnvironmentPayload builds the payload for the environments
// createEnvironment endpoint from CLI flags.
func BuildCreateEnvironmentPayload(environmentsCreateEnvironmentBody string, environmentsCreateEnvironmentSessionToken string, environmentsCreateEnvironmentProjectSlug string) (*environments.CreateEnvironmentPayload, error) {
	var err error
	var body CreateEnvironmentRequestBody
	{
		err = json.Unmarshal([]byte(environmentsCreateEnvironmentBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"description\": \"Sint veniam sint eum porro et ipsam.\",\n      \"entries\": [\n         {\n            \"name\": \"Ut tempora.\",\n            \"value\": \"Hic voluptatem minima quia.\"\n         },\n         {\n            \"name\": \"Ut tempora.\",\n            \"value\": \"Hic voluptatem minima quia.\"\n         },\n         {\n            \"name\": \"Ut tempora.\",\n            \"value\": \"Hic voluptatem minima quia.\"\n         }\n      ],\n      \"name\": \"Iusto eos consequatur.\",\n      \"organization_id\": \"Quisquam nihil amet esse.\"\n   }'")
		}
		if body.Entries == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("entries", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	var sessionToken *string
	{
		if environmentsCreateEnvironmentSessionToken != "" {
			sessionToken = &environmentsCreateEnvironmentSessionToken
		}
	}
	var projectSlug string
	{
		projectSlug = environmentsCreateEnvironmentProjectSlug
	}
	v := &environments.CreateEnvironmentPayload{
		OrganizationID: body.OrganizationID,
		Name:           body.Name,
		Description:    body.Description,
	}
	if body.Entries != nil {
		v.Entries = make([]*environments.EnvironmentEntryInput, len(body.Entries))
		for i, val := range body.Entries {
			v.Entries[i] = marshalEnvironmentEntryInputRequestBodyToEnvironmentsEnvironmentEntryInput(val)
		}
	} else {
		v.Entries = []*environments.EnvironmentEntryInput{}
	}
	v.SessionToken = sessionToken
	v.ProjectSlug = projectSlug

	return v, nil
}

// BuildListEnvironmentsPayload builds the payload for the environments
// listEnvironments endpoint from CLI flags.
func BuildListEnvironmentsPayload(environmentsListEnvironmentsSessionToken string, environmentsListEnvironmentsProjectSlug string) (*environments.ListEnvironmentsPayload, error) {
	var sessionToken *string
	{
		if environmentsListEnvironmentsSessionToken != "" {
			sessionToken = &environmentsListEnvironmentsSessionToken
		}
	}
	var projectSlug string
	{
		projectSlug = environmentsListEnvironmentsProjectSlug
	}
	v := &environments.ListEnvironmentsPayload{}
	v.SessionToken = sessionToken
	v.ProjectSlug = projectSlug

	return v, nil
}

// BuildUpdateEnvironmentPayload builds the payload for the environments
// updateEnvironment endpoint from CLI flags.
func BuildUpdateEnvironmentPayload(environmentsUpdateEnvironmentBody string, environmentsUpdateEnvironmentID string, environmentsUpdateEnvironmentSessionToken string, environmentsUpdateEnvironmentProjectSlug string) (*environments.UpdateEnvironmentPayload, error) {
	var err error
	var body UpdateEnvironmentRequestBody
	{
		err = json.Unmarshal([]byte(environmentsUpdateEnvironmentBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"entries_to_remove\": [\n         \"Voluptatem voluptatum et itaque esse corrupti.\",\n         \"Rerum nihil nostrum eos illo veritatis.\",\n         \"Quae perspiciatis quis praesentium.\",\n         \"Repellendus molestiae accusamus quia.\"\n      ],\n      \"entries_to_update\": [\n         {\n            \"name\": \"Ut tempora.\",\n            \"value\": \"Hic voluptatem minima quia.\"\n         },\n         {\n            \"name\": \"Ut tempora.\",\n            \"value\": \"Hic voluptatem minima quia.\"\n         }\n      ],\n      \"environment_id\": \"Eum sit.\"\n   }'")
		}
		if body.EntriesToUpdate == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("entries_to_update", "body"))
		}
		if body.EntriesToRemove == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("entries_to_remove", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	var id string
	{
		id = environmentsUpdateEnvironmentID
	}
	var sessionToken *string
	{
		if environmentsUpdateEnvironmentSessionToken != "" {
			sessionToken = &environmentsUpdateEnvironmentSessionToken
		}
	}
	var projectSlug string
	{
		projectSlug = environmentsUpdateEnvironmentProjectSlug
	}
	v := &environments.UpdateEnvironmentPayload{
		EnvironmentID: body.EnvironmentID,
	}
	if body.EntriesToUpdate != nil {
		v.EntriesToUpdate = make([]*environments.EnvironmentEntryInput, len(body.EntriesToUpdate))
		for i, val := range body.EntriesToUpdate {
			v.EntriesToUpdate[i] = marshalEnvironmentEntryInputRequestBodyToEnvironmentsEnvironmentEntryInput(val)
		}
	} else {
		v.EntriesToUpdate = []*environments.EnvironmentEntryInput{}
	}
	if body.EntriesToRemove != nil {
		v.EntriesToRemove = make([]string, len(body.EntriesToRemove))
		for i, val := range body.EntriesToRemove {
			v.EntriesToRemove[i] = val
		}
	} else {
		v.EntriesToRemove = []string{}
	}
	v.ID = id
	v.SessionToken = sessionToken
	v.ProjectSlug = projectSlug

	return v, nil
}

// BuildDeleteEnvironmentPayload builds the payload for the environments
// deleteEnvironment endpoint from CLI flags.
func BuildDeleteEnvironmentPayload(environmentsDeleteEnvironmentID string, environmentsDeleteEnvironmentSessionToken string, environmentsDeleteEnvironmentProjectSlug string) (*environments.DeleteEnvironmentPayload, error) {
	var id string
	{
		id = environmentsDeleteEnvironmentID
	}
	var sessionToken *string
	{
		if environmentsDeleteEnvironmentSessionToken != "" {
			sessionToken = &environmentsDeleteEnvironmentSessionToken
		}
	}
	var projectSlug string
	{
		projectSlug = environmentsDeleteEnvironmentProjectSlug
	}
	v := &environments.DeleteEnvironmentPayload{}
	v.ID = id
	v.SessionToken = sessionToken
	v.ProjectSlug = projectSlug

	return v, nil
}
