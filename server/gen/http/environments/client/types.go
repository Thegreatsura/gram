// Code generated by goa v3.20.1, DO NOT EDIT.
//
// environments HTTP client types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package client

import (
	environments "github.com/speakeasy-api/gram/gen/environments"
	goa "goa.design/goa/v3/pkg"
)

// CreateEnvironmentRequestBody is the type of the "environments" service
// "createEnvironment" endpoint HTTP request body.
type CreateEnvironmentRequestBody struct {
	// The organization ID this environment belongs to
	OrganizationID string `form:"organization_id" json:"organization_id" xml:"organization_id"`
	// The name of the environment
	Name string `form:"name" json:"name" xml:"name"`
	// Optional description of the environment
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// List of environment variable entries
	Entries []*EnvironmentEntryInputRequestBody `form:"entries" json:"entries" xml:"entries"`
}

// UpdateEnvironmentRequestBody is the type of the "environments" service
// "updateEnvironment" endpoint HTTP request body.
type UpdateEnvironmentRequestBody struct {
	// The description of the environment
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The name of the environment
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// List of environment entries to update or create
	EntriesToUpdate []*EnvironmentEntryInputRequestBody `form:"entries_to_update" json:"entries_to_update" xml:"entries_to_update"`
	// List of environment entry names to remove
	EntriesToRemove []string `form:"entries_to_remove" json:"entries_to_remove" xml:"entries_to_remove"`
}

// CreateEnvironmentResponseBody is the type of the "environments" service
// "createEnvironment" endpoint HTTP response body.
type CreateEnvironmentResponseBody struct {
	// The ID of the environment
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The organization ID this environment belongs to
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// The project ID this environment belongs to
	ProjectID *string `form:"project_id,omitempty" json:"project_id,omitempty" xml:"project_id,omitempty"`
	// The name of the environment
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The slug identifier for the environment
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	// The description of the environment
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// List of environment entries
	Entries []*EnvironmentEntryResponseBody `form:"entries,omitempty" json:"entries,omitempty" xml:"entries,omitempty"`
	// The creation date of the environment
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// When the environment was last updated
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// ListEnvironmentsResponseBody is the type of the "environments" service
// "listEnvironments" endpoint HTTP response body.
type ListEnvironmentsResponseBody struct {
	Environments []*EnvironmentResponseBody `form:"environments,omitempty" json:"environments,omitempty" xml:"environments,omitempty"`
}

// UpdateEnvironmentResponseBody is the type of the "environments" service
// "updateEnvironment" endpoint HTTP response body.
type UpdateEnvironmentResponseBody struct {
	// The ID of the environment
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The organization ID this environment belongs to
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// The project ID this environment belongs to
	ProjectID *string `form:"project_id,omitempty" json:"project_id,omitempty" xml:"project_id,omitempty"`
	// The name of the environment
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The slug identifier for the environment
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	// The description of the environment
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// List of environment entries
	Entries []*EnvironmentEntryResponseBody `form:"entries,omitempty" json:"entries,omitempty" xml:"entries,omitempty"`
	// The creation date of the environment
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// When the environment was last updated
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// EnvironmentEntryInputRequestBody is used to define fields on request body
// types.
type EnvironmentEntryInputRequestBody struct {
	// The name of the environment variable
	Name string `form:"name" json:"name" xml:"name"`
	// The value of the environment variable
	Value string `form:"value" json:"value" xml:"value"`
}

// EnvironmentEntryResponseBody is used to define fields on response body types.
type EnvironmentEntryResponseBody struct {
	// The name of the environment variable
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Redacted values of the environment variable
	Value *string `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
	// The creation date of the environment entry
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// When the environment entry was last updated
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// EnvironmentResponseBody is used to define fields on response body types.
type EnvironmentResponseBody struct {
	// The ID of the environment
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The organization ID this environment belongs to
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// The project ID this environment belongs to
	ProjectID *string `form:"project_id,omitempty" json:"project_id,omitempty" xml:"project_id,omitempty"`
	// The name of the environment
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The slug identifier for the environment
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	// The description of the environment
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// List of environment entries
	Entries []*EnvironmentEntryResponseBody `form:"entries,omitempty" json:"entries,omitempty" xml:"entries,omitempty"`
	// The creation date of the environment
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// When the environment was last updated
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// NewCreateEnvironmentRequestBody builds the HTTP request body from the
// payload of the "createEnvironment" endpoint of the "environments" service.
func NewCreateEnvironmentRequestBody(p *environments.CreateEnvironmentPayload) *CreateEnvironmentRequestBody {
	body := &CreateEnvironmentRequestBody{
		OrganizationID: p.OrganizationID,
		Name:           p.Name,
		Description:    p.Description,
	}
	if p.Entries != nil {
		body.Entries = make([]*EnvironmentEntryInputRequestBody, len(p.Entries))
		for i, val := range p.Entries {
			body.Entries[i] = marshalEnvironmentsEnvironmentEntryInputToEnvironmentEntryInputRequestBody(val)
		}
	} else {
		body.Entries = []*EnvironmentEntryInputRequestBody{}
	}
	return body
}

// NewUpdateEnvironmentRequestBody builds the HTTP request body from the
// payload of the "updateEnvironment" endpoint of the "environments" service.
func NewUpdateEnvironmentRequestBody(p *environments.UpdateEnvironmentPayload) *UpdateEnvironmentRequestBody {
	body := &UpdateEnvironmentRequestBody{
		Description: p.Description,
		Name:        p.Name,
	}
	if p.EntriesToUpdate != nil {
		body.EntriesToUpdate = make([]*EnvironmentEntryInputRequestBody, len(p.EntriesToUpdate))
		for i, val := range p.EntriesToUpdate {
			body.EntriesToUpdate[i] = marshalEnvironmentsEnvironmentEntryInputToEnvironmentEntryInputRequestBody(val)
		}
	} else {
		body.EntriesToUpdate = []*EnvironmentEntryInputRequestBody{}
	}
	if p.EntriesToRemove != nil {
		body.EntriesToRemove = make([]string, len(p.EntriesToRemove))
		for i, val := range p.EntriesToRemove {
			body.EntriesToRemove[i] = val
		}
	} else {
		body.EntriesToRemove = []string{}
	}
	return body
}

// NewCreateEnvironmentEnvironmentOK builds a "environments" service
// "createEnvironment" endpoint result from a HTTP "OK" response.
func NewCreateEnvironmentEnvironmentOK(body *CreateEnvironmentResponseBody) *environments.Environment {
	v := &environments.Environment{
		ID:             *body.ID,
		OrganizationID: *body.OrganizationID,
		ProjectID:      *body.ProjectID,
		Name:           *body.Name,
		Slug:           *body.Slug,
		Description:    body.Description,
		CreatedAt:      *body.CreatedAt,
		UpdatedAt:      *body.UpdatedAt,
	}
	v.Entries = make([]*environments.EnvironmentEntry, len(body.Entries))
	for i, val := range body.Entries {
		v.Entries[i] = unmarshalEnvironmentEntryResponseBodyToEnvironmentsEnvironmentEntry(val)
	}

	return v
}

// NewListEnvironmentsResultOK builds a "environments" service
// "listEnvironments" endpoint result from a HTTP "OK" response.
func NewListEnvironmentsResultOK(body *ListEnvironmentsResponseBody) *environments.ListEnvironmentsResult {
	v := &environments.ListEnvironmentsResult{}
	v.Environments = make([]*environments.Environment, len(body.Environments))
	for i, val := range body.Environments {
		v.Environments[i] = unmarshalEnvironmentResponseBodyToEnvironmentsEnvironment(val)
	}

	return v
}

// NewUpdateEnvironmentEnvironmentOK builds a "environments" service
// "updateEnvironment" endpoint result from a HTTP "OK" response.
func NewUpdateEnvironmentEnvironmentOK(body *UpdateEnvironmentResponseBody) *environments.Environment {
	v := &environments.Environment{
		ID:             *body.ID,
		OrganizationID: *body.OrganizationID,
		ProjectID:      *body.ProjectID,
		Name:           *body.Name,
		Slug:           *body.Slug,
		Description:    body.Description,
		CreatedAt:      *body.CreatedAt,
		UpdatedAt:      *body.UpdatedAt,
	}
	v.Entries = make([]*environments.EnvironmentEntry, len(body.Entries))
	for i, val := range body.Entries {
		v.Entries[i] = unmarshalEnvironmentEntryResponseBodyToEnvironmentsEnvironmentEntry(val)
	}

	return v
}

// ValidateCreateEnvironmentResponseBody runs the validations defined on
// CreateEnvironmentResponseBody
func ValidateCreateEnvironmentResponseBody(body *CreateEnvironmentResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.OrganizationID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("organization_id", "body"))
	}
	if body.ProjectID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("project_id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slug", "body"))
	}
	if body.Entries == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("entries", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	for _, e := range body.Entries {
		if e != nil {
			if err2 := ValidateEnvironmentEntryResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateListEnvironmentsResponseBody runs the validations defined on
// ListEnvironmentsResponseBody
func ValidateListEnvironmentsResponseBody(body *ListEnvironmentsResponseBody) (err error) {
	if body.Environments == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("environments", "body"))
	}
	for _, e := range body.Environments {
		if e != nil {
			if err2 := ValidateEnvironmentResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateUpdateEnvironmentResponseBody runs the validations defined on
// UpdateEnvironmentResponseBody
func ValidateUpdateEnvironmentResponseBody(body *UpdateEnvironmentResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.OrganizationID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("organization_id", "body"))
	}
	if body.ProjectID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("project_id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slug", "body"))
	}
	if body.Entries == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("entries", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	for _, e := range body.Entries {
		if e != nil {
			if err2 := ValidateEnvironmentEntryResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateEnvironmentEntryResponseBody runs the validations defined on
// EnvironmentEntryResponseBody
func ValidateEnvironmentEntryResponseBody(body *EnvironmentEntryResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Value == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("value", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateEnvironmentResponseBody runs the validations defined on
// EnvironmentResponseBody
func ValidateEnvironmentResponseBody(body *EnvironmentResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.OrganizationID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("organization_id", "body"))
	}
	if body.ProjectID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("project_id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slug", "body"))
	}
	if body.Entries == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("entries", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	for _, e := range body.Entries {
		if e != nil {
			if err2 := ValidateEnvironmentEntryResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}
