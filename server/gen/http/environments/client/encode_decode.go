// Code generated by goa v3.20.0, DO NOT EDIT.
//
// environments HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	environments "github.com/speakeasy-api/gram/gen/environments"
	goahttp "goa.design/goa/v3/http"
)

// BuildCreateEnvironmentRequest instantiates a HTTP request object with method
// and path set to call the "environments" service "createEnvironment" endpoint
func (c *Client) BuildCreateEnvironmentRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateEnvironmentEnvironmentsPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("environments", "createEnvironment", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateEnvironmentRequest returns an encoder for requests sent to the
// environments createEnvironment server.
func EncodeCreateEnvironmentRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*environments.CreateEnvironmentPayload)
		if !ok {
			return goahttp.ErrInvalidType("environments", "createEnvironment", "*environments.CreateEnvironmentPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		{
			head := p.ProjectSlug
			req.Header.Set("Gram-Project", head)
		}
		body := NewCreateEnvironmentRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("environments", "createEnvironment", err)
		}
		return nil
	}
}

// DecodeCreateEnvironmentResponse returns a decoder for responses returned by
// the environments createEnvironment endpoint. restoreBody controls whether
// the response body should be restored after having been read.
func DecodeCreateEnvironmentResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CreateEnvironmentResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("environments", "createEnvironment", err)
			}
			err = ValidateCreateEnvironmentResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("environments", "createEnvironment", err)
			}
			res := NewCreateEnvironmentEnvironmentOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("environments", "createEnvironment", resp.StatusCode, string(body))
		}
	}
}

// BuildListEnvironmentsRequest instantiates a HTTP request object with method
// and path set to call the "environments" service "listEnvironments" endpoint
func (c *Client) BuildListEnvironmentsRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListEnvironmentsEnvironmentsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("environments", "listEnvironments", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListEnvironmentsRequest returns an encoder for requests sent to the
// environments listEnvironments server.
func EncodeListEnvironmentsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*environments.ListEnvironmentsPayload)
		if !ok {
			return goahttp.ErrInvalidType("environments", "listEnvironments", "*environments.ListEnvironmentsPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		{
			head := p.ProjectSlug
			req.Header.Set("Gram-Project", head)
		}
		return nil
	}
}

// DecodeListEnvironmentsResponse returns a decoder for responses returned by
// the environments listEnvironments endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeListEnvironmentsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListEnvironmentsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("environments", "listEnvironments", err)
			}
			err = ValidateListEnvironmentsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("environments", "listEnvironments", err)
			}
			res := NewListEnvironmentsResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("environments", "listEnvironments", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateEnvironmentRequest instantiates a HTTP request object with method
// and path set to call the "environments" service "updateEnvironment" endpoint
func (c *Client) BuildUpdateEnvironmentRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*environments.UpdateEnvironmentPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("environments", "updateEnvironment", "*environments.UpdateEnvironmentPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateEnvironmentEnvironmentsPath(id)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("environments", "updateEnvironment", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateEnvironmentRequest returns an encoder for requests sent to the
// environments updateEnvironment server.
func EncodeUpdateEnvironmentRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*environments.UpdateEnvironmentPayload)
		if !ok {
			return goahttp.ErrInvalidType("environments", "updateEnvironment", "*environments.UpdateEnvironmentPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		{
			head := p.ProjectSlug
			req.Header.Set("Gram-Project", head)
		}
		body := NewUpdateEnvironmentRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("environments", "updateEnvironment", err)
		}
		return nil
	}
}

// DecodeUpdateEnvironmentResponse returns a decoder for responses returned by
// the environments updateEnvironment endpoint. restoreBody controls whether
// the response body should be restored after having been read.
func DecodeUpdateEnvironmentResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateEnvironmentResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("environments", "updateEnvironment", err)
			}
			err = ValidateUpdateEnvironmentResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("environments", "updateEnvironment", err)
			}
			res := NewUpdateEnvironmentEnvironmentOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("environments", "updateEnvironment", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteEnvironmentRequest instantiates a HTTP request object with method
// and path set to call the "environments" service "deleteEnvironment" endpoint
func (c *Client) BuildDeleteEnvironmentRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*environments.DeleteEnvironmentPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("environments", "deleteEnvironment", "*environments.DeleteEnvironmentPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteEnvironmentEnvironmentsPath(id)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("environments", "deleteEnvironment", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteEnvironmentRequest returns an encoder for requests sent to the
// environments deleteEnvironment server.
func EncodeDeleteEnvironmentRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*environments.DeleteEnvironmentPayload)
		if !ok {
			return goahttp.ErrInvalidType("environments", "deleteEnvironment", "*environments.DeleteEnvironmentPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		{
			head := p.ProjectSlug
			req.Header.Set("Gram-Project", head)
		}
		return nil
	}
}

// DecodeDeleteEnvironmentResponse returns a decoder for responses returned by
// the environments deleteEnvironment endpoint. restoreBody controls whether
// the response body should be restored after having been read.
func DecodeDeleteEnvironmentResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("environments", "deleteEnvironment", resp.StatusCode, string(body))
		}
	}
}

// marshalEnvironmentsEnvironmentEntryInputToEnvironmentEntryInputRequestBody
// builds a value of type *EnvironmentEntryInputRequestBody from a value of
// type *environments.EnvironmentEntryInput.
func marshalEnvironmentsEnvironmentEntryInputToEnvironmentEntryInputRequestBody(v *environments.EnvironmentEntryInput) *EnvironmentEntryInputRequestBody {
	res := &EnvironmentEntryInputRequestBody{
		Name:  v.Name,
		Value: v.Value,
	}

	return res
}

// marshalEnvironmentEntryInputRequestBodyToEnvironmentsEnvironmentEntryInput
// builds a value of type *environments.EnvironmentEntryInput from a value of
// type *EnvironmentEntryInputRequestBody.
func marshalEnvironmentEntryInputRequestBodyToEnvironmentsEnvironmentEntryInput(v *EnvironmentEntryInputRequestBody) *environments.EnvironmentEntryInput {
	res := &environments.EnvironmentEntryInput{
		Name:  v.Name,
		Value: v.Value,
	}

	return res
}

// unmarshalEnvironmentEntryResponseBodyToEnvironmentsEnvironmentEntry builds a
// value of type *environments.EnvironmentEntry from a value of type
// *EnvironmentEntryResponseBody.
func unmarshalEnvironmentEntryResponseBodyToEnvironmentsEnvironmentEntry(v *EnvironmentEntryResponseBody) *environments.EnvironmentEntry {
	res := &environments.EnvironmentEntry{
		Name:      *v.Name,
		Value:     *v.Value,
		CreatedAt: *v.CreatedAt,
		UpdatedAt: *v.UpdatedAt,
	}

	return res
}

// unmarshalEnvironmentResponseBodyToEnvironmentsEnvironment builds a value of
// type *environments.Environment from a value of type *EnvironmentResponseBody.
func unmarshalEnvironmentResponseBodyToEnvironmentsEnvironment(v *EnvironmentResponseBody) *environments.Environment {
	res := &environments.Environment{
		ID:             *v.ID,
		OrganizationID: *v.OrganizationID,
		ProjectID:      *v.ProjectID,
		Name:           *v.Name,
		Slug:           *v.Slug,
		CreatedAt:      *v.CreatedAt,
		UpdatedAt:      *v.UpdatedAt,
	}
	res.Entries = make([]*environments.EnvironmentEntry, len(v.Entries))
	for i, val := range v.Entries {
		res.Entries[i] = unmarshalEnvironmentEntryResponseBodyToEnvironmentsEnvironmentEntry(val)
	}

	return res
}
