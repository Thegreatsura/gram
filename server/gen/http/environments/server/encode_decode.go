// Code generated by goa v3.20.1, DO NOT EDIT.
//
// environments HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package server

import (
	"context"
	"errors"
	"io"
	"net/http"
	"strings"

	environments "github.com/speakeasy-api/gram/gen/environments"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeCreateEnvironmentResponse returns an encoder for responses returned by
// the environments createEnvironment endpoint.
func EncodeCreateEnvironmentResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*environments.Environment)
		enc := encoder(ctx, w)
		body := NewCreateEnvironmentResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeCreateEnvironmentRequest returns a decoder for requests sent to the
// environments createEnvironment endpoint.
func DecodeCreateEnvironmentRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body CreateEnvironmentRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateEnvironmentRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			sessionToken *string
			projectSlug  *string
		)
		sessionTokenRaw := r.Header.Get("Gram-Session")
		if sessionTokenRaw != "" {
			sessionToken = &sessionTokenRaw
		}
		projectSlugRaw := r.Header.Get("Gram-Project")
		if projectSlugRaw != "" {
			projectSlug = &projectSlugRaw
		}
		payload := NewCreateEnvironmentPayload(&body, sessionToken, projectSlug)
		if payload.SessionToken != nil {
			if strings.Contains(*payload.SessionToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.SessionToken, " ", 2)[1]
				payload.SessionToken = &cred
			}
		}
		if payload.ProjectSlug != nil {
			if strings.Contains(*payload.ProjectSlug, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.ProjectSlug, " ", 2)[1]
				payload.ProjectSlug = &cred
			}
		}

		return payload, nil
	}
}

// EncodeListEnvironmentsResponse returns an encoder for responses returned by
// the environments listEnvironments endpoint.
func EncodeListEnvironmentsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*environments.ListEnvironmentsResult)
		enc := encoder(ctx, w)
		body := NewListEnvironmentsResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListEnvironmentsRequest returns a decoder for requests sent to the
// environments listEnvironments endpoint.
func DecodeListEnvironmentsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			sessionToken *string
			projectSlug  *string
		)
		sessionTokenRaw := r.Header.Get("Gram-Session")
		if sessionTokenRaw != "" {
			sessionToken = &sessionTokenRaw
		}
		projectSlugRaw := r.Header.Get("Gram-Project")
		if projectSlugRaw != "" {
			projectSlug = &projectSlugRaw
		}
		payload := NewListEnvironmentsPayload(sessionToken, projectSlug)
		if payload.SessionToken != nil {
			if strings.Contains(*payload.SessionToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.SessionToken, " ", 2)[1]
				payload.SessionToken = &cred
			}
		}
		if payload.ProjectSlug != nil {
			if strings.Contains(*payload.ProjectSlug, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.ProjectSlug, " ", 2)[1]
				payload.ProjectSlug = &cred
			}
		}

		return payload, nil
	}
}

// EncodeUpdateEnvironmentResponse returns an encoder for responses returned by
// the environments updateEnvironment endpoint.
func EncodeUpdateEnvironmentResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*environments.Environment)
		enc := encoder(ctx, w)
		body := NewUpdateEnvironmentResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUpdateEnvironmentRequest returns a decoder for requests sent to the
// environments updateEnvironment endpoint.
func DecodeUpdateEnvironmentRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body UpdateEnvironmentRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpdateEnvironmentRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			slug         string
			sessionToken *string
			projectSlug  *string

			params = mux.Vars(r)
		)
		slug = params["slug"]
		sessionTokenRaw := r.Header.Get("Gram-Session")
		if sessionTokenRaw != "" {
			sessionToken = &sessionTokenRaw
		}
		projectSlugRaw := r.Header.Get("Gram-Project")
		if projectSlugRaw != "" {
			projectSlug = &projectSlugRaw
		}
		payload := NewUpdateEnvironmentPayload(&body, slug, sessionToken, projectSlug)
		if payload.SessionToken != nil {
			if strings.Contains(*payload.SessionToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.SessionToken, " ", 2)[1]
				payload.SessionToken = &cred
			}
		}
		if payload.ProjectSlug != nil {
			if strings.Contains(*payload.ProjectSlug, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.ProjectSlug, " ", 2)[1]
				payload.ProjectSlug = &cred
			}
		}

		return payload, nil
	}
}

// EncodeDeleteEnvironmentResponse returns an encoder for responses returned by
// the environments deleteEnvironment endpoint.
func EncodeDeleteEnvironmentResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeDeleteEnvironmentRequest returns a decoder for requests sent to the
// environments deleteEnvironment endpoint.
func DecodeDeleteEnvironmentRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			slug         string
			sessionToken *string
			projectSlug  *string

			params = mux.Vars(r)
		)
		slug = params["slug"]
		sessionTokenRaw := r.Header.Get("Gram-Session")
		if sessionTokenRaw != "" {
			sessionToken = &sessionTokenRaw
		}
		projectSlugRaw := r.Header.Get("Gram-Project")
		if projectSlugRaw != "" {
			projectSlug = &projectSlugRaw
		}
		payload := NewDeleteEnvironmentPayload(slug, sessionToken, projectSlug)
		if payload.SessionToken != nil {
			if strings.Contains(*payload.SessionToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.SessionToken, " ", 2)[1]
				payload.SessionToken = &cred
			}
		}
		if payload.ProjectSlug != nil {
			if strings.Contains(*payload.ProjectSlug, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.ProjectSlug, " ", 2)[1]
				payload.ProjectSlug = &cred
			}
		}

		return payload, nil
	}
}

// unmarshalEnvironmentEntryInputRequestBodyToEnvironmentsEnvironmentEntryInput
// builds a value of type *environments.EnvironmentEntryInput from a value of
// type *EnvironmentEntryInputRequestBody.
func unmarshalEnvironmentEntryInputRequestBodyToEnvironmentsEnvironmentEntryInput(v *EnvironmentEntryInputRequestBody) *environments.EnvironmentEntryInput {
	res := &environments.EnvironmentEntryInput{
		Name:  *v.Name,
		Value: *v.Value,
	}

	return res
}

// marshalEnvironmentsEnvironmentEntryToEnvironmentEntryResponseBody builds a
// value of type *EnvironmentEntryResponseBody from a value of type
// *environments.EnvironmentEntry.
func marshalEnvironmentsEnvironmentEntryToEnvironmentEntryResponseBody(v *environments.EnvironmentEntry) *EnvironmentEntryResponseBody {
	res := &EnvironmentEntryResponseBody{
		Name:      v.Name,
		Value:     v.Value,
		CreatedAt: v.CreatedAt,
		UpdatedAt: v.UpdatedAt,
	}

	return res
}

// marshalEnvironmentsEnvironmentToEnvironmentResponseBody builds a value of
// type *EnvironmentResponseBody from a value of type *environments.Environment.
func marshalEnvironmentsEnvironmentToEnvironmentResponseBody(v *environments.Environment) *EnvironmentResponseBody {
	res := &EnvironmentResponseBody{
		ID:             v.ID,
		OrganizationID: v.OrganizationID,
		ProjectID:      v.ProjectID,
		Name:           v.Name,
		Slug:           v.Slug,
		Description:    v.Description,
		CreatedAt:      v.CreatedAt,
		UpdatedAt:      v.UpdatedAt,
	}
	if v.Entries != nil {
		res.Entries = make([]*EnvironmentEntryResponseBody, len(v.Entries))
		for i, val := range v.Entries {
			res.Entries[i] = marshalEnvironmentsEnvironmentEntryToEnvironmentEntryResponseBody(val)
		}
	} else {
		res.Entries = []*EnvironmentEntryResponseBody{}
	}

	return res
}
