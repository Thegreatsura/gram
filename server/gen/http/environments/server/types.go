// Code generated by goa v3.20.1, DO NOT EDIT.
//
// environments HTTP server types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package server

import (
	environments "github.com/speakeasy-api/gram/gen/environments"
	goa "goa.design/goa/v3/pkg"
)

// CreateEnvironmentRequestBody is the type of the "environments" service
// "createEnvironment" endpoint HTTP request body.
type CreateEnvironmentRequestBody struct {
	// The organization ID this environment belongs to
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// The name of the environment
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Optional description of the environment
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// List of environment variable entries
	Entries []*EnvironmentEntryInputRequestBody `form:"entries,omitempty" json:"entries,omitempty" xml:"entries,omitempty"`
}

// UpdateEnvironmentRequestBody is the type of the "environments" service
// "updateEnvironment" endpoint HTTP request body.
type UpdateEnvironmentRequestBody struct {
	// The description of the environment
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The name of the environment
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// List of environment entries to update or create
	EntriesToUpdate []*EnvironmentEntryInputRequestBody `form:"entries_to_update,omitempty" json:"entries_to_update,omitempty" xml:"entries_to_update,omitempty"`
	// List of environment entry names to remove
	EntriesToRemove []string `form:"entries_to_remove,omitempty" json:"entries_to_remove,omitempty" xml:"entries_to_remove,omitempty"`
}

// CreateEnvironmentResponseBody is the type of the "environments" service
// "createEnvironment" endpoint HTTP response body.
type CreateEnvironmentResponseBody struct {
	// The ID of the environment
	ID string `form:"id" json:"id" xml:"id"`
	// The organization ID this environment belongs to
	OrganizationID string `form:"organization_id" json:"organization_id" xml:"organization_id"`
	// The project ID this environment belongs to
	ProjectID string `form:"project_id" json:"project_id" xml:"project_id"`
	// The name of the environment
	Name string `form:"name" json:"name" xml:"name"`
	// The slug identifier for the environment
	Slug string `form:"slug" json:"slug" xml:"slug"`
	// The description of the environment
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// List of environment entries
	Entries []*EnvironmentEntryResponseBody `form:"entries" json:"entries" xml:"entries"`
	// The creation date of the environment
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// When the environment was last updated
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// ListEnvironmentsResponseBody is the type of the "environments" service
// "listEnvironments" endpoint HTTP response body.
type ListEnvironmentsResponseBody struct {
	Environments []*EnvironmentResponseBody `form:"environments" json:"environments" xml:"environments"`
}

// UpdateEnvironmentResponseBody is the type of the "environments" service
// "updateEnvironment" endpoint HTTP response body.
type UpdateEnvironmentResponseBody struct {
	// The ID of the environment
	ID string `form:"id" json:"id" xml:"id"`
	// The organization ID this environment belongs to
	OrganizationID string `form:"organization_id" json:"organization_id" xml:"organization_id"`
	// The project ID this environment belongs to
	ProjectID string `form:"project_id" json:"project_id" xml:"project_id"`
	// The name of the environment
	Name string `form:"name" json:"name" xml:"name"`
	// The slug identifier for the environment
	Slug string `form:"slug" json:"slug" xml:"slug"`
	// The description of the environment
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// List of environment entries
	Entries []*EnvironmentEntryResponseBody `form:"entries" json:"entries" xml:"entries"`
	// The creation date of the environment
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// When the environment was last updated
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// EnvironmentEntryResponseBody is used to define fields on response body types.
type EnvironmentEntryResponseBody struct {
	// The name of the environment variable
	Name string `form:"name" json:"name" xml:"name"`
	// Redacted values of the environment variable
	Value string `form:"value" json:"value" xml:"value"`
	// The creation date of the environment entry
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// When the environment entry was last updated
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// EnvironmentResponseBody is used to define fields on response body types.
type EnvironmentResponseBody struct {
	// The ID of the environment
	ID string `form:"id" json:"id" xml:"id"`
	// The organization ID this environment belongs to
	OrganizationID string `form:"organization_id" json:"organization_id" xml:"organization_id"`
	// The project ID this environment belongs to
	ProjectID string `form:"project_id" json:"project_id" xml:"project_id"`
	// The name of the environment
	Name string `form:"name" json:"name" xml:"name"`
	// The slug identifier for the environment
	Slug string `form:"slug" json:"slug" xml:"slug"`
	// The description of the environment
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// List of environment entries
	Entries []*EnvironmentEntryResponseBody `form:"entries" json:"entries" xml:"entries"`
	// The creation date of the environment
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// When the environment was last updated
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// EnvironmentEntryInputRequestBody is used to define fields on request body
// types.
type EnvironmentEntryInputRequestBody struct {
	// The name of the environment variable
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The value of the environment variable
	Value *string `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
}

// NewCreateEnvironmentResponseBody builds the HTTP response body from the
// result of the "createEnvironment" endpoint of the "environments" service.
func NewCreateEnvironmentResponseBody(res *environments.Environment) *CreateEnvironmentResponseBody {
	body := &CreateEnvironmentResponseBody{
		ID:             res.ID,
		OrganizationID: res.OrganizationID,
		ProjectID:      res.ProjectID,
		Name:           res.Name,
		Slug:           res.Slug,
		Description:    res.Description,
		CreatedAt:      res.CreatedAt,
		UpdatedAt:      res.UpdatedAt,
	}
	if res.Entries != nil {
		body.Entries = make([]*EnvironmentEntryResponseBody, len(res.Entries))
		for i, val := range res.Entries {
			body.Entries[i] = marshalEnvironmentsEnvironmentEntryToEnvironmentEntryResponseBody(val)
		}
	} else {
		body.Entries = []*EnvironmentEntryResponseBody{}
	}
	return body
}

// NewListEnvironmentsResponseBody builds the HTTP response body from the
// result of the "listEnvironments" endpoint of the "environments" service.
func NewListEnvironmentsResponseBody(res *environments.ListEnvironmentsResult) *ListEnvironmentsResponseBody {
	body := &ListEnvironmentsResponseBody{}
	if res.Environments != nil {
		body.Environments = make([]*EnvironmentResponseBody, len(res.Environments))
		for i, val := range res.Environments {
			body.Environments[i] = marshalEnvironmentsEnvironmentToEnvironmentResponseBody(val)
		}
	} else {
		body.Environments = []*EnvironmentResponseBody{}
	}
	return body
}

// NewUpdateEnvironmentResponseBody builds the HTTP response body from the
// result of the "updateEnvironment" endpoint of the "environments" service.
func NewUpdateEnvironmentResponseBody(res *environments.Environment) *UpdateEnvironmentResponseBody {
	body := &UpdateEnvironmentResponseBody{
		ID:             res.ID,
		OrganizationID: res.OrganizationID,
		ProjectID:      res.ProjectID,
		Name:           res.Name,
		Slug:           res.Slug,
		Description:    res.Description,
		CreatedAt:      res.CreatedAt,
		UpdatedAt:      res.UpdatedAt,
	}
	if res.Entries != nil {
		body.Entries = make([]*EnvironmentEntryResponseBody, len(res.Entries))
		for i, val := range res.Entries {
			body.Entries[i] = marshalEnvironmentsEnvironmentEntryToEnvironmentEntryResponseBody(val)
		}
	} else {
		body.Entries = []*EnvironmentEntryResponseBody{}
	}
	return body
}

// NewCreateEnvironmentPayload builds a environments service createEnvironment
// endpoint payload.
func NewCreateEnvironmentPayload(body *CreateEnvironmentRequestBody, sessionToken *string, projectSlugInput *string) *environments.CreateEnvironmentPayload {
	v := &environments.CreateEnvironmentPayload{
		OrganizationID: *body.OrganizationID,
		Name:           *body.Name,
		Description:    body.Description,
	}
	v.Entries = make([]*environments.EnvironmentEntryInput, len(body.Entries))
	for i, val := range body.Entries {
		v.Entries[i] = unmarshalEnvironmentEntryInputRequestBodyToEnvironmentsEnvironmentEntryInput(val)
	}
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// NewListEnvironmentsPayload builds a environments service listEnvironments
// endpoint payload.
func NewListEnvironmentsPayload(sessionToken *string, projectSlugInput *string) *environments.ListEnvironmentsPayload {
	v := &environments.ListEnvironmentsPayload{}
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// NewUpdateEnvironmentPayload builds a environments service updateEnvironment
// endpoint payload.
func NewUpdateEnvironmentPayload(body *UpdateEnvironmentRequestBody, slug string, sessionToken *string, projectSlugInput *string) *environments.UpdateEnvironmentPayload {
	v := &environments.UpdateEnvironmentPayload{
		Description: body.Description,
		Name:        body.Name,
	}
	v.EntriesToUpdate = make([]*environments.EnvironmentEntryInput, len(body.EntriesToUpdate))
	for i, val := range body.EntriesToUpdate {
		v.EntriesToUpdate[i] = unmarshalEnvironmentEntryInputRequestBodyToEnvironmentsEnvironmentEntryInput(val)
	}
	v.EntriesToRemove = make([]string, len(body.EntriesToRemove))
	for i, val := range body.EntriesToRemove {
		v.EntriesToRemove[i] = val
	}
	v.Slug = slug
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// NewDeleteEnvironmentPayload builds a environments service deleteEnvironment
// endpoint payload.
func NewDeleteEnvironmentPayload(slug string, sessionToken *string, projectSlugInput *string) *environments.DeleteEnvironmentPayload {
	v := &environments.DeleteEnvironmentPayload{}
	v.Slug = slug
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// ValidateCreateEnvironmentRequestBody runs the validations defined on
// CreateEnvironmentRequestBody
func ValidateCreateEnvironmentRequestBody(body *CreateEnvironmentRequestBody) (err error) {
	if body.OrganizationID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("organization_id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Entries == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("entries", "body"))
	}
	for _, e := range body.Entries {
		if e != nil {
			if err2 := ValidateEnvironmentEntryInputRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateUpdateEnvironmentRequestBody runs the validations defined on
// UpdateEnvironmentRequestBody
func ValidateUpdateEnvironmentRequestBody(body *UpdateEnvironmentRequestBody) (err error) {
	if body.EntriesToUpdate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("entries_to_update", "body"))
	}
	if body.EntriesToRemove == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("entries_to_remove", "body"))
	}
	for _, e := range body.EntriesToUpdate {
		if e != nil {
			if err2 := ValidateEnvironmentEntryInputRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateEnvironmentEntryInputRequestBody runs the validations defined on
// EnvironmentEntryInputRequestBody
func ValidateEnvironmentEntryInputRequestBody(body *EnvironmentEntryInputRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Value == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("value", "body"))
	}
	return
}
