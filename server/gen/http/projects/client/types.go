// Code generated by goa v3.20.1, DO NOT EDIT.
//
// projects HTTP client types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package client

import (
	"unicode/utf8"

	projects "github.com/speakeasy-api/gram/gen/projects"
	goa "goa.design/goa/v3/pkg"
)

// CreateProjectRequestBody is the type of the "projects" service
// "createProject" endpoint HTTP request body.
type CreateProjectRequestBody struct {
	// The ID of the organization to create the project in
	OrganizationID string `form:"organization_id" json:"organization_id" xml:"organization_id"`
	// The name of the project
	Name string `form:"name" json:"name" xml:"name"`
	// The slug of the project
	Slug string `form:"slug" json:"slug" xml:"slug"`
}

// CreateProjectResponseBody is the type of the "projects" service
// "createProject" endpoint HTTP response body.
type CreateProjectResponseBody struct {
	// The created project
	Project *ProjectResponseBody `form:"project,omitempty" json:"project,omitempty" xml:"project,omitempty"`
}

// ListProjectsResponseBody is the type of the "projects" service
// "listProjects" endpoint HTTP response body.
type ListProjectsResponseBody struct {
	// The list of projects
	Projects []*ProjectEntryResponseBody `form:"projects,omitempty" json:"projects,omitempty" xml:"projects,omitempty"`
}

// ProjectResponseBody is used to define fields on response body types.
type ProjectResponseBody struct {
	// The ID of the project
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The name of the project
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The slug of the project
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	// The ID of the organization that owns the project
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// The creation date of the project.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The last update date of the project.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// ProjectEntryResponseBody is used to define fields on response body types.
type ProjectEntryResponseBody struct {
	// The ID of the project
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The name of the project
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The slug of the project
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
}

// NewCreateProjectRequestBody builds the HTTP request body from the payload of
// the "createProject" endpoint of the "projects" service.
func NewCreateProjectRequestBody(p *projects.CreateProjectPayload) *CreateProjectRequestBody {
	body := &CreateProjectRequestBody{
		OrganizationID: p.OrganizationID,
		Name:           p.Name,
		Slug:           string(p.Slug),
	}
	return body
}

// NewCreateProjectResultOK builds a "projects" service "createProject"
// endpoint result from a HTTP "OK" response.
func NewCreateProjectResultOK(body *CreateProjectResponseBody) *projects.CreateProjectResult {
	v := &projects.CreateProjectResult{}
	v.Project = unmarshalProjectResponseBodyToProjectsProject(body.Project)

	return v
}

// NewListProjectsResultOK builds a "projects" service "listProjects" endpoint
// result from a HTTP "OK" response.
func NewListProjectsResultOK(body *ListProjectsResponseBody) *projects.ListProjectsResult {
	v := &projects.ListProjectsResult{}
	v.Projects = make([]*projects.ProjectEntry, len(body.Projects))
	for i, val := range body.Projects {
		v.Projects[i] = unmarshalProjectEntryResponseBodyToProjectsProjectEntry(val)
	}

	return v
}

// ValidateCreateProjectResponseBody runs the validations defined on
// CreateProjectResponseBody
func ValidateCreateProjectResponseBody(body *CreateProjectResponseBody) (err error) {
	if body.Project == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("project", "body"))
	}
	if body.Project != nil {
		if err2 := ValidateProjectResponseBody(body.Project); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateListProjectsResponseBody runs the validations defined on
// ListProjectsResponseBody
func ValidateListProjectsResponseBody(body *ListProjectsResponseBody) (err error) {
	if body.Projects == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("projects", "body"))
	}
	for _, e := range body.Projects {
		if e != nil {
			if err2 := ValidateProjectEntryResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateProjectResponseBody runs the validations defined on
// ProjectResponseBody
func ValidateProjectResponseBody(body *ProjectResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slug", "body"))
	}
	if body.OrganizationID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("organization_id", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	if body.Slug != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.slug", *body.Slug, "^[a-z]+(?:[a-z0-9_-]*[a-z0-9])?$"))
	}
	if body.Slug != nil {
		if utf8.RuneCountInString(*body.Slug) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.slug", *body.Slug, utf8.RuneCountInString(*body.Slug), 40, false))
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateProjectEntryResponseBody runs the validations defined on
// ProjectEntryResponseBody
func ValidateProjectEntryResponseBody(body *ProjectEntryResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slug", "body"))
	}
	if body.Slug != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.slug", *body.Slug, "^[a-z]+(?:[a-z0-9_-]*[a-z0-9])?$"))
	}
	if body.Slug != nil {
		if utf8.RuneCountInString(*body.Slug) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.slug", *body.Slug, utf8.RuneCountInString(*body.Slug), 40, false))
		}
	}
	return
}
