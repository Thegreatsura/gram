// Code generated by goa v3.20.1, DO NOT EDIT.
//
// projects HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	projects "github.com/speakeasy-api/gram/gen/projects"
	goahttp "goa.design/goa/v3/http"
)

// BuildCreateProjectRequest instantiates a HTTP request object with method and
// path set to call the "projects" service "createProject" endpoint
func (c *Client) BuildCreateProjectRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateProjectProjectsPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("projects", "createProject", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateProjectRequest returns an encoder for requests sent to the
// projects createProject server.
func EncodeCreateProjectRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*projects.CreateProjectPayload)
		if !ok {
			return goahttp.ErrInvalidType("projects", "createProject", "*projects.CreateProjectPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		body := NewCreateProjectRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("projects", "createProject", err)
		}
		return nil
	}
}

// DecodeCreateProjectResponse returns a decoder for responses returned by the
// projects createProject endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeCreateProjectResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CreateProjectResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("projects", "createProject", err)
			}
			err = ValidateCreateProjectResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("projects", "createProject", err)
			}
			res := NewCreateProjectResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("projects", "createProject", resp.StatusCode, string(body))
		}
	}
}

// BuildListProjectsRequest instantiates a HTTP request object with method and
// path set to call the "projects" service "listProjects" endpoint
func (c *Client) BuildListProjectsRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListProjectsProjectsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("projects", "listProjects", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListProjectsRequest returns an encoder for requests sent to the
// projects listProjects server.
func EncodeListProjectsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*projects.ListProjectsPayload)
		if !ok {
			return goahttp.ErrInvalidType("projects", "listProjects", "*projects.ListProjectsPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		values := req.URL.Query()
		values.Add("organization_id", p.OrganizationID)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeListProjectsResponse returns a decoder for responses returned by the
// projects listProjects endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeListProjectsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListProjectsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("projects", "listProjects", err)
			}
			err = ValidateListProjectsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("projects", "listProjects", err)
			}
			res := NewListProjectsResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("projects", "listProjects", resp.StatusCode, string(body))
		}
	}
}

// unmarshalProjectResponseBodyToProjectsProject builds a value of type
// *projects.Project from a value of type *ProjectResponseBody.
func unmarshalProjectResponseBodyToProjectsProject(v *ProjectResponseBody) *projects.Project {
	res := &projects.Project{
		ID:             *v.ID,
		Name:           *v.Name,
		Slug:           projects.Slug(*v.Slug),
		OrganizationID: *v.OrganizationID,
		CreatedAt:      *v.CreatedAt,
		UpdatedAt:      *v.UpdatedAt,
	}

	return res
}

// unmarshalProjectEntryResponseBodyToProjectsProjectEntry builds a value of
// type *projects.ProjectEntry from a value of type *ProjectEntryResponseBody.
func unmarshalProjectEntryResponseBodyToProjectsProjectEntry(v *ProjectEntryResponseBody) *projects.ProjectEntry {
	res := &projects.ProjectEntry{
		ID:   *v.ID,
		Name: *v.Name,
		Slug: projects.Slug(*v.Slug),
	}

	return res
}
