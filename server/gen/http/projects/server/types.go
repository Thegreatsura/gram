// Code generated by goa v3.20.1, DO NOT EDIT.
//
// projects HTTP server types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package server

import (
	"unicode/utf8"

	projects "github.com/speakeasy-api/gram/gen/projects"
	goa "goa.design/goa/v3/pkg"
)

// CreateProjectRequestBody is the type of the "projects" service
// "createProject" endpoint HTTP request body.
type CreateProjectRequestBody struct {
	// The ID of the organization to create the project in
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// The name of the project
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// CreateProjectResponseBody is the type of the "projects" service
// "createProject" endpoint HTTP response body.
type CreateProjectResponseBody struct {
	// The created project
	Project *ProjectResponseBody `form:"project" json:"project" xml:"project"`
}

// ListProjectsResponseBody is the type of the "projects" service
// "listProjects" endpoint HTTP response body.
type ListProjectsResponseBody struct {
	// The list of projects
	Projects []*ProjectEntryResponseBody `form:"projects" json:"projects" xml:"projects"`
}

// ProjectResponseBody is used to define fields on response body types.
type ProjectResponseBody struct {
	// The ID of the project
	ID string `form:"id" json:"id" xml:"id"`
	// The name of the project
	Name string `form:"name" json:"name" xml:"name"`
	// The slug of the project
	Slug string `form:"slug" json:"slug" xml:"slug"`
	// The ID of the organization that owns the project
	OrganizationID string `form:"organization_id" json:"organization_id" xml:"organization_id"`
	// The creation date of the project.
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// The last update date of the project.
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// ProjectEntryResponseBody is used to define fields on response body types.
type ProjectEntryResponseBody struct {
	// The ID of the project
	ID string `form:"id" json:"id" xml:"id"`
	// The name of the project
	Name string `form:"name" json:"name" xml:"name"`
	// The slug of the project
	Slug string `form:"slug" json:"slug" xml:"slug"`
}

// NewCreateProjectResponseBody builds the HTTP response body from the result
// of the "createProject" endpoint of the "projects" service.
func NewCreateProjectResponseBody(res *projects.CreateProjectResult) *CreateProjectResponseBody {
	body := &CreateProjectResponseBody{}
	if res.Project != nil {
		body.Project = marshalProjectsProjectToProjectResponseBody(res.Project)
	}
	return body
}

// NewListProjectsResponseBody builds the HTTP response body from the result of
// the "listProjects" endpoint of the "projects" service.
func NewListProjectsResponseBody(res *projects.ListProjectsResult) *ListProjectsResponseBody {
	body := &ListProjectsResponseBody{}
	if res.Projects != nil {
		body.Projects = make([]*ProjectEntryResponseBody, len(res.Projects))
		for i, val := range res.Projects {
			body.Projects[i] = marshalProjectsProjectEntryToProjectEntryResponseBody(val)
		}
	} else {
		body.Projects = []*ProjectEntryResponseBody{}
	}
	return body
}

// NewCreateProjectPayload builds a projects service createProject endpoint
// payload.
func NewCreateProjectPayload(body *CreateProjectRequestBody, sessionToken *string) *projects.CreateProjectPayload {
	v := &projects.CreateProjectPayload{
		OrganizationID: *body.OrganizationID,
		Name:           *body.Name,
	}
	v.SessionToken = sessionToken

	return v
}

// NewListProjectsPayload builds a projects service listProjects endpoint
// payload.
func NewListProjectsPayload(organizationID string, sessionToken *string) *projects.ListProjectsPayload {
	v := &projects.ListProjectsPayload{}
	v.OrganizationID = organizationID
	v.SessionToken = sessionToken

	return v
}

// ValidateCreateProjectRequestBody runs the validations defined on
// CreateProjectRequestBody
func ValidateCreateProjectRequestBody(body *CreateProjectRequestBody) (err error) {
	if body.OrganizationID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("organization_id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 40, false))
		}
	}
	return
}
