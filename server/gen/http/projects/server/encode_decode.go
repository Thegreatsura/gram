// Code generated by goa v3.20.1, DO NOT EDIT.
//
// projects HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package server

import (
	"context"
	"errors"
	"io"
	"net/http"
	"strings"

	projects "github.com/speakeasy-api/gram/gen/projects"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeCreateProjectResponse returns an encoder for responses returned by the
// projects createProject endpoint.
func EncodeCreateProjectResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*projects.CreateProjectResult)
		enc := encoder(ctx, w)
		body := NewCreateProjectResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeCreateProjectRequest returns a decoder for requests sent to the
// projects createProject endpoint.
func DecodeCreateProjectRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body CreateProjectRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateProjectRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			sessionToken *string
		)
		sessionTokenRaw := r.Header.Get("Gram-Session")
		if sessionTokenRaw != "" {
			sessionToken = &sessionTokenRaw
		}
		payload := NewCreateProjectPayload(&body, sessionToken)
		if payload.SessionToken != nil {
			if strings.Contains(*payload.SessionToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.SessionToken, " ", 2)[1]
				payload.SessionToken = &cred
			}
		}

		return payload, nil
	}
}

// EncodeListProjectsResponse returns an encoder for responses returned by the
// projects listProjects endpoint.
func EncodeListProjectsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*projects.ListProjectsResult)
		enc := encoder(ctx, w)
		body := NewListProjectsResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListProjectsRequest returns a decoder for requests sent to the
// projects listProjects endpoint.
func DecodeListProjectsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			organizationID string
			sessionToken   *string
			err            error
		)
		organizationID = r.URL.Query().Get("organization_id")
		if organizationID == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("organization_id", "query string"))
		}
		sessionTokenRaw := r.Header.Get("Gram-Session")
		if sessionTokenRaw != "" {
			sessionToken = &sessionTokenRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewListProjectsPayload(organizationID, sessionToken)
		if payload.SessionToken != nil {
			if strings.Contains(*payload.SessionToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.SessionToken, " ", 2)[1]
				payload.SessionToken = &cred
			}
		}

		return payload, nil
	}
}

// marshalProjectsProjectToProjectResponseBody builds a value of type
// *ProjectResponseBody from a value of type *projects.Project.
func marshalProjectsProjectToProjectResponseBody(v *projects.Project) *ProjectResponseBody {
	res := &ProjectResponseBody{
		ID:             v.ID,
		Name:           v.Name,
		Slug:           string(v.Slug),
		OrganizationID: v.OrganizationID,
		CreatedAt:      v.CreatedAt,
		UpdatedAt:      v.UpdatedAt,
	}

	return res
}

// marshalProjectsProjectEntryToProjectEntryResponseBody builds a value of type
// *ProjectEntryResponseBody from a value of type *projects.ProjectEntry.
func marshalProjectsProjectEntryToProjectEntryResponseBody(v *projects.ProjectEntry) *ProjectEntryResponseBody {
	res := &ProjectEntryResponseBody{
		ID:   v.ID,
		Name: v.Name,
		Slug: string(v.Slug),
	}

	return res
}
