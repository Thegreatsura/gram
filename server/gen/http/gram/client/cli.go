// Code generated by goa v3.20.0, DO NOT EDIT.
//
// gram HTTP client CLI support package
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package client

import (
	"encoding/json"
	"fmt"

	gram "github.com/speakeasy-api/gram/gen/gram"
)

// BuildCreateDeploymentPayload builds the payload for the gram
// createDeployment endpoint from CLI flags.
func BuildCreateDeploymentPayload(gramCreateDeploymentBody string) (*gram.DeploymentCreateForm, error) {
	var err error
	var body CreateDeploymentRequestBody
	{
		err = json.Unmarshal([]byte(gramCreateDeploymentBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"external_id\": \"bc5f4a555e933e6861d12edba4c2d87ef6caf8e6\",\n      \"external_url\": \"https://github.com/golang/go/commit/bc5f4a555e933e6861d12edba4c2d87ef6caf8e6\"\n   }'")
		}
	}
	v := &gram.DeploymentCreateForm{
		ExternalID:  body.ExternalID,
		ExternalURL: body.ExternalURL,
	}
	if body.Openapi3p1Tools != nil {
		v.Openapi3p1Tools = make([]*gram.OpenAPI3P1ToolForm, len(body.Openapi3p1Tools))
		for i, val := range body.Openapi3p1Tools {
			v.Openapi3p1Tools[i] = marshalOpenAPI3P1ToolFormRequestBodyToGramOpenAPI3P1ToolForm(val)
		}
	}

	return v, nil
}
