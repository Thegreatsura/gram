// Code generated by goa v3.20.0, DO NOT EDIT.
//
// gram HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	gram "github.com/speakeasy-api/gram/gen/gram"
	goahttp "goa.design/goa/v3/http"
)

// BuildCreateDeploymentRequest instantiates a HTTP request object with method
// and path set to call the "gram" service "createDeployment" endpoint
func (c *Client) BuildCreateDeploymentRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateDeploymentGramPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("gram", "createDeployment", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateDeploymentRequest returns an encoder for requests sent to the
// gram createDeployment server.
func EncodeCreateDeploymentRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*gram.DeploymentCreateForm)
		if !ok {
			return goahttp.ErrInvalidType("gram", "createDeployment", "*gram.DeploymentCreateForm", v)
		}
		body := NewCreateDeploymentRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("gram", "createDeployment", err)
		}
		return nil
	}
}

// DecodeCreateDeploymentResponse returns a decoder for responses returned by
// the gram createDeployment endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeCreateDeploymentResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CreateDeploymentResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("gram", "createDeployment", err)
			}
			res := NewCreateDeploymentDeploymentCreateResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("gram", "createDeployment", resp.StatusCode, string(body))
		}
	}
}

// marshalGramOpenAPI3P1ToolFormToOpenAPI3P1ToolFormRequestBody builds a value
// of type *OpenAPI3P1ToolFormRequestBody from a value of type
// *gram.OpenAPI3P1ToolForm.
func marshalGramOpenAPI3P1ToolFormToOpenAPI3P1ToolFormRequestBody(v *gram.OpenAPI3P1ToolForm) *OpenAPI3P1ToolFormRequestBody {
	if v == nil {
		return nil
	}
	res := &OpenAPI3P1ToolFormRequestBody{
		Kind:        v.Kind,
		Name:        v.Name,
		Description: v.Description,
		Path:        v.Path,
		Method:      v.Method,
		Body:        string(v.Body),
	}
	if v.Tags != nil {
		res.Tags = make([]string, len(v.Tags))
		for i, val := range v.Tags {
			res.Tags[i] = val
		}
	}
	if v.Tags == nil {
		res.Tags = []string{}
	}
	if v.PathParameters != nil {
		res.PathParameters = make(map[string]*OpenAPI3P1ParameterSchemaRequestBody, len(v.PathParameters))
		for key, val := range v.PathParameters {
			tk := key
			if val == nil {
				res.PathParameters[tk] = nil
				continue
			}
			res.PathParameters[tk] = marshalGramOpenAPI3P1ParameterSchemaToOpenAPI3P1ParameterSchemaRequestBody(val)
		}
	}
	if v.HeaderParameters != nil {
		res.HeaderParameters = make(map[string]*OpenAPI3P1ParameterSchemaRequestBody, len(v.HeaderParameters))
		for key, val := range v.HeaderParameters {
			tk := key
			if val == nil {
				res.HeaderParameters[tk] = nil
				continue
			}
			res.HeaderParameters[tk] = marshalGramOpenAPI3P1ParameterSchemaToOpenAPI3P1ParameterSchemaRequestBody(val)
		}
	}
	if v.QueryParameters != nil {
		res.QueryParameters = make(map[string]*OpenAPI3P1ParameterSchemaRequestBody, len(v.QueryParameters))
		for key, val := range v.QueryParameters {
			tk := key
			if val == nil {
				res.QueryParameters[tk] = nil
				continue
			}
			res.QueryParameters[tk] = marshalGramOpenAPI3P1ParameterSchemaToOpenAPI3P1ParameterSchemaRequestBody(val)
		}
	}

	return res
}

// marshalGramOpenAPI3P1ParameterSchemaToOpenAPI3P1ParameterSchemaRequestBody
// builds a value of type *OpenAPI3P1ParameterSchemaRequestBody from a value of
// type *gram.OpenAPI3P1ParameterSchema.
func marshalGramOpenAPI3P1ParameterSchemaToOpenAPI3P1ParameterSchemaRequestBody(v *gram.OpenAPI3P1ParameterSchema) *OpenAPI3P1ParameterSchemaRequestBody {
	res := &OpenAPI3P1ParameterSchemaRequestBody{
		Name:          v.Name,
		Description:   v.Description,
		In:            v.In,
		Required:      v.Required,
		Style:         v.Style,
		Explode:       v.Explode,
		AllowReserved: v.AllowReserved,
		Deprecated:    v.Deprecated,
		Example:       v.Example,
	}
	if v.Schema != nil {
		schema := string(*v.Schema)
		res.Schema = &schema
	}
	{
		var zero bool
		if res.Deprecated == zero {
			res.Deprecated = false
		}
	}
	if v.Examples != nil {
		res.Examples = make(map[string]any, len(v.Examples))
		for key, val := range v.Examples {
			tk := key
			tv := val
			res.Examples[tk] = tv
		}
	}

	return res
}

// marshalOpenAPI3P1ToolFormRequestBodyToGramOpenAPI3P1ToolForm builds a value
// of type *gram.OpenAPI3P1ToolForm from a value of type
// *OpenAPI3P1ToolFormRequestBody.
func marshalOpenAPI3P1ToolFormRequestBodyToGramOpenAPI3P1ToolForm(v *OpenAPI3P1ToolFormRequestBody) *gram.OpenAPI3P1ToolForm {
	if v == nil {
		return nil
	}
	res := &gram.OpenAPI3P1ToolForm{
		Kind:        v.Kind,
		Name:        v.Name,
		Description: v.Description,
		Path:        v.Path,
		Method:      v.Method,
		Body:        gram.JSONSchema(v.Body),
	}
	if v.Tags != nil {
		res.Tags = make([]string, len(v.Tags))
		for i, val := range v.Tags {
			res.Tags[i] = val
		}
	}
	if v.Tags == nil {
		res.Tags = []string{}
	}
	if v.PathParameters != nil {
		res.PathParameters = make(map[string]*gram.OpenAPI3P1ParameterSchema, len(v.PathParameters))
		for key, val := range v.PathParameters {
			tk := key
			if val == nil {
				res.PathParameters[tk] = nil
				continue
			}
			res.PathParameters[tk] = marshalOpenAPI3P1ParameterSchemaRequestBodyToGramOpenAPI3P1ParameterSchema(val)
		}
	}
	if v.HeaderParameters != nil {
		res.HeaderParameters = make(map[string]*gram.OpenAPI3P1ParameterSchema, len(v.HeaderParameters))
		for key, val := range v.HeaderParameters {
			tk := key
			if val == nil {
				res.HeaderParameters[tk] = nil
				continue
			}
			res.HeaderParameters[tk] = marshalOpenAPI3P1ParameterSchemaRequestBodyToGramOpenAPI3P1ParameterSchema(val)
		}
	}
	if v.QueryParameters != nil {
		res.QueryParameters = make(map[string]*gram.OpenAPI3P1ParameterSchema, len(v.QueryParameters))
		for key, val := range v.QueryParameters {
			tk := key
			if val == nil {
				res.QueryParameters[tk] = nil
				continue
			}
			res.QueryParameters[tk] = marshalOpenAPI3P1ParameterSchemaRequestBodyToGramOpenAPI3P1ParameterSchema(val)
		}
	}

	return res
}

// marshalOpenAPI3P1ParameterSchemaRequestBodyToGramOpenAPI3P1ParameterSchema
// builds a value of type *gram.OpenAPI3P1ParameterSchema from a value of type
// *OpenAPI3P1ParameterSchemaRequestBody.
func marshalOpenAPI3P1ParameterSchemaRequestBodyToGramOpenAPI3P1ParameterSchema(v *OpenAPI3P1ParameterSchemaRequestBody) *gram.OpenAPI3P1ParameterSchema {
	res := &gram.OpenAPI3P1ParameterSchema{
		Name:          v.Name,
		Description:   v.Description,
		In:            v.In,
		Required:      v.Required,
		Style:         v.Style,
		Explode:       v.Explode,
		AllowReserved: v.AllowReserved,
		Deprecated:    v.Deprecated,
		Example:       v.Example,
	}
	if v.Schema != nil {
		schema := gram.JSONSchema(*v.Schema)
		res.Schema = &schema
	}
	{
		var zero bool
		if res.Deprecated == zero {
			res.Deprecated = false
		}
	}
	if v.Examples != nil {
		res.Examples = make(map[string]any, len(v.Examples))
		for key, val := range v.Examples {
			tk := key
			tv := val
			res.Examples[tk] = tv
		}
	}

	return res
}
