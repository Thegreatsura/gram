// Code generated by goa v3.20.0, DO NOT EDIT.
//
// gram HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package server

import (
	"context"
	"errors"
	"io"
	"net/http"

	gram "github.com/speakeasy-api/gram/gen/gram"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeCreateDeploymentResponse returns an encoder for responses returned by
// the gram createDeployment endpoint.
func EncodeCreateDeploymentResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*gram.DeploymentCreateResult)
		enc := encoder(ctx, w)
		body := NewCreateDeploymentResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeCreateDeploymentRequest returns a decoder for requests sent to the
// gram createDeployment endpoint.
func DecodeCreateDeploymentRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body CreateDeploymentRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateDeploymentRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCreateDeploymentDeploymentCreateForm(&body)

		return payload, nil
	}
}

// unmarshalOpenAPI3P1ToolFormRequestBodyToGramOpenAPI3P1ToolForm builds a
// value of type *gram.OpenAPI3P1ToolForm from a value of type
// *OpenAPI3P1ToolFormRequestBody.
func unmarshalOpenAPI3P1ToolFormRequestBodyToGramOpenAPI3P1ToolForm(v *OpenAPI3P1ToolFormRequestBody) *gram.OpenAPI3P1ToolForm {
	if v == nil {
		return nil
	}
	res := &gram.OpenAPI3P1ToolForm{
		Kind:        *v.Kind,
		Name:        *v.Name,
		Description: *v.Description,
		Path:        *v.Path,
		Method:      *v.Method,
		Body:        gram.JSONSchema(*v.Body),
	}
	if v.Tags != nil {
		res.Tags = make([]string, len(v.Tags))
		for i, val := range v.Tags {
			res.Tags[i] = val
		}
	}
	if v.Tags == nil {
		res.Tags = []string{}
	}
	res.PathParameters = make(map[string]*gram.OpenAPI3P1ParameterSchema, len(v.PathParameters))
	for key, val := range v.PathParameters {
		tk := key
		if val == nil {
			res.PathParameters[tk] = nil
			continue
		}
		res.PathParameters[tk] = unmarshalOpenAPI3P1ParameterSchemaRequestBodyToGramOpenAPI3P1ParameterSchema(val)
	}
	res.HeaderParameters = make(map[string]*gram.OpenAPI3P1ParameterSchema, len(v.HeaderParameters))
	for key, val := range v.HeaderParameters {
		tk := key
		if val == nil {
			res.HeaderParameters[tk] = nil
			continue
		}
		res.HeaderParameters[tk] = unmarshalOpenAPI3P1ParameterSchemaRequestBodyToGramOpenAPI3P1ParameterSchema(val)
	}
	res.QueryParameters = make(map[string]*gram.OpenAPI3P1ParameterSchema, len(v.QueryParameters))
	for key, val := range v.QueryParameters {
		tk := key
		if val == nil {
			res.QueryParameters[tk] = nil
			continue
		}
		res.QueryParameters[tk] = unmarshalOpenAPI3P1ParameterSchemaRequestBodyToGramOpenAPI3P1ParameterSchema(val)
	}

	return res
}

// unmarshalOpenAPI3P1ParameterSchemaRequestBodyToGramOpenAPI3P1ParameterSchema
// builds a value of type *gram.OpenAPI3P1ParameterSchema from a value of type
// *OpenAPI3P1ParameterSchemaRequestBody.
func unmarshalOpenAPI3P1ParameterSchemaRequestBodyToGramOpenAPI3P1ParameterSchema(v *OpenAPI3P1ParameterSchemaRequestBody) *gram.OpenAPI3P1ParameterSchema {
	res := &gram.OpenAPI3P1ParameterSchema{
		Name:          *v.Name,
		Description:   v.Description,
		In:            *v.In,
		Required:      *v.Required,
		Style:         v.Style,
		Explode:       v.Explode,
		AllowReserved: v.AllowReserved,
		Example:       v.Example,
	}
	if v.Schema != nil {
		schema := gram.JSONSchema(*v.Schema)
		res.Schema = &schema
	}
	if v.Deprecated != nil {
		res.Deprecated = *v.Deprecated
	}
	if v.Deprecated == nil {
		res.Deprecated = false
	}
	if v.Examples != nil {
		res.Examples = make(map[string]any, len(v.Examples))
		for key, val := range v.Examples {
			tk := key
			tv := val
			res.Examples[tk] = tv
		}
	}

	return res
}
