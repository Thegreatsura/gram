// Code generated by goa v3.20.1, DO NOT EDIT.
//
// mcp client HTTP transport
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package client

import (
	"context"
	"net/http"

	mcp "github.com/speakeasy-api/gram/gen/mcp"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the mcp service endpoint HTTP clients.
type Client struct {
	// ServePublic Doer is the HTTP client used to make requests to the servePublic
	// endpoint.
	ServePublicDoer goahttp.Doer

	// ServeAuthenticated Doer is the HTTP client used to make requests to the
	// serveAuthenticated endpoint.
	ServeAuthenticatedDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the mcp service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		ServePublicDoer:        doer,
		ServeAuthenticatedDoer: doer,
		RestoreResponseBody:    restoreBody,
		scheme:                 scheme,
		host:                   host,
		decoder:                dec,
		encoder:                enc,
	}
}

// ServePublic returns an endpoint that makes HTTP requests to the mcp service
// servePublic server.
func (c *Client) ServePublic() goa.Endpoint {
	var (
		encodeRequest  = EncodeServePublicRequest(c.encoder)
		decodeResponse = DecodeServePublicResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildServePublicRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ServePublicDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("mcp", "servePublic", err)
		}
		res, err := decodeResponse(resp)
		if err != nil {
			resp.Body.Close()
			return nil, err
		}
		return &mcp.ServePublicResponseData{Result: res.(*mcp.ServePublicResult), Body: resp.Body}, nil
	}
}

// ServeAuthenticated returns an endpoint that makes HTTP requests to the mcp
// service serveAuthenticated server.
func (c *Client) ServeAuthenticated() goa.Endpoint {
	var (
		encodeRequest  = EncodeServeAuthenticatedRequest(c.encoder)
		decodeResponse = DecodeServeAuthenticatedResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildServeAuthenticatedRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ServeAuthenticatedDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("mcp", "serveAuthenticated", err)
		}
		res, err := decodeResponse(resp)
		if err != nil {
			resp.Body.Close()
			return nil, err
		}
		return &mcp.ServeAuthenticatedResponseData{Result: res.(*mcp.ServeAuthenticatedResult), Body: resp.Body}, nil
	}
}
