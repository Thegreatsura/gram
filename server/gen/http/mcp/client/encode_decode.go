// Code generated by goa v3.20.1, DO NOT EDIT.
//
// mcp HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"os"
	"strconv"

	mcp "github.com/speakeasy-api/gram/gen/mcp"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildServePublicRequest instantiates a HTTP request object with method and
// path set to call the "mcp" service "servePublic" endpoint
func (c *Client) BuildServePublicRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		mcpSlug string
		body    io.Reader
	)
	{
		rd, ok := v.(*mcp.ServePublicRequestData)
		if !ok {
			return nil, goahttp.ErrInvalidType("mcp", "servePublic", "mcp.ServePublicRequestData", v)
		}
		p := rd.Payload
		body = rd.Body
		mcpSlug = p.McpSlug
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ServePublicMcpPath(mcpSlug)}
	req, err := http.NewRequest("POST", u.String(), body)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("mcp", "servePublic", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeServePublicRequest returns an encoder for requests sent to the mcp
// servePublic server.
func EncodeServePublicRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		data, ok := v.(*mcp.ServePublicRequestData)
		if !ok {
			return goahttp.ErrInvalidType("mcp", "servePublic", "*mcp.ServePublicRequestData", v)
		}
		p := data.Payload
		if p.EnvironmentVariables != nil {
			head := *p.EnvironmentVariables
			req.Header.Set("MCP-Environment", head)
		}
		if p.ApikeyToken != nil {
			head := *p.ApikeyToken
			req.Header.Set("Authorization", head)
		}
		return nil
	}
}

// DecodeServePublicResponse returns a decoder for responses returned by the
// mcp servePublic endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeServePublicResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - "no_content" (type *mcp.NoContent): http.StatusNoContent
//   - error: internal error
func DecodeServePublicResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				contentType string
				err         error
			)
			contentTypeRaw := resp.Header.Get("Content-Type")
			if contentTypeRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("contentType", "header"))
			}
			contentType = contentTypeRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("mcp", "servePublic", err)
			}
			res := NewServePublicResultOK(contentType)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body ServePublicUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcp", "servePublic", err)
			}
			err = ValidateServePublicUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcp", "servePublic", err)
			}
			return nil, NewServePublicUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body ServePublicForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcp", "servePublic", err)
			}
			err = ValidateServePublicForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcp", "servePublic", err)
			}
			return nil, NewServePublicForbidden(&body)
		case http.StatusBadRequest:
			var (
				body ServePublicBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcp", "servePublic", err)
			}
			err = ValidateServePublicBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcp", "servePublic", err)
			}
			return nil, NewServePublicBadRequest(&body)
		case http.StatusNotFound:
			var (
				body ServePublicNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcp", "servePublic", err)
			}
			err = ValidateServePublicNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcp", "servePublic", err)
			}
			return nil, NewServePublicNotFound(&body)
		case http.StatusConflict:
			var (
				body ServePublicConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcp", "servePublic", err)
			}
			err = ValidateServePublicConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcp", "servePublic", err)
			}
			return nil, NewServePublicConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body ServePublicUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcp", "servePublic", err)
			}
			err = ValidateServePublicUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcp", "servePublic", err)
			}
			return nil, NewServePublicUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body ServePublicInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcp", "servePublic", err)
			}
			err = ValidateServePublicInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcp", "servePublic", err)
			}
			return nil, NewServePublicInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body ServePublicInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("mcp", "servePublic", err)
				}
				err = ValidateServePublicInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("mcp", "servePublic", err)
				}
				return nil, NewServePublicInvariantViolation(&body)
			case "unexpected":
				var (
					body ServePublicUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("mcp", "servePublic", err)
				}
				err = ValidateServePublicUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("mcp", "servePublic", err)
				}
				return nil, NewServePublicUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("mcp", "servePublic", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body ServePublicGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcp", "servePublic", err)
			}
			err = ValidateServePublicGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcp", "servePublic", err)
			}
			return nil, NewServePublicGatewayError(&body)
		case http.StatusNoContent:
			var (
				ack bool
				err error
			)
			{
				ackRaw := resp.Header.Get("Noop")
				if ackRaw == "" {
					return nil, goahttp.ErrValidationError("mcp", "servePublic", goa.MissingFieldError("ack", "header"))
				}
				v, err2 := strconv.ParseBool(ackRaw)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("ack", ackRaw, "boolean"))
				}
				ack = v
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("mcp", "servePublic", err)
			}
			return nil, NewServePublicNoContent(ack)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("mcp", "servePublic", resp.StatusCode, string(body))
		}
	}
}

// // BuildServePublicStreamPayload creates a streaming endpoint request payload
// from the method payload and the path to the file to be streamed
func BuildServePublicStreamPayload(payload any, fpath string) (*mcp.ServePublicRequestData, error) {
	f, err := os.Open(fpath)
	if err != nil {
		return nil, err
	}
	return &mcp.ServePublicRequestData{
		Payload: payload.(*mcp.ServePublicPayload),
		Body:    f,
	}, nil
}

// BuildServeAuthenticatedRequest instantiates a HTTP request object with
// method and path set to call the "mcp" service "serveAuthenticated" endpoint
func (c *Client) BuildServeAuthenticatedRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		project     string
		toolset     string
		environment string
		body        io.Reader
	)
	{
		rd, ok := v.(*mcp.ServeAuthenticatedRequestData)
		if !ok {
			return nil, goahttp.ErrInvalidType("mcp", "serveAuthenticated", "mcp.ServeAuthenticatedRequestData", v)
		}
		p := rd.Payload
		body = rd.Body
		if p.Project != nil {
			project = *p.Project
		}
		if p.Toolset != nil {
			toolset = *p.Toolset
		}
		if p.Environment != nil {
			environment = *p.Environment
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ServeAuthenticatedMcpPath(project, toolset, environment)}
	req, err := http.NewRequest("POST", u.String(), body)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("mcp", "serveAuthenticated", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeServeAuthenticatedRequest returns an encoder for requests sent to the
// mcp serveAuthenticated server.
func EncodeServeAuthenticatedRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		data, ok := v.(*mcp.ServeAuthenticatedRequestData)
		if !ok {
			return goahttp.ErrInvalidType("mcp", "serveAuthenticated", "*mcp.ServeAuthenticatedRequestData", v)
		}
		p := data.Payload
		if p.ApikeyToken != nil {
			head := *p.ApikeyToken
			req.Header.Set("Authorization", head)
		}
		if p.EnvironmentVariables != nil {
			head := *p.EnvironmentVariables
			req.Header.Set("MCP-Environment", head)
		}
		return nil
	}
}

// DecodeServeAuthenticatedResponse returns a decoder for responses returned by
// the mcp serveAuthenticated endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeServeAuthenticatedResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - "no_content" (type *mcp.NoContent): http.StatusNoContent
//   - error: internal error
func DecodeServeAuthenticatedResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				contentType string
				err         error
			)
			contentTypeRaw := resp.Header.Get("Content-Type")
			if contentTypeRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("contentType", "header"))
			}
			contentType = contentTypeRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("mcp", "serveAuthenticated", err)
			}
			res := NewServeAuthenticatedResultOK(contentType)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body ServeAuthenticatedUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcp", "serveAuthenticated", err)
			}
			err = ValidateServeAuthenticatedUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcp", "serveAuthenticated", err)
			}
			return nil, NewServeAuthenticatedUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body ServeAuthenticatedForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcp", "serveAuthenticated", err)
			}
			err = ValidateServeAuthenticatedForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcp", "serveAuthenticated", err)
			}
			return nil, NewServeAuthenticatedForbidden(&body)
		case http.StatusBadRequest:
			var (
				body ServeAuthenticatedBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcp", "serveAuthenticated", err)
			}
			err = ValidateServeAuthenticatedBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcp", "serveAuthenticated", err)
			}
			return nil, NewServeAuthenticatedBadRequest(&body)
		case http.StatusNotFound:
			var (
				body ServeAuthenticatedNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcp", "serveAuthenticated", err)
			}
			err = ValidateServeAuthenticatedNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcp", "serveAuthenticated", err)
			}
			return nil, NewServeAuthenticatedNotFound(&body)
		case http.StatusConflict:
			var (
				body ServeAuthenticatedConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcp", "serveAuthenticated", err)
			}
			err = ValidateServeAuthenticatedConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcp", "serveAuthenticated", err)
			}
			return nil, NewServeAuthenticatedConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body ServeAuthenticatedUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcp", "serveAuthenticated", err)
			}
			err = ValidateServeAuthenticatedUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcp", "serveAuthenticated", err)
			}
			return nil, NewServeAuthenticatedUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body ServeAuthenticatedInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcp", "serveAuthenticated", err)
			}
			err = ValidateServeAuthenticatedInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcp", "serveAuthenticated", err)
			}
			return nil, NewServeAuthenticatedInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body ServeAuthenticatedInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("mcp", "serveAuthenticated", err)
				}
				err = ValidateServeAuthenticatedInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("mcp", "serveAuthenticated", err)
				}
				return nil, NewServeAuthenticatedInvariantViolation(&body)
			case "unexpected":
				var (
					body ServeAuthenticatedUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("mcp", "serveAuthenticated", err)
				}
				err = ValidateServeAuthenticatedUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("mcp", "serveAuthenticated", err)
				}
				return nil, NewServeAuthenticatedUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("mcp", "serveAuthenticated", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body ServeAuthenticatedGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcp", "serveAuthenticated", err)
			}
			err = ValidateServeAuthenticatedGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcp", "serveAuthenticated", err)
			}
			return nil, NewServeAuthenticatedGatewayError(&body)
		case http.StatusNoContent:
			var (
				ack bool
				err error
			)
			{
				ackRaw := resp.Header.Get("Noop")
				if ackRaw == "" {
					return nil, goahttp.ErrValidationError("mcp", "serveAuthenticated", goa.MissingFieldError("ack", "header"))
				}
				v, err2 := strconv.ParseBool(ackRaw)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("ack", ackRaw, "boolean"))
				}
				ack = v
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("mcp", "serveAuthenticated", err)
			}
			return nil, NewServeAuthenticatedNoContent(ack)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("mcp", "serveAuthenticated", resp.StatusCode, string(body))
		}
	}
}

// // BuildServeAuthenticatedStreamPayload creates a streaming endpoint request
// payload from the method payload and the path to the file to be streamed
func BuildServeAuthenticatedStreamPayload(payload any, fpath string) (*mcp.ServeAuthenticatedRequestData, error) {
	f, err := os.Open(fpath)
	if err != nil {
		return nil, err
	}
	return &mcp.ServeAuthenticatedRequestData{
		Payload: payload.(*mcp.ServeAuthenticatedPayload),
		Body:    f,
	}, nil
}
