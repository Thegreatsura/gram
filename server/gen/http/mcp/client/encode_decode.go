// Code generated by goa v3.20.1, DO NOT EDIT.
//
// mcp HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"os"
	"strconv"

	mcp "github.com/speakeasy-api/gram/gen/mcp"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildServeRequest instantiates a HTTP request object with method and path
// set to call the "mcp" service "serve" endpoint
func (c *Client) BuildServeRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		project     string
		toolset     string
		environment string
		body        io.Reader
	)
	{
		rd, ok := v.(*mcp.ServeRequestData)
		if !ok {
			return nil, goahttp.ErrInvalidType("mcp", "serve", "mcp.ServeRequestData", v)
		}
		p := rd.Payload
		body = rd.Body
		if p.Project != nil {
			project = *p.Project
		}
		if p.Toolset != nil {
			toolset = *p.Toolset
		}
		if p.Environment != nil {
			environment = *p.Environment
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ServeMcpPath(project, toolset, environment)}
	req, err := http.NewRequest("POST", u.String(), body)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("mcp", "serve", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeServeRequest returns an encoder for requests sent to the mcp serve
// server.
func EncodeServeRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		data, ok := v.(*mcp.ServeRequestData)
		if !ok {
			return goahttp.ErrInvalidType("mcp", "serve", "*mcp.ServeRequestData", v)
		}
		p := data.Payload
		if p.ApikeyToken != nil {
			head := *p.ApikeyToken
			req.Header.Set("Authorization", head)
		}
		return nil
	}
}

// DecodeServeResponse returns a decoder for responses returned by the mcp
// serve endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeServeResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - "gateway_error" (type *goa.ServiceError): http.StatusBadGateway
//   - "no_content" (type *mcp.NoContent): http.StatusNoContent
//   - error: internal error
func DecodeServeResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				contentType string
				err         error
			)
			contentTypeRaw := resp.Header.Get("Content-Type")
			if contentTypeRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("contentType", "header"))
			}
			contentType = contentTypeRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("mcp", "serve", err)
			}
			res := NewServeResultOK(contentType)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body ServeUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcp", "serve", err)
			}
			err = ValidateServeUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcp", "serve", err)
			}
			return nil, NewServeUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body ServeForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcp", "serve", err)
			}
			err = ValidateServeForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcp", "serve", err)
			}
			return nil, NewServeForbidden(&body)
		case http.StatusBadRequest:
			var (
				body ServeBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcp", "serve", err)
			}
			err = ValidateServeBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcp", "serve", err)
			}
			return nil, NewServeBadRequest(&body)
		case http.StatusNotFound:
			var (
				body ServeNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcp", "serve", err)
			}
			err = ValidateServeNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcp", "serve", err)
			}
			return nil, NewServeNotFound(&body)
		case http.StatusConflict:
			var (
				body ServeConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcp", "serve", err)
			}
			err = ValidateServeConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcp", "serve", err)
			}
			return nil, NewServeConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body ServeUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcp", "serve", err)
			}
			err = ValidateServeUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcp", "serve", err)
			}
			return nil, NewServeUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body ServeInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcp", "serve", err)
			}
			err = ValidateServeInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcp", "serve", err)
			}
			return nil, NewServeInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body ServeInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("mcp", "serve", err)
				}
				err = ValidateServeInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("mcp", "serve", err)
				}
				return nil, NewServeInvariantViolation(&body)
			case "unexpected":
				var (
					body ServeUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("mcp", "serve", err)
				}
				err = ValidateServeUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("mcp", "serve", err)
				}
				return nil, NewServeUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("mcp", "serve", resp.StatusCode, string(body))
			}
		case http.StatusBadGateway:
			var (
				body ServeGatewayErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mcp", "serve", err)
			}
			err = ValidateServeGatewayErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mcp", "serve", err)
			}
			return nil, NewServeGatewayError(&body)
		case http.StatusNoContent:
			var (
				ack bool
				err error
			)
			{
				ackRaw := resp.Header.Get("Noop")
				if ackRaw == "" {
					return nil, goahttp.ErrValidationError("mcp", "serve", goa.MissingFieldError("ack", "header"))
				}
				v, err2 := strconv.ParseBool(ackRaw)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("ack", ackRaw, "boolean"))
				}
				ack = v
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("mcp", "serve", err)
			}
			return nil, NewServeNoContent(ack)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("mcp", "serve", resp.StatusCode, string(body))
		}
	}
}

// // BuildServeStreamPayload creates a streaming endpoint request payload from
// the method payload and the path to the file to be streamed
func BuildServeStreamPayload(payload any, fpath string) (*mcp.ServeRequestData, error) {
	f, err := os.Open(fpath)
	if err != nil {
		return nil, err
	}
	return &mcp.ServeRequestData{
		Payload: payload.(*mcp.ServePayload),
		Body:    f,
	}, nil
}
