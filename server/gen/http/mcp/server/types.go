// Code generated by goa v3.20.1, DO NOT EDIT.
//
// mcp HTTP server types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package server

import (
	mcp "github.com/speakeasy-api/gram/gen/mcp"
	goa "goa.design/goa/v3/pkg"
)

// ServeUnauthorizedResponseBody is the type of the "mcp" service "serve"
// endpoint HTTP response body for the "unauthorized" error.
type ServeUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ServeForbiddenResponseBody is the type of the "mcp" service "serve" endpoint
// HTTP response body for the "forbidden" error.
type ServeForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ServeBadRequestResponseBody is the type of the "mcp" service "serve"
// endpoint HTTP response body for the "bad_request" error.
type ServeBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ServeNotFoundResponseBody is the type of the "mcp" service "serve" endpoint
// HTTP response body for the "not_found" error.
type ServeNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ServeConflictResponseBody is the type of the "mcp" service "serve" endpoint
// HTTP response body for the "conflict" error.
type ServeConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ServeUnsupportedMediaResponseBody is the type of the "mcp" service "serve"
// endpoint HTTP response body for the "unsupported_media" error.
type ServeUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ServeInvalidResponseBody is the type of the "mcp" service "serve" endpoint
// HTTP response body for the "invalid" error.
type ServeInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ServeInvariantViolationResponseBody is the type of the "mcp" service "serve"
// endpoint HTTP response body for the "invariant_violation" error.
type ServeInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ServeUnexpectedResponseBody is the type of the "mcp" service "serve"
// endpoint HTTP response body for the "unexpected" error.
type ServeUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ServeGatewayErrorResponseBody is the type of the "mcp" service "serve"
// endpoint HTTP response body for the "gateway_error" error.
type ServeGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// NewServeUnauthorizedResponseBody builds the HTTP response body from the
// result of the "serve" endpoint of the "mcp" service.
func NewServeUnauthorizedResponseBody(res *goa.ServiceError) *ServeUnauthorizedResponseBody {
	body := &ServeUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServeForbiddenResponseBody builds the HTTP response body from the result
// of the "serve" endpoint of the "mcp" service.
func NewServeForbiddenResponseBody(res *goa.ServiceError) *ServeForbiddenResponseBody {
	body := &ServeForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServeBadRequestResponseBody builds the HTTP response body from the result
// of the "serve" endpoint of the "mcp" service.
func NewServeBadRequestResponseBody(res *goa.ServiceError) *ServeBadRequestResponseBody {
	body := &ServeBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServeNotFoundResponseBody builds the HTTP response body from the result
// of the "serve" endpoint of the "mcp" service.
func NewServeNotFoundResponseBody(res *goa.ServiceError) *ServeNotFoundResponseBody {
	body := &ServeNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServeConflictResponseBody builds the HTTP response body from the result
// of the "serve" endpoint of the "mcp" service.
func NewServeConflictResponseBody(res *goa.ServiceError) *ServeConflictResponseBody {
	body := &ServeConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServeUnsupportedMediaResponseBody builds the HTTP response body from the
// result of the "serve" endpoint of the "mcp" service.
func NewServeUnsupportedMediaResponseBody(res *goa.ServiceError) *ServeUnsupportedMediaResponseBody {
	body := &ServeUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServeInvalidResponseBody builds the HTTP response body from the result of
// the "serve" endpoint of the "mcp" service.
func NewServeInvalidResponseBody(res *goa.ServiceError) *ServeInvalidResponseBody {
	body := &ServeInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServeInvariantViolationResponseBody builds the HTTP response body from
// the result of the "serve" endpoint of the "mcp" service.
func NewServeInvariantViolationResponseBody(res *goa.ServiceError) *ServeInvariantViolationResponseBody {
	body := &ServeInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServeUnexpectedResponseBody builds the HTTP response body from the result
// of the "serve" endpoint of the "mcp" service.
func NewServeUnexpectedResponseBody(res *goa.ServiceError) *ServeUnexpectedResponseBody {
	body := &ServeUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServeGatewayErrorResponseBody builds the HTTP response body from the
// result of the "serve" endpoint of the "mcp" service.
func NewServeGatewayErrorResponseBody(res *goa.ServiceError) *ServeGatewayErrorResponseBody {
	body := &ServeGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServePayload builds a mcp service serve endpoint payload.
func NewServePayload(project string, toolset string, environment string, apikeyToken *string) *mcp.ServePayload {
	v := &mcp.ServePayload{}
	v.Project = &project
	v.Toolset = &toolset
	v.Environment = &environment
	v.ApikeyToken = apikeyToken

	return v
}
