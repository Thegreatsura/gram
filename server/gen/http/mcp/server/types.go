// Code generated by goa v3.20.1, DO NOT EDIT.
//
// mcp HTTP server types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package server

import (
	mcp "github.com/speakeasy-api/gram/gen/mcp"
	goa "goa.design/goa/v3/pkg"
)

// ServePublicUnauthorizedResponseBody is the type of the "mcp" service
// "servePublic" endpoint HTTP response body for the "unauthorized" error.
type ServePublicUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ServePublicForbiddenResponseBody is the type of the "mcp" service
// "servePublic" endpoint HTTP response body for the "forbidden" error.
type ServePublicForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ServePublicBadRequestResponseBody is the type of the "mcp" service
// "servePublic" endpoint HTTP response body for the "bad_request" error.
type ServePublicBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ServePublicNotFoundResponseBody is the type of the "mcp" service
// "servePublic" endpoint HTTP response body for the "not_found" error.
type ServePublicNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ServePublicConflictResponseBody is the type of the "mcp" service
// "servePublic" endpoint HTTP response body for the "conflict" error.
type ServePublicConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ServePublicUnsupportedMediaResponseBody is the type of the "mcp" service
// "servePublic" endpoint HTTP response body for the "unsupported_media" error.
type ServePublicUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ServePublicInvalidResponseBody is the type of the "mcp" service
// "servePublic" endpoint HTTP response body for the "invalid" error.
type ServePublicInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ServePublicInvariantViolationResponseBody is the type of the "mcp" service
// "servePublic" endpoint HTTP response body for the "invariant_violation"
// error.
type ServePublicInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ServePublicUnexpectedResponseBody is the type of the "mcp" service
// "servePublic" endpoint HTTP response body for the "unexpected" error.
type ServePublicUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ServePublicGatewayErrorResponseBody is the type of the "mcp" service
// "servePublic" endpoint HTTP response body for the "gateway_error" error.
type ServePublicGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ServeAuthenticatedUnauthorizedResponseBody is the type of the "mcp" service
// "serveAuthenticated" endpoint HTTP response body for the "unauthorized"
// error.
type ServeAuthenticatedUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ServeAuthenticatedForbiddenResponseBody is the type of the "mcp" service
// "serveAuthenticated" endpoint HTTP response body for the "forbidden" error.
type ServeAuthenticatedForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ServeAuthenticatedBadRequestResponseBody is the type of the "mcp" service
// "serveAuthenticated" endpoint HTTP response body for the "bad_request" error.
type ServeAuthenticatedBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ServeAuthenticatedNotFoundResponseBody is the type of the "mcp" service
// "serveAuthenticated" endpoint HTTP response body for the "not_found" error.
type ServeAuthenticatedNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ServeAuthenticatedConflictResponseBody is the type of the "mcp" service
// "serveAuthenticated" endpoint HTTP response body for the "conflict" error.
type ServeAuthenticatedConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ServeAuthenticatedUnsupportedMediaResponseBody is the type of the "mcp"
// service "serveAuthenticated" endpoint HTTP response body for the
// "unsupported_media" error.
type ServeAuthenticatedUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ServeAuthenticatedInvalidResponseBody is the type of the "mcp" service
// "serveAuthenticated" endpoint HTTP response body for the "invalid" error.
type ServeAuthenticatedInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ServeAuthenticatedInvariantViolationResponseBody is the type of the "mcp"
// service "serveAuthenticated" endpoint HTTP response body for the
// "invariant_violation" error.
type ServeAuthenticatedInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ServeAuthenticatedUnexpectedResponseBody is the type of the "mcp" service
// "serveAuthenticated" endpoint HTTP response body for the "unexpected" error.
type ServeAuthenticatedUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ServeAuthenticatedGatewayErrorResponseBody is the type of the "mcp" service
// "serveAuthenticated" endpoint HTTP response body for the "gateway_error"
// error.
type ServeAuthenticatedGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// NewServePublicUnauthorizedResponseBody builds the HTTP response body from
// the result of the "servePublic" endpoint of the "mcp" service.
func NewServePublicUnauthorizedResponseBody(res *goa.ServiceError) *ServePublicUnauthorizedResponseBody {
	body := &ServePublicUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServePublicForbiddenResponseBody builds the HTTP response body from the
// result of the "servePublic" endpoint of the "mcp" service.
func NewServePublicForbiddenResponseBody(res *goa.ServiceError) *ServePublicForbiddenResponseBody {
	body := &ServePublicForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServePublicBadRequestResponseBody builds the HTTP response body from the
// result of the "servePublic" endpoint of the "mcp" service.
func NewServePublicBadRequestResponseBody(res *goa.ServiceError) *ServePublicBadRequestResponseBody {
	body := &ServePublicBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServePublicNotFoundResponseBody builds the HTTP response body from the
// result of the "servePublic" endpoint of the "mcp" service.
func NewServePublicNotFoundResponseBody(res *goa.ServiceError) *ServePublicNotFoundResponseBody {
	body := &ServePublicNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServePublicConflictResponseBody builds the HTTP response body from the
// result of the "servePublic" endpoint of the "mcp" service.
func NewServePublicConflictResponseBody(res *goa.ServiceError) *ServePublicConflictResponseBody {
	body := &ServePublicConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServePublicUnsupportedMediaResponseBody builds the HTTP response body
// from the result of the "servePublic" endpoint of the "mcp" service.
func NewServePublicUnsupportedMediaResponseBody(res *goa.ServiceError) *ServePublicUnsupportedMediaResponseBody {
	body := &ServePublicUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServePublicInvalidResponseBody builds the HTTP response body from the
// result of the "servePublic" endpoint of the "mcp" service.
func NewServePublicInvalidResponseBody(res *goa.ServiceError) *ServePublicInvalidResponseBody {
	body := &ServePublicInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServePublicInvariantViolationResponseBody builds the HTTP response body
// from the result of the "servePublic" endpoint of the "mcp" service.
func NewServePublicInvariantViolationResponseBody(res *goa.ServiceError) *ServePublicInvariantViolationResponseBody {
	body := &ServePublicInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServePublicUnexpectedResponseBody builds the HTTP response body from the
// result of the "servePublic" endpoint of the "mcp" service.
func NewServePublicUnexpectedResponseBody(res *goa.ServiceError) *ServePublicUnexpectedResponseBody {
	body := &ServePublicUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServePublicGatewayErrorResponseBody builds the HTTP response body from
// the result of the "servePublic" endpoint of the "mcp" service.
func NewServePublicGatewayErrorResponseBody(res *goa.ServiceError) *ServePublicGatewayErrorResponseBody {
	body := &ServePublicGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServeAuthenticatedUnauthorizedResponseBody builds the HTTP response body
// from the result of the "serveAuthenticated" endpoint of the "mcp" service.
func NewServeAuthenticatedUnauthorizedResponseBody(res *goa.ServiceError) *ServeAuthenticatedUnauthorizedResponseBody {
	body := &ServeAuthenticatedUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServeAuthenticatedForbiddenResponseBody builds the HTTP response body
// from the result of the "serveAuthenticated" endpoint of the "mcp" service.
func NewServeAuthenticatedForbiddenResponseBody(res *goa.ServiceError) *ServeAuthenticatedForbiddenResponseBody {
	body := &ServeAuthenticatedForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServeAuthenticatedBadRequestResponseBody builds the HTTP response body
// from the result of the "serveAuthenticated" endpoint of the "mcp" service.
func NewServeAuthenticatedBadRequestResponseBody(res *goa.ServiceError) *ServeAuthenticatedBadRequestResponseBody {
	body := &ServeAuthenticatedBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServeAuthenticatedNotFoundResponseBody builds the HTTP response body from
// the result of the "serveAuthenticated" endpoint of the "mcp" service.
func NewServeAuthenticatedNotFoundResponseBody(res *goa.ServiceError) *ServeAuthenticatedNotFoundResponseBody {
	body := &ServeAuthenticatedNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServeAuthenticatedConflictResponseBody builds the HTTP response body from
// the result of the "serveAuthenticated" endpoint of the "mcp" service.
func NewServeAuthenticatedConflictResponseBody(res *goa.ServiceError) *ServeAuthenticatedConflictResponseBody {
	body := &ServeAuthenticatedConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServeAuthenticatedUnsupportedMediaResponseBody builds the HTTP response
// body from the result of the "serveAuthenticated" endpoint of the "mcp"
// service.
func NewServeAuthenticatedUnsupportedMediaResponseBody(res *goa.ServiceError) *ServeAuthenticatedUnsupportedMediaResponseBody {
	body := &ServeAuthenticatedUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServeAuthenticatedInvalidResponseBody builds the HTTP response body from
// the result of the "serveAuthenticated" endpoint of the "mcp" service.
func NewServeAuthenticatedInvalidResponseBody(res *goa.ServiceError) *ServeAuthenticatedInvalidResponseBody {
	body := &ServeAuthenticatedInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServeAuthenticatedInvariantViolationResponseBody builds the HTTP response
// body from the result of the "serveAuthenticated" endpoint of the "mcp"
// service.
func NewServeAuthenticatedInvariantViolationResponseBody(res *goa.ServiceError) *ServeAuthenticatedInvariantViolationResponseBody {
	body := &ServeAuthenticatedInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServeAuthenticatedUnexpectedResponseBody builds the HTTP response body
// from the result of the "serveAuthenticated" endpoint of the "mcp" service.
func NewServeAuthenticatedUnexpectedResponseBody(res *goa.ServiceError) *ServeAuthenticatedUnexpectedResponseBody {
	body := &ServeAuthenticatedUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServeAuthenticatedGatewayErrorResponseBody builds the HTTP response body
// from the result of the "serveAuthenticated" endpoint of the "mcp" service.
func NewServeAuthenticatedGatewayErrorResponseBody(res *goa.ServiceError) *ServeAuthenticatedGatewayErrorResponseBody {
	body := &ServeAuthenticatedGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewServePublicPayload builds a mcp service servePublic endpoint payload.
func NewServePublicPayload(mcpSlug string, environmentVariables *string, apikeyToken *string) *mcp.ServePublicPayload {
	v := &mcp.ServePublicPayload{}
	v.McpSlug = mcpSlug
	v.EnvironmentVariables = environmentVariables
	v.ApikeyToken = apikeyToken

	return v
}

// NewServeAuthenticatedPayload builds a mcp service serveAuthenticated
// endpoint payload.
func NewServeAuthenticatedPayload(project string, toolset string, environment string, apikeyToken *string, environmentVariables *string) *mcp.ServeAuthenticatedPayload {
	v := &mcp.ServeAuthenticatedPayload{}
	v.Project = &project
	v.Toolset = &toolset
	v.Environment = &environment
	v.ApikeyToken = apikeyToken
	v.EnvironmentVariables = environmentVariables

	return v
}
