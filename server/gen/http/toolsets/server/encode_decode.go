// Code generated by goa v3.20.0, DO NOT EDIT.
//
// toolsets HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package server

import (
	"context"
	"errors"
	"io"
	"net/http"
	"strings"

	toolsets "github.com/speakeasy-api/gram/gen/toolsets"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeCreateToolsetResponse returns an encoder for responses returned by the
// toolsets createToolset endpoint.
func EncodeCreateToolsetResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*toolsets.Toolset)
		enc := encoder(ctx, w)
		body := NewCreateToolsetResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeCreateToolsetRequest returns a decoder for requests sent to the
// toolsets createToolset endpoint.
func DecodeCreateToolsetRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body CreateToolsetRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateToolsetRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			gramSessionToken *string
			projectSlug      string
		)
		gramSessionTokenRaw := r.Header.Get("X-Gram-Session")
		if gramSessionTokenRaw != "" {
			gramSessionToken = &gramSessionTokenRaw
		}
		projectSlug = r.Header.Get("Gram-Project")
		if projectSlug == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("project_slug", "header"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewCreateToolsetPayload(&body, gramSessionToken, projectSlug)
		if payload.GramSessionToken != nil {
			if strings.Contains(*payload.GramSessionToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.GramSessionToken, " ", 2)[1]
				payload.GramSessionToken = &cred
			}
		}

		return payload, nil
	}
}

// EncodeListToolsetsResponse returns an encoder for responses returned by the
// toolsets listToolsets endpoint.
func EncodeListToolsetsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*toolsets.ListToolsetsResult)
		enc := encoder(ctx, w)
		body := NewListToolsetsResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListToolsetsRequest returns a decoder for requests sent to the
// toolsets listToolsets endpoint.
func DecodeListToolsetsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			gramSessionToken *string
			projectSlug      string
			err              error
		)
		gramSessionTokenRaw := r.Header.Get("X-Gram-Session")
		if gramSessionTokenRaw != "" {
			gramSessionToken = &gramSessionTokenRaw
		}
		projectSlug = r.Header.Get("Gram-Project")
		if projectSlug == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("project_slug", "header"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewListToolsetsPayload(gramSessionToken, projectSlug)
		if payload.GramSessionToken != nil {
			if strings.Contains(*payload.GramSessionToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.GramSessionToken, " ", 2)[1]
				payload.GramSessionToken = &cred
			}
		}

		return payload, nil
	}
}

// EncodeUpdateToolsetResponse returns an encoder for responses returned by the
// toolsets updateToolset endpoint.
func EncodeUpdateToolsetResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*toolsets.Toolset)
		enc := encoder(ctx, w)
		body := NewUpdateToolsetResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUpdateToolsetRequest returns a decoder for requests sent to the
// toolsets updateToolset endpoint.
func DecodeUpdateToolsetRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body UpdateToolsetRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}

		var (
			id               string
			gramSessionToken *string
			projectSlug      string

			params = mux.Vars(r)
		)
		id = params["id"]
		gramSessionTokenRaw := r.Header.Get("X-Gram-Session")
		if gramSessionTokenRaw != "" {
			gramSessionToken = &gramSessionTokenRaw
		}
		projectSlug = r.Header.Get("Gram-Project")
		if projectSlug == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("project_slug", "header"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewUpdateToolsetPayload(&body, id, gramSessionToken, projectSlug)
		if payload.GramSessionToken != nil {
			if strings.Contains(*payload.GramSessionToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.GramSessionToken, " ", 2)[1]
				payload.GramSessionToken = &cred
			}
		}

		return payload, nil
	}
}

// EncodeGetToolsetDetailsResponse returns an encoder for responses returned by
// the toolsets getToolsetDetails endpoint.
func EncodeGetToolsetDetailsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*toolsets.ToolsetDetails)
		enc := encoder(ctx, w)
		body := NewGetToolsetDetailsResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetToolsetDetailsRequest returns a decoder for requests sent to the
// toolsets getToolsetDetails endpoint.
func DecodeGetToolsetDetailsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			id               string
			gramSessionToken *string
			projectSlug      string
			err              error

			params = mux.Vars(r)
		)
		id = params["id"]
		gramSessionTokenRaw := r.Header.Get("X-Gram-Session")
		if gramSessionTokenRaw != "" {
			gramSessionToken = &gramSessionTokenRaw
		}
		projectSlug = r.Header.Get("Gram-Project")
		if projectSlug == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("project_slug", "header"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetToolsetDetailsPayload(id, gramSessionToken, projectSlug)
		if payload.GramSessionToken != nil {
			if strings.Contains(*payload.GramSessionToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.GramSessionToken, " ", 2)[1]
				payload.GramSessionToken = &cred
			}
		}

		return payload, nil
	}
}

// marshalToolsetsToolsetToToolsetResponseBody builds a value of type
// *ToolsetResponseBody from a value of type *toolsets.Toolset.
func marshalToolsetsToolsetToToolsetResponseBody(v *toolsets.Toolset) *ToolsetResponseBody {
	res := &ToolsetResponseBody{
		ID:             v.ID,
		ProjectID:      v.ProjectID,
		OrganizationID: v.OrganizationID,
		Name:           v.Name,
		Slug:           v.Slug,
		Description:    v.Description,
		CreatedAt:      v.CreatedAt,
		UpdatedAt:      v.UpdatedAt,
	}
	if v.HTTPToolIds != nil {
		res.HTTPToolIds = make([]string, len(v.HTTPToolIds))
		for i, val := range v.HTTPToolIds {
			res.HTTPToolIds[i] = val
		}
	}

	return res
}

// marshalToolsetsHTTPToolDefinitionToHTTPToolDefinitionResponseBody builds a
// value of type *HTTPToolDefinitionResponseBody from a value of type
// *toolsets.HTTPToolDefinition.
func marshalToolsetsHTTPToolDefinitionToHTTPToolDefinitionResponseBody(v *toolsets.HTTPToolDefinition) *HTTPToolDefinitionResponseBody {
	res := &HTTPToolDefinitionResponseBody{
		ID:               v.ID,
		Name:             v.Name,
		Description:      v.Description,
		ServerEnvVar:     v.ServerEnvVar,
		SecurityType:     v.SecurityType,
		BearerEnvVar:     v.BearerEnvVar,
		ApikeyEnvVar:     v.ApikeyEnvVar,
		UsernameEnvVar:   v.UsernameEnvVar,
		PasswordEnvVar:   v.PasswordEnvVar,
		HTTPMethod:       v.HTTPMethod,
		Path:             v.Path,
		HeadersSchema:    v.HeadersSchema,
		QueriesSchema:    v.QueriesSchema,
		PathparamsSchema: v.PathparamsSchema,
		BodySchema:       v.BodySchema,
	}

	return res
}
