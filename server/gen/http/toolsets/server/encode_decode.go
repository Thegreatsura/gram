// Code generated by goa v3.20.1, DO NOT EDIT.
//
// toolsets HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package server

import (
	"context"
	"errors"
	"io"
	"net/http"
	"strings"

	toolsets "github.com/speakeasy-api/gram/gen/toolsets"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeCreateToolsetResponse returns an encoder for responses returned by the
// toolsets createToolset endpoint.
func EncodeCreateToolsetResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*toolsets.ToolsetDetails)
		enc := encoder(ctx, w)
		body := NewCreateToolsetResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeCreateToolsetRequest returns a decoder for requests sent to the
// toolsets createToolset endpoint.
func DecodeCreateToolsetRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body CreateToolsetRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateToolsetRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			sessionToken     *string
			projectSlugInput *string
		)
		sessionTokenRaw := r.Header.Get("Gram-Session")
		if sessionTokenRaw != "" {
			sessionToken = &sessionTokenRaw
		}
		projectSlugInputRaw := r.Header.Get("Gram-Project")
		if projectSlugInputRaw != "" {
			projectSlugInput = &projectSlugInputRaw
		}
		payload := NewCreateToolsetPayload(&body, sessionToken, projectSlugInput)
		if payload.SessionToken != nil {
			if strings.Contains(*payload.SessionToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.SessionToken, " ", 2)[1]
				payload.SessionToken = &cred
			}
		}
		if payload.ProjectSlugInput != nil {
			if strings.Contains(*payload.ProjectSlugInput, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.ProjectSlugInput, " ", 2)[1]
				payload.ProjectSlugInput = &cred
			}
		}

		return payload, nil
	}
}

// EncodeListToolsetsResponse returns an encoder for responses returned by the
// toolsets listToolsets endpoint.
func EncodeListToolsetsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*toolsets.ListToolsetsResult)
		enc := encoder(ctx, w)
		body := NewListToolsetsResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListToolsetsRequest returns a decoder for requests sent to the
// toolsets listToolsets endpoint.
func DecodeListToolsetsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			sessionToken     *string
			projectSlugInput *string
		)
		sessionTokenRaw := r.Header.Get("Gram-Session")
		if sessionTokenRaw != "" {
			sessionToken = &sessionTokenRaw
		}
		projectSlugInputRaw := r.Header.Get("Gram-Project")
		if projectSlugInputRaw != "" {
			projectSlugInput = &projectSlugInputRaw
		}
		payload := NewListToolsetsPayload(sessionToken, projectSlugInput)
		if payload.SessionToken != nil {
			if strings.Contains(*payload.SessionToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.SessionToken, " ", 2)[1]
				payload.SessionToken = &cred
			}
		}
		if payload.ProjectSlugInput != nil {
			if strings.Contains(*payload.ProjectSlugInput, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.ProjectSlugInput, " ", 2)[1]
				payload.ProjectSlugInput = &cred
			}
		}

		return payload, nil
	}
}

// EncodeUpdateToolsetResponse returns an encoder for responses returned by the
// toolsets updateToolset endpoint.
func EncodeUpdateToolsetResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*toolsets.ToolsetDetails)
		enc := encoder(ctx, w)
		body := NewUpdateToolsetResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUpdateToolsetRequest returns a decoder for requests sent to the
// toolsets updateToolset endpoint.
func DecodeUpdateToolsetRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body UpdateToolsetRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}

		var (
			slug             string
			sessionToken     *string
			projectSlugInput *string
		)
		slug = r.URL.Query().Get("slug")
		if slug == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("slug", "query string"))
		}
		sessionTokenRaw := r.Header.Get("Gram-Session")
		if sessionTokenRaw != "" {
			sessionToken = &sessionTokenRaw
		}
		projectSlugInputRaw := r.Header.Get("Gram-Project")
		if projectSlugInputRaw != "" {
			projectSlugInput = &projectSlugInputRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewUpdateToolsetPayload(&body, slug, sessionToken, projectSlugInput)
		if payload.SessionToken != nil {
			if strings.Contains(*payload.SessionToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.SessionToken, " ", 2)[1]
				payload.SessionToken = &cred
			}
		}
		if payload.ProjectSlugInput != nil {
			if strings.Contains(*payload.ProjectSlugInput, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.ProjectSlugInput, " ", 2)[1]
				payload.ProjectSlugInput = &cred
			}
		}

		return payload, nil
	}
}

// EncodeDeleteToolsetResponse returns an encoder for responses returned by the
// toolsets deleteToolset endpoint.
func EncodeDeleteToolsetResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeDeleteToolsetRequest returns a decoder for requests sent to the
// toolsets deleteToolset endpoint.
func DecodeDeleteToolsetRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			slug             string
			sessionToken     *string
			projectSlugInput *string
			err              error
		)
		slug = r.URL.Query().Get("slug")
		if slug == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("slug", "query string"))
		}
		sessionTokenRaw := r.Header.Get("Gram-Session")
		if sessionTokenRaw != "" {
			sessionToken = &sessionTokenRaw
		}
		projectSlugInputRaw := r.Header.Get("Gram-Project")
		if projectSlugInputRaw != "" {
			projectSlugInput = &projectSlugInputRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewDeleteToolsetPayload(slug, sessionToken, projectSlugInput)
		if payload.SessionToken != nil {
			if strings.Contains(*payload.SessionToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.SessionToken, " ", 2)[1]
				payload.SessionToken = &cred
			}
		}
		if payload.ProjectSlugInput != nil {
			if strings.Contains(*payload.ProjectSlugInput, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.ProjectSlugInput, " ", 2)[1]
				payload.ProjectSlugInput = &cred
			}
		}

		return payload, nil
	}
}

// EncodeGetToolsetResponse returns an encoder for responses returned by the
// toolsets getToolset endpoint.
func EncodeGetToolsetResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*toolsets.ToolsetDetails)
		enc := encoder(ctx, w)
		body := NewGetToolsetResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetToolsetRequest returns a decoder for requests sent to the toolsets
// getToolset endpoint.
func DecodeGetToolsetRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			slug             string
			sessionToken     *string
			projectSlugInput *string
			err              error
		)
		slug = r.URL.Query().Get("slug")
		if slug == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("slug", "query string"))
		}
		sessionTokenRaw := r.Header.Get("Gram-Session")
		if sessionTokenRaw != "" {
			sessionToken = &sessionTokenRaw
		}
		projectSlugInputRaw := r.Header.Get("Gram-Project")
		if projectSlugInputRaw != "" {
			projectSlugInput = &projectSlugInputRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetToolsetPayload(slug, sessionToken, projectSlugInput)
		if payload.SessionToken != nil {
			if strings.Contains(*payload.SessionToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.SessionToken, " ", 2)[1]
				payload.SessionToken = &cred
			}
		}
		if payload.ProjectSlugInput != nil {
			if strings.Contains(*payload.ProjectSlugInput, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.ProjectSlugInput, " ", 2)[1]
				payload.ProjectSlugInput = &cred
			}
		}

		return payload, nil
	}
}

// marshalToolsetsHTTPToolDefinitionToHTTPToolDefinitionResponseBody builds a
// value of type *HTTPToolDefinitionResponseBody from a value of type
// *toolsets.HTTPToolDefinition.
func marshalToolsetsHTTPToolDefinitionToHTTPToolDefinitionResponseBody(v *toolsets.HTTPToolDefinition) *HTTPToolDefinitionResponseBody {
	res := &HTTPToolDefinitionResponseBody{
		ID:                  v.ID,
		ProjectID:           v.ProjectID,
		DeploymentID:        v.DeploymentID,
		Openapiv3DocumentID: v.Openapiv3DocumentID,
		Name:                v.Name,
		Summary:             v.Summary,
		Description:         v.Description,
		Openapiv3Operation:  v.Openapiv3Operation,
		Security:            v.Security,
		HTTPMethod:          v.HTTPMethod,
		Path:                v.Path,
		SchemaVersion:       v.SchemaVersion,
		Schema:              v.Schema,
		CreatedAt:           v.CreatedAt,
		UpdatedAt:           v.UpdatedAt,
	}
	if v.Tags != nil {
		res.Tags = make([]string, len(v.Tags))
		for i, val := range v.Tags {
			res.Tags[i] = val
		}
	} else {
		res.Tags = []string{}
	}

	return res
}

// marshalToolsetsToolsetDetailsToToolsetDetailsResponseBody builds a value of
// type *ToolsetDetailsResponseBody from a value of type
// *toolsets.ToolsetDetails.
func marshalToolsetsToolsetDetailsToToolsetDetailsResponseBody(v *toolsets.ToolsetDetails) *ToolsetDetailsResponseBody {
	res := &ToolsetDetailsResponseBody{
		ID:                     v.ID,
		ProjectID:              v.ProjectID,
		OrganizationID:         v.OrganizationID,
		Name:                   v.Name,
		Slug:                   v.Slug,
		Description:            v.Description,
		DefaultEnvironmentSlug: v.DefaultEnvironmentSlug,
		CreatedAt:              v.CreatedAt,
		UpdatedAt:              v.UpdatedAt,
	}
	if v.RelevantEnvironmentVariables != nil {
		res.RelevantEnvironmentVariables = make([]string, len(v.RelevantEnvironmentVariables))
		for i, val := range v.RelevantEnvironmentVariables {
			res.RelevantEnvironmentVariables[i] = val
		}
	}
	if v.HTTPTools != nil {
		res.HTTPTools = make([]*HTTPToolDefinitionResponseBody, len(v.HTTPTools))
		for i, val := range v.HTTPTools {
			res.HTTPTools[i] = marshalToolsetsHTTPToolDefinitionToHTTPToolDefinitionResponseBody(val)
		}
	} else {
		res.HTTPTools = []*HTTPToolDefinitionResponseBody{}
	}

	return res
}
