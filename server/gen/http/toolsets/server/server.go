// Code generated by goa v3.20.0, DO NOT EDIT.
//
// toolsets HTTP server
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package server

import (
	"context"
	"net/http"

	toolsets "github.com/speakeasy-api/gram/gen/toolsets"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the toolsets service endpoint HTTP handlers.
type Server struct {
	Mounts            []*MountPoint
	CreateToolset     http.Handler
	ListToolsets      http.Handler
	UpdateToolset     http.Handler
	DeleteToolset     http.Handler
	GetToolsetDetails http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the toolsets service endpoints using
// the provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *toolsets.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"CreateToolset", "POST", "/rpc/toolsets.create"},
			{"ListToolsets", "GET", "/rpc/toolsets.list"},
			{"UpdateToolset", "POST", "/rpc/toolsets.update/{id}"},
			{"DeleteToolset", "DELETE", "/rpc/toolsets.delete/{id}"},
			{"GetToolsetDetails", "GET", "/rpc/toolsets.get/{id}"},
		},
		CreateToolset:     NewCreateToolsetHandler(e.CreateToolset, mux, decoder, encoder, errhandler, formatter),
		ListToolsets:      NewListToolsetsHandler(e.ListToolsets, mux, decoder, encoder, errhandler, formatter),
		UpdateToolset:     NewUpdateToolsetHandler(e.UpdateToolset, mux, decoder, encoder, errhandler, formatter),
		DeleteToolset:     NewDeleteToolsetHandler(e.DeleteToolset, mux, decoder, encoder, errhandler, formatter),
		GetToolsetDetails: NewGetToolsetDetailsHandler(e.GetToolsetDetails, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "toolsets" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.CreateToolset = m(s.CreateToolset)
	s.ListToolsets = m(s.ListToolsets)
	s.UpdateToolset = m(s.UpdateToolset)
	s.DeleteToolset = m(s.DeleteToolset)
	s.GetToolsetDetails = m(s.GetToolsetDetails)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return toolsets.MethodNames[:] }

// Mount configures the mux to serve the toolsets endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountCreateToolsetHandler(mux, h.CreateToolset)
	MountListToolsetsHandler(mux, h.ListToolsets)
	MountUpdateToolsetHandler(mux, h.UpdateToolset)
	MountDeleteToolsetHandler(mux, h.DeleteToolset)
	MountGetToolsetDetailsHandler(mux, h.GetToolsetDetails)
}

// Mount configures the mux to serve the toolsets endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountCreateToolsetHandler configures the mux to serve the "toolsets" service
// "createToolset" endpoint.
func MountCreateToolsetHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/rpc/toolsets.create", f)
}

// NewCreateToolsetHandler creates a HTTP handler which loads the HTTP request
// and calls the "toolsets" service "createToolset" endpoint.
func NewCreateToolsetHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateToolsetRequest(mux, decoder)
		encodeResponse = EncodeCreateToolsetResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "createToolset")
		ctx = context.WithValue(ctx, goa.ServiceKey, "toolsets")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountListToolsetsHandler configures the mux to serve the "toolsets" service
// "listToolsets" endpoint.
func MountListToolsetsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/rpc/toolsets.list", f)
}

// NewListToolsetsHandler creates a HTTP handler which loads the HTTP request
// and calls the "toolsets" service "listToolsets" endpoint.
func NewListToolsetsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeListToolsetsRequest(mux, decoder)
		encodeResponse = EncodeListToolsetsResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "listToolsets")
		ctx = context.WithValue(ctx, goa.ServiceKey, "toolsets")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateToolsetHandler configures the mux to serve the "toolsets" service
// "updateToolset" endpoint.
func MountUpdateToolsetHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/rpc/toolsets.update/{id}", f)
}

// NewUpdateToolsetHandler creates a HTTP handler which loads the HTTP request
// and calls the "toolsets" service "updateToolset" endpoint.
func NewUpdateToolsetHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateToolsetRequest(mux, decoder)
		encodeResponse = EncodeUpdateToolsetResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "updateToolset")
		ctx = context.WithValue(ctx, goa.ServiceKey, "toolsets")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteToolsetHandler configures the mux to serve the "toolsets" service
// "deleteToolset" endpoint.
func MountDeleteToolsetHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/rpc/toolsets.delete/{id}", f)
}

// NewDeleteToolsetHandler creates a HTTP handler which loads the HTTP request
// and calls the "toolsets" service "deleteToolset" endpoint.
func NewDeleteToolsetHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteToolsetRequest(mux, decoder)
		encodeResponse = EncodeDeleteToolsetResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "deleteToolset")
		ctx = context.WithValue(ctx, goa.ServiceKey, "toolsets")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetToolsetDetailsHandler configures the mux to serve the "toolsets"
// service "getToolsetDetails" endpoint.
func MountGetToolsetDetailsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/rpc/toolsets.get/{id}", f)
}

// NewGetToolsetDetailsHandler creates a HTTP handler which loads the HTTP
// request and calls the "toolsets" service "getToolsetDetails" endpoint.
func NewGetToolsetDetailsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetToolsetDetailsRequest(mux, decoder)
		encodeResponse = EncodeGetToolsetDetailsResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getToolsetDetails")
		ctx = context.WithValue(ctx, goa.ServiceKey, "toolsets")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}
