// Code generated by goa v3.21.1, DO NOT EDIT.
//
// toolsets HTTP server types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/server/design

package server

import (
	"unicode/utf8"

	toolsets "github.com/speakeasy-api/gram/server/gen/toolsets"
	types "github.com/speakeasy-api/gram/server/gen/types"
	goa "goa.design/goa/v3/pkg"
)

// CreateToolsetRequestBody is the type of the "toolsets" service
// "createToolset" endpoint HTTP request body.
type CreateToolsetRequestBody struct {
	// The name of the toolset
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the toolset
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// List of HTTP tool names to include
	HTTPToolNames []string `form:"http_tool_names,omitempty" json:"http_tool_names,omitempty" xml:"http_tool_names,omitempty"`
	// The slug of the environment to use as the default for the toolset
	DefaultEnvironmentSlug *string `form:"default_environment_slug,omitempty" json:"default_environment_slug,omitempty" xml:"default_environment_slug,omitempty"`
}

// UpdateToolsetRequestBody is the type of the "toolsets" service
// "updateToolset" endpoint HTTP request body.
type UpdateToolsetRequestBody struct {
	// The new name of the toolset
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The new description of the toolset
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The slug of the environment to use as the default for the toolset
	DefaultEnvironmentSlug *string `form:"default_environment_slug,omitempty" json:"default_environment_slug,omitempty" xml:"default_environment_slug,omitempty"`
	// List of HTTP tool names to include
	HTTPToolNames []string `form:"http_tool_names,omitempty" json:"http_tool_names,omitempty" xml:"http_tool_names,omitempty"`
	// List of prompt template names to include
	PromptTemplateNames []string `form:"prompt_template_names,omitempty" json:"prompt_template_names,omitempty" xml:"prompt_template_names,omitempty"`
	// The slug of the MCP to use for the toolset
	McpSlug *string `form:"mcp_slug,omitempty" json:"mcp_slug,omitempty" xml:"mcp_slug,omitempty"`
	// Whether the toolset is public in MCP
	McpIsPublic *bool `form:"mcp_is_public,omitempty" json:"mcp_is_public,omitempty" xml:"mcp_is_public,omitempty"`
	// The ID of the custom domain to use for the toolset
	CustomDomainID *string `form:"custom_domain_id,omitempty" json:"custom_domain_id,omitempty" xml:"custom_domain_id,omitempty"`
}

// CreateToolsetResponseBody is the type of the "toolsets" service
// "createToolset" endpoint HTTP response body.
type CreateToolsetResponseBody struct {
	// The ID of the toolset
	ID string `form:"id" json:"id" xml:"id"`
	// The project ID this toolset belongs to
	ProjectID string `form:"project_id" json:"project_id" xml:"project_id"`
	// The organization ID this toolset belongs to
	OrganizationID string `form:"organization_id" json:"organization_id" xml:"organization_id"`
	// The name of the toolset
	Name string `form:"name" json:"name" xml:"name"`
	// The slug of the toolset
	Slug string `form:"slug" json:"slug" xml:"slug"`
	// Description of the toolset
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The slug of the environment to use as the default for the toolset
	DefaultEnvironmentSlug *string `form:"default_environment_slug,omitempty" json:"default_environment_slug,omitempty" xml:"default_environment_slug,omitempty"`
	// The environment variables that are relevant to the toolset
	RelevantEnvironmentVariables []string `form:"relevant_environment_variables,omitempty" json:"relevant_environment_variables,omitempty" xml:"relevant_environment_variables,omitempty"`
	// The HTTP tools in this toolset
	HTTPTools []*HTTPToolDefinitionResponseBody `form:"http_tools" json:"http_tools" xml:"http_tools"`
	// The prompt templates in this toolset
	PromptTemplates []*PromptTemplateResponseBody `form:"prompt_templates" json:"prompt_templates" xml:"prompt_templates"`
	// The slug of the MCP to use for the toolset
	McpSlug *string `form:"mcp_slug,omitempty" json:"mcp_slug,omitempty" xml:"mcp_slug,omitempty"`
	// Whether the toolset is public in MCP
	McpIsPublic *bool `form:"mcp_is_public,omitempty" json:"mcp_is_public,omitempty" xml:"mcp_is_public,omitempty"`
	// The ID of the custom domain to use for the toolset
	CustomDomainID *string `form:"custom_domain_id,omitempty" json:"custom_domain_id,omitempty" xml:"custom_domain_id,omitempty"`
	// When the toolset was created.
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// When the toolset was last updated.
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// ListToolsetsResponseBody is the type of the "toolsets" service
// "listToolsets" endpoint HTTP response body.
type ListToolsetsResponseBody struct {
	// The list of toolsets
	Toolsets []*ToolsetResponseBody `form:"toolsets" json:"toolsets" xml:"toolsets"`
}

// UpdateToolsetResponseBody is the type of the "toolsets" service
// "updateToolset" endpoint HTTP response body.
type UpdateToolsetResponseBody struct {
	// The ID of the toolset
	ID string `form:"id" json:"id" xml:"id"`
	// The project ID this toolset belongs to
	ProjectID string `form:"project_id" json:"project_id" xml:"project_id"`
	// The organization ID this toolset belongs to
	OrganizationID string `form:"organization_id" json:"organization_id" xml:"organization_id"`
	// The name of the toolset
	Name string `form:"name" json:"name" xml:"name"`
	// The slug of the toolset
	Slug string `form:"slug" json:"slug" xml:"slug"`
	// Description of the toolset
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The slug of the environment to use as the default for the toolset
	DefaultEnvironmentSlug *string `form:"default_environment_slug,omitempty" json:"default_environment_slug,omitempty" xml:"default_environment_slug,omitempty"`
	// The environment variables that are relevant to the toolset
	RelevantEnvironmentVariables []string `form:"relevant_environment_variables,omitempty" json:"relevant_environment_variables,omitempty" xml:"relevant_environment_variables,omitempty"`
	// The HTTP tools in this toolset
	HTTPTools []*HTTPToolDefinitionResponseBody `form:"http_tools" json:"http_tools" xml:"http_tools"`
	// The prompt templates in this toolset
	PromptTemplates []*PromptTemplateResponseBody `form:"prompt_templates" json:"prompt_templates" xml:"prompt_templates"`
	// The slug of the MCP to use for the toolset
	McpSlug *string `form:"mcp_slug,omitempty" json:"mcp_slug,omitempty" xml:"mcp_slug,omitempty"`
	// Whether the toolset is public in MCP
	McpIsPublic *bool `form:"mcp_is_public,omitempty" json:"mcp_is_public,omitempty" xml:"mcp_is_public,omitempty"`
	// The ID of the custom domain to use for the toolset
	CustomDomainID *string `form:"custom_domain_id,omitempty" json:"custom_domain_id,omitempty" xml:"custom_domain_id,omitempty"`
	// When the toolset was created.
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// When the toolset was last updated.
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// GetToolsetResponseBody is the type of the "toolsets" service "getToolset"
// endpoint HTTP response body.
type GetToolsetResponseBody struct {
	// The ID of the toolset
	ID string `form:"id" json:"id" xml:"id"`
	// The project ID this toolset belongs to
	ProjectID string `form:"project_id" json:"project_id" xml:"project_id"`
	// The organization ID this toolset belongs to
	OrganizationID string `form:"organization_id" json:"organization_id" xml:"organization_id"`
	// The name of the toolset
	Name string `form:"name" json:"name" xml:"name"`
	// The slug of the toolset
	Slug string `form:"slug" json:"slug" xml:"slug"`
	// Description of the toolset
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The slug of the environment to use as the default for the toolset
	DefaultEnvironmentSlug *string `form:"default_environment_slug,omitempty" json:"default_environment_slug,omitempty" xml:"default_environment_slug,omitempty"`
	// The environment variables that are relevant to the toolset
	RelevantEnvironmentVariables []string `form:"relevant_environment_variables,omitempty" json:"relevant_environment_variables,omitempty" xml:"relevant_environment_variables,omitempty"`
	// The HTTP tools in this toolset
	HTTPTools []*HTTPToolDefinitionResponseBody `form:"http_tools" json:"http_tools" xml:"http_tools"`
	// The prompt templates in this toolset
	PromptTemplates []*PromptTemplateResponseBody `form:"prompt_templates" json:"prompt_templates" xml:"prompt_templates"`
	// The slug of the MCP to use for the toolset
	McpSlug *string `form:"mcp_slug,omitempty" json:"mcp_slug,omitempty" xml:"mcp_slug,omitempty"`
	// Whether the toolset is public in MCP
	McpIsPublic *bool `form:"mcp_is_public,omitempty" json:"mcp_is_public,omitempty" xml:"mcp_is_public,omitempty"`
	// The ID of the custom domain to use for the toolset
	CustomDomainID *string `form:"custom_domain_id,omitempty" json:"custom_domain_id,omitempty" xml:"custom_domain_id,omitempty"`
	// When the toolset was created.
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// When the toolset was last updated.
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// CreateToolsetUnauthorizedResponseBody is the type of the "toolsets" service
// "createToolset" endpoint HTTP response body for the "unauthorized" error.
type CreateToolsetUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateToolsetForbiddenResponseBody is the type of the "toolsets" service
// "createToolset" endpoint HTTP response body for the "forbidden" error.
type CreateToolsetForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateToolsetBadRequestResponseBody is the type of the "toolsets" service
// "createToolset" endpoint HTTP response body for the "bad_request" error.
type CreateToolsetBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateToolsetNotFoundResponseBody is the type of the "toolsets" service
// "createToolset" endpoint HTTP response body for the "not_found" error.
type CreateToolsetNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateToolsetConflictResponseBody is the type of the "toolsets" service
// "createToolset" endpoint HTTP response body for the "conflict" error.
type CreateToolsetConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateToolsetUnsupportedMediaResponseBody is the type of the "toolsets"
// service "createToolset" endpoint HTTP response body for the
// "unsupported_media" error.
type CreateToolsetUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateToolsetInvalidResponseBody is the type of the "toolsets" service
// "createToolset" endpoint HTTP response body for the "invalid" error.
type CreateToolsetInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateToolsetInvariantViolationResponseBody is the type of the "toolsets"
// service "createToolset" endpoint HTTP response body for the
// "invariant_violation" error.
type CreateToolsetInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateToolsetUnexpectedResponseBody is the type of the "toolsets" service
// "createToolset" endpoint HTTP response body for the "unexpected" error.
type CreateToolsetUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateToolsetGatewayErrorResponseBody is the type of the "toolsets" service
// "createToolset" endpoint HTTP response body for the "gateway_error" error.
type CreateToolsetGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListToolsetsUnauthorizedResponseBody is the type of the "toolsets" service
// "listToolsets" endpoint HTTP response body for the "unauthorized" error.
type ListToolsetsUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListToolsetsForbiddenResponseBody is the type of the "toolsets" service
// "listToolsets" endpoint HTTP response body for the "forbidden" error.
type ListToolsetsForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListToolsetsBadRequestResponseBody is the type of the "toolsets" service
// "listToolsets" endpoint HTTP response body for the "bad_request" error.
type ListToolsetsBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListToolsetsNotFoundResponseBody is the type of the "toolsets" service
// "listToolsets" endpoint HTTP response body for the "not_found" error.
type ListToolsetsNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListToolsetsConflictResponseBody is the type of the "toolsets" service
// "listToolsets" endpoint HTTP response body for the "conflict" error.
type ListToolsetsConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListToolsetsUnsupportedMediaResponseBody is the type of the "toolsets"
// service "listToolsets" endpoint HTTP response body for the
// "unsupported_media" error.
type ListToolsetsUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListToolsetsInvalidResponseBody is the type of the "toolsets" service
// "listToolsets" endpoint HTTP response body for the "invalid" error.
type ListToolsetsInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListToolsetsInvariantViolationResponseBody is the type of the "toolsets"
// service "listToolsets" endpoint HTTP response body for the
// "invariant_violation" error.
type ListToolsetsInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListToolsetsUnexpectedResponseBody is the type of the "toolsets" service
// "listToolsets" endpoint HTTP response body for the "unexpected" error.
type ListToolsetsUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListToolsetsGatewayErrorResponseBody is the type of the "toolsets" service
// "listToolsets" endpoint HTTP response body for the "gateway_error" error.
type ListToolsetsGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateToolsetUnauthorizedResponseBody is the type of the "toolsets" service
// "updateToolset" endpoint HTTP response body for the "unauthorized" error.
type UpdateToolsetUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateToolsetForbiddenResponseBody is the type of the "toolsets" service
// "updateToolset" endpoint HTTP response body for the "forbidden" error.
type UpdateToolsetForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateToolsetBadRequestResponseBody is the type of the "toolsets" service
// "updateToolset" endpoint HTTP response body for the "bad_request" error.
type UpdateToolsetBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateToolsetNotFoundResponseBody is the type of the "toolsets" service
// "updateToolset" endpoint HTTP response body for the "not_found" error.
type UpdateToolsetNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateToolsetConflictResponseBody is the type of the "toolsets" service
// "updateToolset" endpoint HTTP response body for the "conflict" error.
type UpdateToolsetConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateToolsetUnsupportedMediaResponseBody is the type of the "toolsets"
// service "updateToolset" endpoint HTTP response body for the
// "unsupported_media" error.
type UpdateToolsetUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateToolsetInvalidResponseBody is the type of the "toolsets" service
// "updateToolset" endpoint HTTP response body for the "invalid" error.
type UpdateToolsetInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateToolsetInvariantViolationResponseBody is the type of the "toolsets"
// service "updateToolset" endpoint HTTP response body for the
// "invariant_violation" error.
type UpdateToolsetInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateToolsetUnexpectedResponseBody is the type of the "toolsets" service
// "updateToolset" endpoint HTTP response body for the "unexpected" error.
type UpdateToolsetUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateToolsetGatewayErrorResponseBody is the type of the "toolsets" service
// "updateToolset" endpoint HTTP response body for the "gateway_error" error.
type UpdateToolsetGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteToolsetUnauthorizedResponseBody is the type of the "toolsets" service
// "deleteToolset" endpoint HTTP response body for the "unauthorized" error.
type DeleteToolsetUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteToolsetForbiddenResponseBody is the type of the "toolsets" service
// "deleteToolset" endpoint HTTP response body for the "forbidden" error.
type DeleteToolsetForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteToolsetBadRequestResponseBody is the type of the "toolsets" service
// "deleteToolset" endpoint HTTP response body for the "bad_request" error.
type DeleteToolsetBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteToolsetNotFoundResponseBody is the type of the "toolsets" service
// "deleteToolset" endpoint HTTP response body for the "not_found" error.
type DeleteToolsetNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteToolsetConflictResponseBody is the type of the "toolsets" service
// "deleteToolset" endpoint HTTP response body for the "conflict" error.
type DeleteToolsetConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteToolsetUnsupportedMediaResponseBody is the type of the "toolsets"
// service "deleteToolset" endpoint HTTP response body for the
// "unsupported_media" error.
type DeleteToolsetUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteToolsetInvalidResponseBody is the type of the "toolsets" service
// "deleteToolset" endpoint HTTP response body for the "invalid" error.
type DeleteToolsetInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteToolsetInvariantViolationResponseBody is the type of the "toolsets"
// service "deleteToolset" endpoint HTTP response body for the
// "invariant_violation" error.
type DeleteToolsetInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteToolsetUnexpectedResponseBody is the type of the "toolsets" service
// "deleteToolset" endpoint HTTP response body for the "unexpected" error.
type DeleteToolsetUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteToolsetGatewayErrorResponseBody is the type of the "toolsets" service
// "deleteToolset" endpoint HTTP response body for the "gateway_error" error.
type DeleteToolsetGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetToolsetUnauthorizedResponseBody is the type of the "toolsets" service
// "getToolset" endpoint HTTP response body for the "unauthorized" error.
type GetToolsetUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetToolsetForbiddenResponseBody is the type of the "toolsets" service
// "getToolset" endpoint HTTP response body for the "forbidden" error.
type GetToolsetForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetToolsetBadRequestResponseBody is the type of the "toolsets" service
// "getToolset" endpoint HTTP response body for the "bad_request" error.
type GetToolsetBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetToolsetNotFoundResponseBody is the type of the "toolsets" service
// "getToolset" endpoint HTTP response body for the "not_found" error.
type GetToolsetNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetToolsetConflictResponseBody is the type of the "toolsets" service
// "getToolset" endpoint HTTP response body for the "conflict" error.
type GetToolsetConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetToolsetUnsupportedMediaResponseBody is the type of the "toolsets" service
// "getToolset" endpoint HTTP response body for the "unsupported_media" error.
type GetToolsetUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetToolsetInvalidResponseBody is the type of the "toolsets" service
// "getToolset" endpoint HTTP response body for the "invalid" error.
type GetToolsetInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetToolsetInvariantViolationResponseBody is the type of the "toolsets"
// service "getToolset" endpoint HTTP response body for the
// "invariant_violation" error.
type GetToolsetInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetToolsetUnexpectedResponseBody is the type of the "toolsets" service
// "getToolset" endpoint HTTP response body for the "unexpected" error.
type GetToolsetUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetToolsetGatewayErrorResponseBody is the type of the "toolsets" service
// "getToolset" endpoint HTTP response body for the "gateway_error" error.
type GetToolsetGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CheckMCPSlugAvailabilityUnauthorizedResponseBody is the type of the
// "toolsets" service "checkMCPSlugAvailability" endpoint HTTP response body
// for the "unauthorized" error.
type CheckMCPSlugAvailabilityUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CheckMCPSlugAvailabilityForbiddenResponseBody is the type of the "toolsets"
// service "checkMCPSlugAvailability" endpoint HTTP response body for the
// "forbidden" error.
type CheckMCPSlugAvailabilityForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CheckMCPSlugAvailabilityBadRequestResponseBody is the type of the "toolsets"
// service "checkMCPSlugAvailability" endpoint HTTP response body for the
// "bad_request" error.
type CheckMCPSlugAvailabilityBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CheckMCPSlugAvailabilityNotFoundResponseBody is the type of the "toolsets"
// service "checkMCPSlugAvailability" endpoint HTTP response body for the
// "not_found" error.
type CheckMCPSlugAvailabilityNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CheckMCPSlugAvailabilityConflictResponseBody is the type of the "toolsets"
// service "checkMCPSlugAvailability" endpoint HTTP response body for the
// "conflict" error.
type CheckMCPSlugAvailabilityConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CheckMCPSlugAvailabilityUnsupportedMediaResponseBody is the type of the
// "toolsets" service "checkMCPSlugAvailability" endpoint HTTP response body
// for the "unsupported_media" error.
type CheckMCPSlugAvailabilityUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CheckMCPSlugAvailabilityInvalidResponseBody is the type of the "toolsets"
// service "checkMCPSlugAvailability" endpoint HTTP response body for the
// "invalid" error.
type CheckMCPSlugAvailabilityInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CheckMCPSlugAvailabilityInvariantViolationResponseBody is the type of the
// "toolsets" service "checkMCPSlugAvailability" endpoint HTTP response body
// for the "invariant_violation" error.
type CheckMCPSlugAvailabilityInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CheckMCPSlugAvailabilityUnexpectedResponseBody is the type of the "toolsets"
// service "checkMCPSlugAvailability" endpoint HTTP response body for the
// "unexpected" error.
type CheckMCPSlugAvailabilityUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CheckMCPSlugAvailabilityGatewayErrorResponseBody is the type of the
// "toolsets" service "checkMCPSlugAvailability" endpoint HTTP response body
// for the "gateway_error" error.
type CheckMCPSlugAvailabilityGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// HTTPToolDefinitionResponseBody is used to define fields on response body
// types.
type HTTPToolDefinitionResponseBody struct {
	// The ID of the HTTP tool
	ID string `form:"id" json:"id" xml:"id"`
	// The ID of the project
	ProjectID string `form:"project_id" json:"project_id" xml:"project_id"`
	// The ID of the deployment
	DeploymentID string `form:"deployment_id" json:"deployment_id" xml:"deployment_id"`
	// The name of the tool
	Name string `form:"name" json:"name" xml:"name"`
	// The canonical name of the tool. Will be the same as the name if there is no
	// variation.
	CanonicalName string `form:"canonical_name" json:"canonical_name" xml:"canonical_name"`
	// Summary of the tool
	Summary string `form:"summary" json:"summary" xml:"summary"`
	// Description of the tool
	Description string `form:"description" json:"description" xml:"description"`
	// Confirmation mode for the tool
	Confirm string `form:"confirm" json:"confirm" xml:"confirm"`
	// Prompt for the confirmation
	ConfirmPrompt *string `form:"confirm_prompt,omitempty" json:"confirm_prompt,omitempty" xml:"confirm_prompt,omitempty"`
	// Summarizer for the tool
	Summarizer *string `form:"summarizer,omitempty" json:"summarizer,omitempty" xml:"summarizer,omitempty"`
	// Response filter metadata for the tool
	ResponseFilter *ResponseFilterResponseBody `form:"response_filter,omitempty" json:"response_filter,omitempty" xml:"response_filter,omitempty"`
	// The ID of the OpenAPI v3 document
	Openapiv3DocumentID *string `form:"openapiv3_document_id,omitempty" json:"openapiv3_document_id,omitempty" xml:"openapiv3_document_id,omitempty"`
	// OpenAPI v3 operation
	Openapiv3Operation *string `form:"openapiv3_operation,omitempty" json:"openapiv3_operation,omitempty" xml:"openapiv3_operation,omitempty"`
	// The tags list for this http tool
	Tags []string `form:"tags" json:"tags" xml:"tags"`
	// Security requirements for the underlying HTTP endpoint
	Security *string `form:"security,omitempty" json:"security,omitempty" xml:"security,omitempty"`
	// The default server URL for the tool
	DefaultServerURL *string `form:"default_server_url,omitempty" json:"default_server_url,omitempty" xml:"default_server_url,omitempty"`
	// HTTP method for the request
	HTTPMethod string `form:"http_method" json:"http_method" xml:"http_method"`
	// Path for the request
	Path string `form:"path" json:"path" xml:"path"`
	// Version of the schema
	SchemaVersion *string `form:"schema_version,omitempty" json:"schema_version,omitempty" xml:"schema_version,omitempty"`
	// JSON schema for the request
	Schema string `form:"schema" json:"schema" xml:"schema"`
	// The name of the source package
	PackageName *string `form:"package_name,omitempty" json:"package_name,omitempty" xml:"package_name,omitempty"`
	// The creation date of the tool.
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// The last update date of the tool.
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
	// The original details of a tool, excluding any variations
	Canonical *CanonicalToolAttributesResponseBody `form:"canonical,omitempty" json:"canonical,omitempty" xml:"canonical,omitempty"`
	// The variation details of a tool. Only includes explicitly varied fields.
	Variation *ToolVariationResponseBody `form:"variation,omitempty" json:"variation,omitempty" xml:"variation,omitempty"`
}

// ResponseFilterResponseBody is used to define fields on response body types.
type ResponseFilterResponseBody struct {
	// Response filter type for the tool
	Type string `form:"type" json:"type" xml:"type"`
	// Status codes to filter for
	StatusCodes []string `form:"status_codes" json:"status_codes" xml:"status_codes"`
	// Content types to filter for
	ContentTypes []string `form:"content_types" json:"content_types" xml:"content_types"`
}

// CanonicalToolAttributesResponseBody is used to define fields on response
// body types.
type CanonicalToolAttributesResponseBody struct {
	// The ID of the variation that was applied to the tool
	VariationID string `form:"variation_id" json:"variation_id" xml:"variation_id"`
	// The name of the tool
	Name string `form:"name" json:"name" xml:"name"`
	// Summary of the tool
	Summary *string `form:"summary,omitempty" json:"summary,omitempty" xml:"summary,omitempty"`
	// Description of the tool
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Confirmation mode for the tool
	Confirm *string `form:"confirm,omitempty" json:"confirm,omitempty" xml:"confirm,omitempty"`
	// Prompt for the confirmation
	ConfirmPrompt *string `form:"confirm_prompt,omitempty" json:"confirm_prompt,omitempty" xml:"confirm_prompt,omitempty"`
	// Summarizer for the tool
	Summarizer *string `form:"summarizer,omitempty" json:"summarizer,omitempty" xml:"summarizer,omitempty"`
	// The tags list for this http tool
	Tags []string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
}

// ToolVariationResponseBody is used to define fields on response body types.
type ToolVariationResponseBody struct {
	// The ID of the tool variation
	ID string `form:"id" json:"id" xml:"id"`
	// The ID of the tool variation group
	GroupID string `form:"group_id" json:"group_id" xml:"group_id"`
	// The name of the source tool
	SrcToolName string `form:"src_tool_name" json:"src_tool_name" xml:"src_tool_name"`
	// The confirmation mode for the tool variation
	Confirm *string `form:"confirm,omitempty" json:"confirm,omitempty" xml:"confirm,omitempty"`
	// The confirmation prompt for the tool variation
	ConfirmPrompt *string `form:"confirm_prompt,omitempty" json:"confirm_prompt,omitempty" xml:"confirm_prompt,omitempty"`
	// The name of the tool variation
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The summary of the tool variation
	Summary *string `form:"summary,omitempty" json:"summary,omitempty" xml:"summary,omitempty"`
	// The description of the tool variation
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The tags of the tool variation
	Tags []string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
	// The summarizer of the tool variation
	Summarizer *string `form:"summarizer,omitempty" json:"summarizer,omitempty" xml:"summarizer,omitempty"`
	// The creation date of the tool variation
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// The last update date of the tool variation
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// PromptTemplateResponseBody is used to define fields on response body types.
type PromptTemplateResponseBody struct {
	// The ID of the prompt template
	ID string `form:"id" json:"id" xml:"id"`
	// The revision tree ID for the prompt template
	HistoryID string `form:"history_id" json:"history_id" xml:"history_id"`
	// The previous version of the prompt template to use as predecessor
	PredecessorID *string `form:"predecessor_id,omitempty" json:"predecessor_id,omitempty" xml:"predecessor_id,omitempty"`
	// The name of the prompt template
	Name string `form:"name" json:"name" xml:"name"`
	// The template content
	Prompt string `form:"prompt" json:"prompt" xml:"prompt"`
	// The description of the prompt template
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The JSON Schema defining the placeholders found in the prompt template
	Arguments *string `form:"arguments,omitempty" json:"arguments,omitempty" xml:"arguments,omitempty"`
	// The template engine
	Engine string `form:"engine" json:"engine" xml:"engine"`
	// The kind of prompt the template is used for
	Kind string `form:"kind" json:"kind" xml:"kind"`
	// The suggested tool names associated with the prompt template
	ToolsHint []string `form:"tools_hint" json:"tools_hint" xml:"tools_hint"`
	// The creation date of the prompt template.
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// The last update date of the prompt template.
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// ToolsetResponseBody is used to define fields on response body types.
type ToolsetResponseBody struct {
	// The ID of the toolset
	ID string `form:"id" json:"id" xml:"id"`
	// The project ID this toolset belongs to
	ProjectID string `form:"project_id" json:"project_id" xml:"project_id"`
	// The organization ID this toolset belongs to
	OrganizationID string `form:"organization_id" json:"organization_id" xml:"organization_id"`
	// The name of the toolset
	Name string `form:"name" json:"name" xml:"name"`
	// The slug of the toolset
	Slug string `form:"slug" json:"slug" xml:"slug"`
	// Description of the toolset
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The slug of the environment to use as the default for the toolset
	DefaultEnvironmentSlug *string `form:"default_environment_slug,omitempty" json:"default_environment_slug,omitempty" xml:"default_environment_slug,omitempty"`
	// The environment variables that are relevant to the toolset
	RelevantEnvironmentVariables []string `form:"relevant_environment_variables,omitempty" json:"relevant_environment_variables,omitempty" xml:"relevant_environment_variables,omitempty"`
	// The HTTP tools in this toolset
	HTTPTools []*HTTPToolDefinitionResponseBody `form:"http_tools" json:"http_tools" xml:"http_tools"`
	// The prompt templates in this toolset
	PromptTemplates []*PromptTemplateResponseBody `form:"prompt_templates" json:"prompt_templates" xml:"prompt_templates"`
	// The slug of the MCP to use for the toolset
	McpSlug *string `form:"mcp_slug,omitempty" json:"mcp_slug,omitempty" xml:"mcp_slug,omitempty"`
	// Whether the toolset is public in MCP
	McpIsPublic *bool `form:"mcp_is_public,omitempty" json:"mcp_is_public,omitempty" xml:"mcp_is_public,omitempty"`
	// The ID of the custom domain to use for the toolset
	CustomDomainID *string `form:"custom_domain_id,omitempty" json:"custom_domain_id,omitempty" xml:"custom_domain_id,omitempty"`
	// When the toolset was created.
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// When the toolset was last updated.
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// NewCreateToolsetResponseBody builds the HTTP response body from the result
// of the "createToolset" endpoint of the "toolsets" service.
func NewCreateToolsetResponseBody(res *types.Toolset) *CreateToolsetResponseBody {
	body := &CreateToolsetResponseBody{
		ID:             res.ID,
		ProjectID:      res.ProjectID,
		OrganizationID: res.OrganizationID,
		Name:           res.Name,
		Slug:           string(res.Slug),
		Description:    res.Description,
		McpIsPublic:    res.McpIsPublic,
		CustomDomainID: res.CustomDomainID,
		CreatedAt:      res.CreatedAt,
		UpdatedAt:      res.UpdatedAt,
	}
	if res.DefaultEnvironmentSlug != nil {
		defaultEnvironmentSlug := string(*res.DefaultEnvironmentSlug)
		body.DefaultEnvironmentSlug = &defaultEnvironmentSlug
	}
	if res.McpSlug != nil {
		mcpSlug := string(*res.McpSlug)
		body.McpSlug = &mcpSlug
	}
	if res.RelevantEnvironmentVariables != nil {
		body.RelevantEnvironmentVariables = make([]string, len(res.RelevantEnvironmentVariables))
		for i, val := range res.RelevantEnvironmentVariables {
			body.RelevantEnvironmentVariables[i] = val
		}
	}
	if res.HTTPTools != nil {
		body.HTTPTools = make([]*HTTPToolDefinitionResponseBody, len(res.HTTPTools))
		for i, val := range res.HTTPTools {
			body.HTTPTools[i] = marshalTypesHTTPToolDefinitionToHTTPToolDefinitionResponseBody(val)
		}
	} else {
		body.HTTPTools = []*HTTPToolDefinitionResponseBody{}
	}
	if res.PromptTemplates != nil {
		body.PromptTemplates = make([]*PromptTemplateResponseBody, len(res.PromptTemplates))
		for i, val := range res.PromptTemplates {
			body.PromptTemplates[i] = marshalTypesPromptTemplateToPromptTemplateResponseBody(val)
		}
	} else {
		body.PromptTemplates = []*PromptTemplateResponseBody{}
	}
	return body
}

// NewListToolsetsResponseBody builds the HTTP response body from the result of
// the "listToolsets" endpoint of the "toolsets" service.
func NewListToolsetsResponseBody(res *toolsets.ListToolsetsResult) *ListToolsetsResponseBody {
	body := &ListToolsetsResponseBody{}
	if res.Toolsets != nil {
		body.Toolsets = make([]*ToolsetResponseBody, len(res.Toolsets))
		for i, val := range res.Toolsets {
			body.Toolsets[i] = marshalTypesToolsetToToolsetResponseBody(val)
		}
	} else {
		body.Toolsets = []*ToolsetResponseBody{}
	}
	return body
}

// NewUpdateToolsetResponseBody builds the HTTP response body from the result
// of the "updateToolset" endpoint of the "toolsets" service.
func NewUpdateToolsetResponseBody(res *types.Toolset) *UpdateToolsetResponseBody {
	body := &UpdateToolsetResponseBody{
		ID:             res.ID,
		ProjectID:      res.ProjectID,
		OrganizationID: res.OrganizationID,
		Name:           res.Name,
		Slug:           string(res.Slug),
		Description:    res.Description,
		McpIsPublic:    res.McpIsPublic,
		CustomDomainID: res.CustomDomainID,
		CreatedAt:      res.CreatedAt,
		UpdatedAt:      res.UpdatedAt,
	}
	if res.DefaultEnvironmentSlug != nil {
		defaultEnvironmentSlug := string(*res.DefaultEnvironmentSlug)
		body.DefaultEnvironmentSlug = &defaultEnvironmentSlug
	}
	if res.McpSlug != nil {
		mcpSlug := string(*res.McpSlug)
		body.McpSlug = &mcpSlug
	}
	if res.RelevantEnvironmentVariables != nil {
		body.RelevantEnvironmentVariables = make([]string, len(res.RelevantEnvironmentVariables))
		for i, val := range res.RelevantEnvironmentVariables {
			body.RelevantEnvironmentVariables[i] = val
		}
	}
	if res.HTTPTools != nil {
		body.HTTPTools = make([]*HTTPToolDefinitionResponseBody, len(res.HTTPTools))
		for i, val := range res.HTTPTools {
			body.HTTPTools[i] = marshalTypesHTTPToolDefinitionToHTTPToolDefinitionResponseBody(val)
		}
	} else {
		body.HTTPTools = []*HTTPToolDefinitionResponseBody{}
	}
	if res.PromptTemplates != nil {
		body.PromptTemplates = make([]*PromptTemplateResponseBody, len(res.PromptTemplates))
		for i, val := range res.PromptTemplates {
			body.PromptTemplates[i] = marshalTypesPromptTemplateToPromptTemplateResponseBody(val)
		}
	} else {
		body.PromptTemplates = []*PromptTemplateResponseBody{}
	}
	return body
}

// NewGetToolsetResponseBody builds the HTTP response body from the result of
// the "getToolset" endpoint of the "toolsets" service.
func NewGetToolsetResponseBody(res *types.Toolset) *GetToolsetResponseBody {
	body := &GetToolsetResponseBody{
		ID:             res.ID,
		ProjectID:      res.ProjectID,
		OrganizationID: res.OrganizationID,
		Name:           res.Name,
		Slug:           string(res.Slug),
		Description:    res.Description,
		McpIsPublic:    res.McpIsPublic,
		CustomDomainID: res.CustomDomainID,
		CreatedAt:      res.CreatedAt,
		UpdatedAt:      res.UpdatedAt,
	}
	if res.DefaultEnvironmentSlug != nil {
		defaultEnvironmentSlug := string(*res.DefaultEnvironmentSlug)
		body.DefaultEnvironmentSlug = &defaultEnvironmentSlug
	}
	if res.McpSlug != nil {
		mcpSlug := string(*res.McpSlug)
		body.McpSlug = &mcpSlug
	}
	if res.RelevantEnvironmentVariables != nil {
		body.RelevantEnvironmentVariables = make([]string, len(res.RelevantEnvironmentVariables))
		for i, val := range res.RelevantEnvironmentVariables {
			body.RelevantEnvironmentVariables[i] = val
		}
	}
	if res.HTTPTools != nil {
		body.HTTPTools = make([]*HTTPToolDefinitionResponseBody, len(res.HTTPTools))
		for i, val := range res.HTTPTools {
			body.HTTPTools[i] = marshalTypesHTTPToolDefinitionToHTTPToolDefinitionResponseBody(val)
		}
	} else {
		body.HTTPTools = []*HTTPToolDefinitionResponseBody{}
	}
	if res.PromptTemplates != nil {
		body.PromptTemplates = make([]*PromptTemplateResponseBody, len(res.PromptTemplates))
		for i, val := range res.PromptTemplates {
			body.PromptTemplates[i] = marshalTypesPromptTemplateToPromptTemplateResponseBody(val)
		}
	} else {
		body.PromptTemplates = []*PromptTemplateResponseBody{}
	}
	return body
}

// NewCreateToolsetUnauthorizedResponseBody builds the HTTP response body from
// the result of the "createToolset" endpoint of the "toolsets" service.
func NewCreateToolsetUnauthorizedResponseBody(res *goa.ServiceError) *CreateToolsetUnauthorizedResponseBody {
	body := &CreateToolsetUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateToolsetForbiddenResponseBody builds the HTTP response body from the
// result of the "createToolset" endpoint of the "toolsets" service.
func NewCreateToolsetForbiddenResponseBody(res *goa.ServiceError) *CreateToolsetForbiddenResponseBody {
	body := &CreateToolsetForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateToolsetBadRequestResponseBody builds the HTTP response body from
// the result of the "createToolset" endpoint of the "toolsets" service.
func NewCreateToolsetBadRequestResponseBody(res *goa.ServiceError) *CreateToolsetBadRequestResponseBody {
	body := &CreateToolsetBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateToolsetNotFoundResponseBody builds the HTTP response body from the
// result of the "createToolset" endpoint of the "toolsets" service.
func NewCreateToolsetNotFoundResponseBody(res *goa.ServiceError) *CreateToolsetNotFoundResponseBody {
	body := &CreateToolsetNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateToolsetConflictResponseBody builds the HTTP response body from the
// result of the "createToolset" endpoint of the "toolsets" service.
func NewCreateToolsetConflictResponseBody(res *goa.ServiceError) *CreateToolsetConflictResponseBody {
	body := &CreateToolsetConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateToolsetUnsupportedMediaResponseBody builds the HTTP response body
// from the result of the "createToolset" endpoint of the "toolsets" service.
func NewCreateToolsetUnsupportedMediaResponseBody(res *goa.ServiceError) *CreateToolsetUnsupportedMediaResponseBody {
	body := &CreateToolsetUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateToolsetInvalidResponseBody builds the HTTP response body from the
// result of the "createToolset" endpoint of the "toolsets" service.
func NewCreateToolsetInvalidResponseBody(res *goa.ServiceError) *CreateToolsetInvalidResponseBody {
	body := &CreateToolsetInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateToolsetInvariantViolationResponseBody builds the HTTP response body
// from the result of the "createToolset" endpoint of the "toolsets" service.
func NewCreateToolsetInvariantViolationResponseBody(res *goa.ServiceError) *CreateToolsetInvariantViolationResponseBody {
	body := &CreateToolsetInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateToolsetUnexpectedResponseBody builds the HTTP response body from
// the result of the "createToolset" endpoint of the "toolsets" service.
func NewCreateToolsetUnexpectedResponseBody(res *goa.ServiceError) *CreateToolsetUnexpectedResponseBody {
	body := &CreateToolsetUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateToolsetGatewayErrorResponseBody builds the HTTP response body from
// the result of the "createToolset" endpoint of the "toolsets" service.
func NewCreateToolsetGatewayErrorResponseBody(res *goa.ServiceError) *CreateToolsetGatewayErrorResponseBody {
	body := &CreateToolsetGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListToolsetsUnauthorizedResponseBody builds the HTTP response body from
// the result of the "listToolsets" endpoint of the "toolsets" service.
func NewListToolsetsUnauthorizedResponseBody(res *goa.ServiceError) *ListToolsetsUnauthorizedResponseBody {
	body := &ListToolsetsUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListToolsetsForbiddenResponseBody builds the HTTP response body from the
// result of the "listToolsets" endpoint of the "toolsets" service.
func NewListToolsetsForbiddenResponseBody(res *goa.ServiceError) *ListToolsetsForbiddenResponseBody {
	body := &ListToolsetsForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListToolsetsBadRequestResponseBody builds the HTTP response body from the
// result of the "listToolsets" endpoint of the "toolsets" service.
func NewListToolsetsBadRequestResponseBody(res *goa.ServiceError) *ListToolsetsBadRequestResponseBody {
	body := &ListToolsetsBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListToolsetsNotFoundResponseBody builds the HTTP response body from the
// result of the "listToolsets" endpoint of the "toolsets" service.
func NewListToolsetsNotFoundResponseBody(res *goa.ServiceError) *ListToolsetsNotFoundResponseBody {
	body := &ListToolsetsNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListToolsetsConflictResponseBody builds the HTTP response body from the
// result of the "listToolsets" endpoint of the "toolsets" service.
func NewListToolsetsConflictResponseBody(res *goa.ServiceError) *ListToolsetsConflictResponseBody {
	body := &ListToolsetsConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListToolsetsUnsupportedMediaResponseBody builds the HTTP response body
// from the result of the "listToolsets" endpoint of the "toolsets" service.
func NewListToolsetsUnsupportedMediaResponseBody(res *goa.ServiceError) *ListToolsetsUnsupportedMediaResponseBody {
	body := &ListToolsetsUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListToolsetsInvalidResponseBody builds the HTTP response body from the
// result of the "listToolsets" endpoint of the "toolsets" service.
func NewListToolsetsInvalidResponseBody(res *goa.ServiceError) *ListToolsetsInvalidResponseBody {
	body := &ListToolsetsInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListToolsetsInvariantViolationResponseBody builds the HTTP response body
// from the result of the "listToolsets" endpoint of the "toolsets" service.
func NewListToolsetsInvariantViolationResponseBody(res *goa.ServiceError) *ListToolsetsInvariantViolationResponseBody {
	body := &ListToolsetsInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListToolsetsUnexpectedResponseBody builds the HTTP response body from the
// result of the "listToolsets" endpoint of the "toolsets" service.
func NewListToolsetsUnexpectedResponseBody(res *goa.ServiceError) *ListToolsetsUnexpectedResponseBody {
	body := &ListToolsetsUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListToolsetsGatewayErrorResponseBody builds the HTTP response body from
// the result of the "listToolsets" endpoint of the "toolsets" service.
func NewListToolsetsGatewayErrorResponseBody(res *goa.ServiceError) *ListToolsetsGatewayErrorResponseBody {
	body := &ListToolsetsGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateToolsetUnauthorizedResponseBody builds the HTTP response body from
// the result of the "updateToolset" endpoint of the "toolsets" service.
func NewUpdateToolsetUnauthorizedResponseBody(res *goa.ServiceError) *UpdateToolsetUnauthorizedResponseBody {
	body := &UpdateToolsetUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateToolsetForbiddenResponseBody builds the HTTP response body from the
// result of the "updateToolset" endpoint of the "toolsets" service.
func NewUpdateToolsetForbiddenResponseBody(res *goa.ServiceError) *UpdateToolsetForbiddenResponseBody {
	body := &UpdateToolsetForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateToolsetBadRequestResponseBody builds the HTTP response body from
// the result of the "updateToolset" endpoint of the "toolsets" service.
func NewUpdateToolsetBadRequestResponseBody(res *goa.ServiceError) *UpdateToolsetBadRequestResponseBody {
	body := &UpdateToolsetBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateToolsetNotFoundResponseBody builds the HTTP response body from the
// result of the "updateToolset" endpoint of the "toolsets" service.
func NewUpdateToolsetNotFoundResponseBody(res *goa.ServiceError) *UpdateToolsetNotFoundResponseBody {
	body := &UpdateToolsetNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateToolsetConflictResponseBody builds the HTTP response body from the
// result of the "updateToolset" endpoint of the "toolsets" service.
func NewUpdateToolsetConflictResponseBody(res *goa.ServiceError) *UpdateToolsetConflictResponseBody {
	body := &UpdateToolsetConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateToolsetUnsupportedMediaResponseBody builds the HTTP response body
// from the result of the "updateToolset" endpoint of the "toolsets" service.
func NewUpdateToolsetUnsupportedMediaResponseBody(res *goa.ServiceError) *UpdateToolsetUnsupportedMediaResponseBody {
	body := &UpdateToolsetUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateToolsetInvalidResponseBody builds the HTTP response body from the
// result of the "updateToolset" endpoint of the "toolsets" service.
func NewUpdateToolsetInvalidResponseBody(res *goa.ServiceError) *UpdateToolsetInvalidResponseBody {
	body := &UpdateToolsetInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateToolsetInvariantViolationResponseBody builds the HTTP response body
// from the result of the "updateToolset" endpoint of the "toolsets" service.
func NewUpdateToolsetInvariantViolationResponseBody(res *goa.ServiceError) *UpdateToolsetInvariantViolationResponseBody {
	body := &UpdateToolsetInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateToolsetUnexpectedResponseBody builds the HTTP response body from
// the result of the "updateToolset" endpoint of the "toolsets" service.
func NewUpdateToolsetUnexpectedResponseBody(res *goa.ServiceError) *UpdateToolsetUnexpectedResponseBody {
	body := &UpdateToolsetUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateToolsetGatewayErrorResponseBody builds the HTTP response body from
// the result of the "updateToolset" endpoint of the "toolsets" service.
func NewUpdateToolsetGatewayErrorResponseBody(res *goa.ServiceError) *UpdateToolsetGatewayErrorResponseBody {
	body := &UpdateToolsetGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteToolsetUnauthorizedResponseBody builds the HTTP response body from
// the result of the "deleteToolset" endpoint of the "toolsets" service.
func NewDeleteToolsetUnauthorizedResponseBody(res *goa.ServiceError) *DeleteToolsetUnauthorizedResponseBody {
	body := &DeleteToolsetUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteToolsetForbiddenResponseBody builds the HTTP response body from the
// result of the "deleteToolset" endpoint of the "toolsets" service.
func NewDeleteToolsetForbiddenResponseBody(res *goa.ServiceError) *DeleteToolsetForbiddenResponseBody {
	body := &DeleteToolsetForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteToolsetBadRequestResponseBody builds the HTTP response body from
// the result of the "deleteToolset" endpoint of the "toolsets" service.
func NewDeleteToolsetBadRequestResponseBody(res *goa.ServiceError) *DeleteToolsetBadRequestResponseBody {
	body := &DeleteToolsetBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteToolsetNotFoundResponseBody builds the HTTP response body from the
// result of the "deleteToolset" endpoint of the "toolsets" service.
func NewDeleteToolsetNotFoundResponseBody(res *goa.ServiceError) *DeleteToolsetNotFoundResponseBody {
	body := &DeleteToolsetNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteToolsetConflictResponseBody builds the HTTP response body from the
// result of the "deleteToolset" endpoint of the "toolsets" service.
func NewDeleteToolsetConflictResponseBody(res *goa.ServiceError) *DeleteToolsetConflictResponseBody {
	body := &DeleteToolsetConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteToolsetUnsupportedMediaResponseBody builds the HTTP response body
// from the result of the "deleteToolset" endpoint of the "toolsets" service.
func NewDeleteToolsetUnsupportedMediaResponseBody(res *goa.ServiceError) *DeleteToolsetUnsupportedMediaResponseBody {
	body := &DeleteToolsetUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteToolsetInvalidResponseBody builds the HTTP response body from the
// result of the "deleteToolset" endpoint of the "toolsets" service.
func NewDeleteToolsetInvalidResponseBody(res *goa.ServiceError) *DeleteToolsetInvalidResponseBody {
	body := &DeleteToolsetInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteToolsetInvariantViolationResponseBody builds the HTTP response body
// from the result of the "deleteToolset" endpoint of the "toolsets" service.
func NewDeleteToolsetInvariantViolationResponseBody(res *goa.ServiceError) *DeleteToolsetInvariantViolationResponseBody {
	body := &DeleteToolsetInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteToolsetUnexpectedResponseBody builds the HTTP response body from
// the result of the "deleteToolset" endpoint of the "toolsets" service.
func NewDeleteToolsetUnexpectedResponseBody(res *goa.ServiceError) *DeleteToolsetUnexpectedResponseBody {
	body := &DeleteToolsetUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteToolsetGatewayErrorResponseBody builds the HTTP response body from
// the result of the "deleteToolset" endpoint of the "toolsets" service.
func NewDeleteToolsetGatewayErrorResponseBody(res *goa.ServiceError) *DeleteToolsetGatewayErrorResponseBody {
	body := &DeleteToolsetGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetToolsetUnauthorizedResponseBody builds the HTTP response body from the
// result of the "getToolset" endpoint of the "toolsets" service.
func NewGetToolsetUnauthorizedResponseBody(res *goa.ServiceError) *GetToolsetUnauthorizedResponseBody {
	body := &GetToolsetUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetToolsetForbiddenResponseBody builds the HTTP response body from the
// result of the "getToolset" endpoint of the "toolsets" service.
func NewGetToolsetForbiddenResponseBody(res *goa.ServiceError) *GetToolsetForbiddenResponseBody {
	body := &GetToolsetForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetToolsetBadRequestResponseBody builds the HTTP response body from the
// result of the "getToolset" endpoint of the "toolsets" service.
func NewGetToolsetBadRequestResponseBody(res *goa.ServiceError) *GetToolsetBadRequestResponseBody {
	body := &GetToolsetBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetToolsetNotFoundResponseBody builds the HTTP response body from the
// result of the "getToolset" endpoint of the "toolsets" service.
func NewGetToolsetNotFoundResponseBody(res *goa.ServiceError) *GetToolsetNotFoundResponseBody {
	body := &GetToolsetNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetToolsetConflictResponseBody builds the HTTP response body from the
// result of the "getToolset" endpoint of the "toolsets" service.
func NewGetToolsetConflictResponseBody(res *goa.ServiceError) *GetToolsetConflictResponseBody {
	body := &GetToolsetConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetToolsetUnsupportedMediaResponseBody builds the HTTP response body from
// the result of the "getToolset" endpoint of the "toolsets" service.
func NewGetToolsetUnsupportedMediaResponseBody(res *goa.ServiceError) *GetToolsetUnsupportedMediaResponseBody {
	body := &GetToolsetUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetToolsetInvalidResponseBody builds the HTTP response body from the
// result of the "getToolset" endpoint of the "toolsets" service.
func NewGetToolsetInvalidResponseBody(res *goa.ServiceError) *GetToolsetInvalidResponseBody {
	body := &GetToolsetInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetToolsetInvariantViolationResponseBody builds the HTTP response body
// from the result of the "getToolset" endpoint of the "toolsets" service.
func NewGetToolsetInvariantViolationResponseBody(res *goa.ServiceError) *GetToolsetInvariantViolationResponseBody {
	body := &GetToolsetInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetToolsetUnexpectedResponseBody builds the HTTP response body from the
// result of the "getToolset" endpoint of the "toolsets" service.
func NewGetToolsetUnexpectedResponseBody(res *goa.ServiceError) *GetToolsetUnexpectedResponseBody {
	body := &GetToolsetUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetToolsetGatewayErrorResponseBody builds the HTTP response body from the
// result of the "getToolset" endpoint of the "toolsets" service.
func NewGetToolsetGatewayErrorResponseBody(res *goa.ServiceError) *GetToolsetGatewayErrorResponseBody {
	body := &GetToolsetGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckMCPSlugAvailabilityUnauthorizedResponseBody builds the HTTP response
// body from the result of the "checkMCPSlugAvailability" endpoint of the
// "toolsets" service.
func NewCheckMCPSlugAvailabilityUnauthorizedResponseBody(res *goa.ServiceError) *CheckMCPSlugAvailabilityUnauthorizedResponseBody {
	body := &CheckMCPSlugAvailabilityUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckMCPSlugAvailabilityForbiddenResponseBody builds the HTTP response
// body from the result of the "checkMCPSlugAvailability" endpoint of the
// "toolsets" service.
func NewCheckMCPSlugAvailabilityForbiddenResponseBody(res *goa.ServiceError) *CheckMCPSlugAvailabilityForbiddenResponseBody {
	body := &CheckMCPSlugAvailabilityForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckMCPSlugAvailabilityBadRequestResponseBody builds the HTTP response
// body from the result of the "checkMCPSlugAvailability" endpoint of the
// "toolsets" service.
func NewCheckMCPSlugAvailabilityBadRequestResponseBody(res *goa.ServiceError) *CheckMCPSlugAvailabilityBadRequestResponseBody {
	body := &CheckMCPSlugAvailabilityBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckMCPSlugAvailabilityNotFoundResponseBody builds the HTTP response
// body from the result of the "checkMCPSlugAvailability" endpoint of the
// "toolsets" service.
func NewCheckMCPSlugAvailabilityNotFoundResponseBody(res *goa.ServiceError) *CheckMCPSlugAvailabilityNotFoundResponseBody {
	body := &CheckMCPSlugAvailabilityNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckMCPSlugAvailabilityConflictResponseBody builds the HTTP response
// body from the result of the "checkMCPSlugAvailability" endpoint of the
// "toolsets" service.
func NewCheckMCPSlugAvailabilityConflictResponseBody(res *goa.ServiceError) *CheckMCPSlugAvailabilityConflictResponseBody {
	body := &CheckMCPSlugAvailabilityConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckMCPSlugAvailabilityUnsupportedMediaResponseBody builds the HTTP
// response body from the result of the "checkMCPSlugAvailability" endpoint of
// the "toolsets" service.
func NewCheckMCPSlugAvailabilityUnsupportedMediaResponseBody(res *goa.ServiceError) *CheckMCPSlugAvailabilityUnsupportedMediaResponseBody {
	body := &CheckMCPSlugAvailabilityUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckMCPSlugAvailabilityInvalidResponseBody builds the HTTP response body
// from the result of the "checkMCPSlugAvailability" endpoint of the "toolsets"
// service.
func NewCheckMCPSlugAvailabilityInvalidResponseBody(res *goa.ServiceError) *CheckMCPSlugAvailabilityInvalidResponseBody {
	body := &CheckMCPSlugAvailabilityInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckMCPSlugAvailabilityInvariantViolationResponseBody builds the HTTP
// response body from the result of the "checkMCPSlugAvailability" endpoint of
// the "toolsets" service.
func NewCheckMCPSlugAvailabilityInvariantViolationResponseBody(res *goa.ServiceError) *CheckMCPSlugAvailabilityInvariantViolationResponseBody {
	body := &CheckMCPSlugAvailabilityInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckMCPSlugAvailabilityUnexpectedResponseBody builds the HTTP response
// body from the result of the "checkMCPSlugAvailability" endpoint of the
// "toolsets" service.
func NewCheckMCPSlugAvailabilityUnexpectedResponseBody(res *goa.ServiceError) *CheckMCPSlugAvailabilityUnexpectedResponseBody {
	body := &CheckMCPSlugAvailabilityUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckMCPSlugAvailabilityGatewayErrorResponseBody builds the HTTP response
// body from the result of the "checkMCPSlugAvailability" endpoint of the
// "toolsets" service.
func NewCheckMCPSlugAvailabilityGatewayErrorResponseBody(res *goa.ServiceError) *CheckMCPSlugAvailabilityGatewayErrorResponseBody {
	body := &CheckMCPSlugAvailabilityGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateToolsetPayload builds a toolsets service createToolset endpoint
// payload.
func NewCreateToolsetPayload(body *CreateToolsetRequestBody, sessionToken *string, projectSlugInput *string) *toolsets.CreateToolsetPayload {
	v := &toolsets.CreateToolsetPayload{
		Name:        *body.Name,
		Description: body.Description,
	}
	if body.DefaultEnvironmentSlug != nil {
		defaultEnvironmentSlug := types.Slug(*body.DefaultEnvironmentSlug)
		v.DefaultEnvironmentSlug = &defaultEnvironmentSlug
	}
	if body.HTTPToolNames != nil {
		v.HTTPToolNames = make([]string, len(body.HTTPToolNames))
		for i, val := range body.HTTPToolNames {
			v.HTTPToolNames[i] = val
		}
	}
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// NewListToolsetsPayload builds a toolsets service listToolsets endpoint
// payload.
func NewListToolsetsPayload(sessionToken *string, projectSlugInput *string) *toolsets.ListToolsetsPayload {
	v := &toolsets.ListToolsetsPayload{}
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// NewUpdateToolsetPayload builds a toolsets service updateToolset endpoint
// payload.
func NewUpdateToolsetPayload(body *UpdateToolsetRequestBody, slug string, sessionToken *string, projectSlugInput *string) *toolsets.UpdateToolsetPayload {
	v := &toolsets.UpdateToolsetPayload{
		Name:           body.Name,
		Description:    body.Description,
		McpIsPublic:    body.McpIsPublic,
		CustomDomainID: body.CustomDomainID,
	}
	if body.DefaultEnvironmentSlug != nil {
		defaultEnvironmentSlug := types.Slug(*body.DefaultEnvironmentSlug)
		v.DefaultEnvironmentSlug = &defaultEnvironmentSlug
	}
	if body.McpSlug != nil {
		mcpSlug := types.Slug(*body.McpSlug)
		v.McpSlug = &mcpSlug
	}
	if body.HTTPToolNames != nil {
		v.HTTPToolNames = make([]string, len(body.HTTPToolNames))
		for i, val := range body.HTTPToolNames {
			v.HTTPToolNames[i] = val
		}
	}
	if body.PromptTemplateNames != nil {
		v.PromptTemplateNames = make([]string, len(body.PromptTemplateNames))
		for i, val := range body.PromptTemplateNames {
			v.PromptTemplateNames[i] = val
		}
	}
	v.Slug = types.Slug(slug)
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// NewDeleteToolsetPayload builds a toolsets service deleteToolset endpoint
// payload.
func NewDeleteToolsetPayload(slug string, sessionToken *string, projectSlugInput *string) *toolsets.DeleteToolsetPayload {
	v := &toolsets.DeleteToolsetPayload{}
	v.Slug = types.Slug(slug)
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// NewGetToolsetPayload builds a toolsets service getToolset endpoint payload.
func NewGetToolsetPayload(slug string, sessionToken *string, projectSlugInput *string) *toolsets.GetToolsetPayload {
	v := &toolsets.GetToolsetPayload{}
	v.Slug = types.Slug(slug)
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// NewCheckMCPSlugAvailabilityPayload builds a toolsets service
// checkMCPSlugAvailability endpoint payload.
func NewCheckMCPSlugAvailabilityPayload(slug string, sessionToken *string, projectSlugInput *string) *toolsets.CheckMCPSlugAvailabilityPayload {
	v := &toolsets.CheckMCPSlugAvailabilityPayload{}
	v.Slug = types.Slug(slug)
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// ValidateCreateToolsetRequestBody runs the validations defined on
// CreateToolsetRequestBody
func ValidateCreateToolsetRequestBody(body *CreateToolsetRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.DefaultEnvironmentSlug != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.default_environment_slug", *body.DefaultEnvironmentSlug, "^[a-z]+(?:[a-z0-9_-]*[a-z0-9])?$"))
	}
	if body.DefaultEnvironmentSlug != nil {
		if utf8.RuneCountInString(*body.DefaultEnvironmentSlug) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.default_environment_slug", *body.DefaultEnvironmentSlug, utf8.RuneCountInString(*body.DefaultEnvironmentSlug), 40, false))
		}
	}
	return
}

// ValidateUpdateToolsetRequestBody runs the validations defined on
// UpdateToolsetRequestBody
func ValidateUpdateToolsetRequestBody(body *UpdateToolsetRequestBody) (err error) {
	if body.DefaultEnvironmentSlug != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.default_environment_slug", *body.DefaultEnvironmentSlug, "^[a-z]+(?:[a-z0-9_-]*[a-z0-9])?$"))
	}
	if body.DefaultEnvironmentSlug != nil {
		if utf8.RuneCountInString(*body.DefaultEnvironmentSlug) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.default_environment_slug", *body.DefaultEnvironmentSlug, utf8.RuneCountInString(*body.DefaultEnvironmentSlug), 40, false))
		}
	}
	if body.McpSlug != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.mcp_slug", *body.McpSlug, "^[a-z]+(?:[a-z0-9_-]*[a-z0-9])?$"))
	}
	if body.McpSlug != nil {
		if utf8.RuneCountInString(*body.McpSlug) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.mcp_slug", *body.McpSlug, utf8.RuneCountInString(*body.McpSlug), 40, false))
		}
	}
	return
}
