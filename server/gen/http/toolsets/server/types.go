// Code generated by goa v3.20.1, DO NOT EDIT.
//
// toolsets HTTP server types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package server

import (
	toolsets "github.com/speakeasy-api/gram/gen/toolsets"
	goa "goa.design/goa/v3/pkg"
)

// CreateToolsetRequestBody is the type of the "toolsets" service
// "createToolset" endpoint HTTP request body.
type CreateToolsetRequestBody struct {
	// The name of the toolset
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the toolset
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// List of HTTP tool names to include
	HTTPToolNames []string `form:"http_tool_names,omitempty" json:"http_tool_names,omitempty" xml:"http_tool_names,omitempty"`
	// The slug of the environment to use as the default for the toolset
	DefaultEnvironmentSlug *string `form:"default_environment_slug,omitempty" json:"default_environment_slug,omitempty" xml:"default_environment_slug,omitempty"`
}

// UpdateToolsetRequestBody is the type of the "toolsets" service
// "updateToolset" endpoint HTTP request body.
type UpdateToolsetRequestBody struct {
	// The new name of the toolset
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The new description of the toolset
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The slug of the environment to use as the default for the toolset
	DefaultEnvironmentSlug *string `form:"default_environment_slug,omitempty" json:"default_environment_slug,omitempty" xml:"default_environment_slug,omitempty"`
	// List of HTTP tool names to include
	HTTPToolNames []string `form:"http_tool_names,omitempty" json:"http_tool_names,omitempty" xml:"http_tool_names,omitempty"`
}

// CreateToolsetResponseBody is the type of the "toolsets" service
// "createToolset" endpoint HTTP response body.
type CreateToolsetResponseBody struct {
	// The ID of the toolset
	ID string `form:"id" json:"id" xml:"id"`
	// The project ID this toolset belongs to
	ProjectID string `form:"project_id" json:"project_id" xml:"project_id"`
	// The organization ID this toolset belongs to
	OrganizationID string `form:"organization_id" json:"organization_id" xml:"organization_id"`
	// The name of the toolset
	Name string `form:"name" json:"name" xml:"name"`
	// The slug of the toolset
	Slug string `form:"slug" json:"slug" xml:"slug"`
	// Description of the toolset
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The slug of the environment to use as the default for the toolset
	DefaultEnvironmentSlug *string `form:"default_environment_slug,omitempty" json:"default_environment_slug,omitempty" xml:"default_environment_slug,omitempty"`
	// The environment variables that are relevant to the toolset
	RelevantEnvironmentVariables []string `form:"relevant_environment_variables,omitempty" json:"relevant_environment_variables,omitempty" xml:"relevant_environment_variables,omitempty"`
	// The HTTP tools in this toolset
	HTTPTools []*HTTPToolDefinitionResponseBody `form:"http_tools" json:"http_tools" xml:"http_tools"`
	// When the toolset was created.
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// When the toolset was last updated.
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// ListToolsetsResponseBody is the type of the "toolsets" service
// "listToolsets" endpoint HTTP response body.
type ListToolsetsResponseBody struct {
	// The list of toolsets
	Toolsets []*ToolsetDetailsResponseBody `form:"toolsets" json:"toolsets" xml:"toolsets"`
}

// UpdateToolsetResponseBody is the type of the "toolsets" service
// "updateToolset" endpoint HTTP response body.
type UpdateToolsetResponseBody struct {
	// The ID of the toolset
	ID string `form:"id" json:"id" xml:"id"`
	// The project ID this toolset belongs to
	ProjectID string `form:"project_id" json:"project_id" xml:"project_id"`
	// The organization ID this toolset belongs to
	OrganizationID string `form:"organization_id" json:"organization_id" xml:"organization_id"`
	// The name of the toolset
	Name string `form:"name" json:"name" xml:"name"`
	// The slug of the toolset
	Slug string `form:"slug" json:"slug" xml:"slug"`
	// Description of the toolset
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The slug of the environment to use as the default for the toolset
	DefaultEnvironmentSlug *string `form:"default_environment_slug,omitempty" json:"default_environment_slug,omitempty" xml:"default_environment_slug,omitempty"`
	// The environment variables that are relevant to the toolset
	RelevantEnvironmentVariables []string `form:"relevant_environment_variables,omitempty" json:"relevant_environment_variables,omitempty" xml:"relevant_environment_variables,omitempty"`
	// The HTTP tools in this toolset
	HTTPTools []*HTTPToolDefinitionResponseBody `form:"http_tools" json:"http_tools" xml:"http_tools"`
	// When the toolset was created.
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// When the toolset was last updated.
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// GetToolsetResponseBody is the type of the "toolsets" service "getToolset"
// endpoint HTTP response body.
type GetToolsetResponseBody struct {
	// The ID of the toolset
	ID string `form:"id" json:"id" xml:"id"`
	// The project ID this toolset belongs to
	ProjectID string `form:"project_id" json:"project_id" xml:"project_id"`
	// The organization ID this toolset belongs to
	OrganizationID string `form:"organization_id" json:"organization_id" xml:"organization_id"`
	// The name of the toolset
	Name string `form:"name" json:"name" xml:"name"`
	// The slug of the toolset
	Slug string `form:"slug" json:"slug" xml:"slug"`
	// Description of the toolset
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The slug of the environment to use as the default for the toolset
	DefaultEnvironmentSlug *string `form:"default_environment_slug,omitempty" json:"default_environment_slug,omitempty" xml:"default_environment_slug,omitempty"`
	// The environment variables that are relevant to the toolset
	RelevantEnvironmentVariables []string `form:"relevant_environment_variables,omitempty" json:"relevant_environment_variables,omitempty" xml:"relevant_environment_variables,omitempty"`
	// The HTTP tools in this toolset
	HTTPTools []*HTTPToolDefinitionResponseBody `form:"http_tools" json:"http_tools" xml:"http_tools"`
	// When the toolset was created.
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// When the toolset was last updated.
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// HTTPToolDefinitionResponseBody is used to define fields on response body
// types.
type HTTPToolDefinitionResponseBody struct {
	// The ID of the HTTP tool
	ID string `form:"id" json:"id" xml:"id"`
	// The ID of the project
	ProjectID string `form:"project_id" json:"project_id" xml:"project_id"`
	// The ID of the deployment
	DeploymentID string `form:"deployment_id" json:"deployment_id" xml:"deployment_id"`
	// The ID of the OpenAPI v3 document
	Openapiv3DocumentID *string `form:"openapiv3_document_id,omitempty" json:"openapiv3_document_id,omitempty" xml:"openapiv3_document_id,omitempty"`
	// The name of the tool
	Name string `form:"name" json:"name" xml:"name"`
	// Summary of the tool
	Summary string `form:"summary" json:"summary" xml:"summary"`
	// Description of the tool
	Description string `form:"description" json:"description" xml:"description"`
	// OpenAPI v3 operation
	Openapiv3Operation *string `form:"openapiv3_operation,omitempty" json:"openapiv3_operation,omitempty" xml:"openapiv3_operation,omitempty"`
	// The tags list for this http tool
	Tags []string `form:"tags" json:"tags" xml:"tags"`
	// Security requirements for the underlying HTTP endpoint
	Security *string `form:"security,omitempty" json:"security,omitempty" xml:"security,omitempty"`
	// HTTP method for the request
	HTTPMethod string `form:"http_method" json:"http_method" xml:"http_method"`
	// Path for the request
	Path string `form:"path" json:"path" xml:"path"`
	// Version of the schema
	SchemaVersion *string `form:"schema_version,omitempty" json:"schema_version,omitempty" xml:"schema_version,omitempty"`
	// JSON schema for the request
	Schema string `form:"schema" json:"schema" xml:"schema"`
	// The creation date of the tool.
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// The last update date of the tool.
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// ToolsetDetailsResponseBody is used to define fields on response body types.
type ToolsetDetailsResponseBody struct {
	// The ID of the toolset
	ID string `form:"id" json:"id" xml:"id"`
	// The project ID this toolset belongs to
	ProjectID string `form:"project_id" json:"project_id" xml:"project_id"`
	// The organization ID this toolset belongs to
	OrganizationID string `form:"organization_id" json:"organization_id" xml:"organization_id"`
	// The name of the toolset
	Name string `form:"name" json:"name" xml:"name"`
	// The slug of the toolset
	Slug string `form:"slug" json:"slug" xml:"slug"`
	// Description of the toolset
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The slug of the environment to use as the default for the toolset
	DefaultEnvironmentSlug *string `form:"default_environment_slug,omitempty" json:"default_environment_slug,omitempty" xml:"default_environment_slug,omitempty"`
	// The environment variables that are relevant to the toolset
	RelevantEnvironmentVariables []string `form:"relevant_environment_variables,omitempty" json:"relevant_environment_variables,omitempty" xml:"relevant_environment_variables,omitempty"`
	// The HTTP tools in this toolset
	HTTPTools []*HTTPToolDefinitionResponseBody `form:"http_tools" json:"http_tools" xml:"http_tools"`
	// When the toolset was created.
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// When the toolset was last updated.
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// NewCreateToolsetResponseBody builds the HTTP response body from the result
// of the "createToolset" endpoint of the "toolsets" service.
func NewCreateToolsetResponseBody(res *toolsets.ToolsetDetails) *CreateToolsetResponseBody {
	body := &CreateToolsetResponseBody{
		ID:                     res.ID,
		ProjectID:              res.ProjectID,
		OrganizationID:         res.OrganizationID,
		Name:                   res.Name,
		Slug:                   res.Slug,
		Description:            res.Description,
		DefaultEnvironmentSlug: res.DefaultEnvironmentSlug,
		CreatedAt:              res.CreatedAt,
		UpdatedAt:              res.UpdatedAt,
	}
	if res.RelevantEnvironmentVariables != nil {
		body.RelevantEnvironmentVariables = make([]string, len(res.RelevantEnvironmentVariables))
		for i, val := range res.RelevantEnvironmentVariables {
			body.RelevantEnvironmentVariables[i] = val
		}
	}
	if res.HTTPTools != nil {
		body.HTTPTools = make([]*HTTPToolDefinitionResponseBody, len(res.HTTPTools))
		for i, val := range res.HTTPTools {
			body.HTTPTools[i] = marshalToolsetsHTTPToolDefinitionToHTTPToolDefinitionResponseBody(val)
		}
	} else {
		body.HTTPTools = []*HTTPToolDefinitionResponseBody{}
	}
	return body
}

// NewListToolsetsResponseBody builds the HTTP response body from the result of
// the "listToolsets" endpoint of the "toolsets" service.
func NewListToolsetsResponseBody(res *toolsets.ListToolsetsResult) *ListToolsetsResponseBody {
	body := &ListToolsetsResponseBody{}
	if res.Toolsets != nil {
		body.Toolsets = make([]*ToolsetDetailsResponseBody, len(res.Toolsets))
		for i, val := range res.Toolsets {
			body.Toolsets[i] = marshalToolsetsToolsetDetailsToToolsetDetailsResponseBody(val)
		}
	} else {
		body.Toolsets = []*ToolsetDetailsResponseBody{}
	}
	return body
}

// NewUpdateToolsetResponseBody builds the HTTP response body from the result
// of the "updateToolset" endpoint of the "toolsets" service.
func NewUpdateToolsetResponseBody(res *toolsets.ToolsetDetails) *UpdateToolsetResponseBody {
	body := &UpdateToolsetResponseBody{
		ID:                     res.ID,
		ProjectID:              res.ProjectID,
		OrganizationID:         res.OrganizationID,
		Name:                   res.Name,
		Slug:                   res.Slug,
		Description:            res.Description,
		DefaultEnvironmentSlug: res.DefaultEnvironmentSlug,
		CreatedAt:              res.CreatedAt,
		UpdatedAt:              res.UpdatedAt,
	}
	if res.RelevantEnvironmentVariables != nil {
		body.RelevantEnvironmentVariables = make([]string, len(res.RelevantEnvironmentVariables))
		for i, val := range res.RelevantEnvironmentVariables {
			body.RelevantEnvironmentVariables[i] = val
		}
	}
	if res.HTTPTools != nil {
		body.HTTPTools = make([]*HTTPToolDefinitionResponseBody, len(res.HTTPTools))
		for i, val := range res.HTTPTools {
			body.HTTPTools[i] = marshalToolsetsHTTPToolDefinitionToHTTPToolDefinitionResponseBody(val)
		}
	} else {
		body.HTTPTools = []*HTTPToolDefinitionResponseBody{}
	}
	return body
}

// NewGetToolsetResponseBody builds the HTTP response body from the result of
// the "getToolset" endpoint of the "toolsets" service.
func NewGetToolsetResponseBody(res *toolsets.ToolsetDetails) *GetToolsetResponseBody {
	body := &GetToolsetResponseBody{
		ID:                     res.ID,
		ProjectID:              res.ProjectID,
		OrganizationID:         res.OrganizationID,
		Name:                   res.Name,
		Slug:                   res.Slug,
		Description:            res.Description,
		DefaultEnvironmentSlug: res.DefaultEnvironmentSlug,
		CreatedAt:              res.CreatedAt,
		UpdatedAt:              res.UpdatedAt,
	}
	if res.RelevantEnvironmentVariables != nil {
		body.RelevantEnvironmentVariables = make([]string, len(res.RelevantEnvironmentVariables))
		for i, val := range res.RelevantEnvironmentVariables {
			body.RelevantEnvironmentVariables[i] = val
		}
	}
	if res.HTTPTools != nil {
		body.HTTPTools = make([]*HTTPToolDefinitionResponseBody, len(res.HTTPTools))
		for i, val := range res.HTTPTools {
			body.HTTPTools[i] = marshalToolsetsHTTPToolDefinitionToHTTPToolDefinitionResponseBody(val)
		}
	} else {
		body.HTTPTools = []*HTTPToolDefinitionResponseBody{}
	}
	return body
}

// NewCreateToolsetPayload builds a toolsets service createToolset endpoint
// payload.
func NewCreateToolsetPayload(body *CreateToolsetRequestBody, sessionToken *string, projectSlugInput *string) *toolsets.CreateToolsetPayload {
	v := &toolsets.CreateToolsetPayload{
		Name:                   *body.Name,
		Description:            body.Description,
		DefaultEnvironmentSlug: body.DefaultEnvironmentSlug,
	}
	if body.HTTPToolNames != nil {
		v.HTTPToolNames = make([]string, len(body.HTTPToolNames))
		for i, val := range body.HTTPToolNames {
			v.HTTPToolNames[i] = val
		}
	}
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// NewListToolsetsPayload builds a toolsets service listToolsets endpoint
// payload.
func NewListToolsetsPayload(sessionToken *string, projectSlugInput *string) *toolsets.ListToolsetsPayload {
	v := &toolsets.ListToolsetsPayload{}
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// NewUpdateToolsetPayload builds a toolsets service updateToolset endpoint
// payload.
func NewUpdateToolsetPayload(body *UpdateToolsetRequestBody, slug string, sessionToken *string, projectSlugInput *string) *toolsets.UpdateToolsetPayload {
	v := &toolsets.UpdateToolsetPayload{
		Name:                   body.Name,
		Description:            body.Description,
		DefaultEnvironmentSlug: body.DefaultEnvironmentSlug,
	}
	if body.HTTPToolNames != nil {
		v.HTTPToolNames = make([]string, len(body.HTTPToolNames))
		for i, val := range body.HTTPToolNames {
			v.HTTPToolNames[i] = val
		}
	}
	v.Slug = slug
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// NewDeleteToolsetPayload builds a toolsets service deleteToolset endpoint
// payload.
func NewDeleteToolsetPayload(slug string, sessionToken *string, projectSlugInput *string) *toolsets.DeleteToolsetPayload {
	v := &toolsets.DeleteToolsetPayload{}
	v.Slug = slug
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// NewGetToolsetPayload builds a toolsets service getToolset endpoint payload.
func NewGetToolsetPayload(slug string, sessionToken *string, projectSlugInput *string) *toolsets.GetToolsetPayload {
	v := &toolsets.GetToolsetPayload{}
	v.Slug = slug
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}

// ValidateCreateToolsetRequestBody runs the validations defined on
// CreateToolsetRequestBody
func ValidateCreateToolsetRequestBody(body *CreateToolsetRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}
