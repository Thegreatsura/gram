// Code generated by goa v3.20.1, DO NOT EDIT.
//
// toolsets HTTP server types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package server

import (
	toolsets "github.com/speakeasy-api/gram/gen/toolsets"
	goa "goa.design/goa/v3/pkg"
)

// CreateToolsetRequestBody is the type of the "toolsets" service
// "createToolset" endpoint HTTP request body.
type CreateToolsetRequestBody struct {
	// The name of the toolset
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the toolset
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// List of HTTP tool IDs to include
	HTTPToolIds []string `form:"http_tool_ids,omitempty" json:"http_tool_ids,omitempty" xml:"http_tool_ids,omitempty"`
	// The ID of the environment to use as the default for the toolset
	DefaultEnvironmentID *string `form:"default_environment_id,omitempty" json:"default_environment_id,omitempty" xml:"default_environment_id,omitempty"`
}

// UpdateToolsetRequestBody is the type of the "toolsets" service
// "updateToolset" endpoint HTTP request body.
type UpdateToolsetRequestBody struct {
	// The new name of the toolset
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The new description of the toolset
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The ID of the environment to use as the default for the toolset
	DefaultEnvironmentID *string `form:"default_environment_id,omitempty" json:"default_environment_id,omitempty" xml:"default_environment_id,omitempty"`
	// HTTP tool IDs to add to the toolset
	HTTPToolIdsToAdd []string `form:"http_tool_ids_to_add,omitempty" json:"http_tool_ids_to_add,omitempty" xml:"http_tool_ids_to_add,omitempty"`
	// HTTP tool IDs to remove from the toolset
	HTTPToolIdsToRemove []string `form:"http_tool_ids_to_remove,omitempty" json:"http_tool_ids_to_remove,omitempty" xml:"http_tool_ids_to_remove,omitempty"`
}

// CreateToolsetResponseBody is the type of the "toolsets" service
// "createToolset" endpoint HTTP response body.
type CreateToolsetResponseBody struct {
	// The ID of the toolset
	ID string `form:"id" json:"id" xml:"id"`
	// The project ID this toolset belongs to
	ProjectID string `form:"project_id" json:"project_id" xml:"project_id"`
	// The organization ID this toolset belongs to
	OrganizationID string `form:"organization_id" json:"organization_id" xml:"organization_id"`
	// The name of the toolset
	Name string `form:"name" json:"name" xml:"name"`
	// The slug of the toolset
	Slug string `form:"slug" json:"slug" xml:"slug"`
	// Description of the toolset
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The ID of the environment to use as the default for the toolset
	DefaultEnvironmentID *string `form:"default_environment_id,omitempty" json:"default_environment_id,omitempty" xml:"default_environment_id,omitempty"`
	// List of HTTP tool IDs included in this toolset
	HTTPToolIds []string `form:"http_tool_ids,omitempty" json:"http_tool_ids,omitempty" xml:"http_tool_ids,omitempty"`
	// When the toolset was created.
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// When the toolset was last updated.
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// ListToolsetsResponseBody is the type of the "toolsets" service
// "listToolsets" endpoint HTTP response body.
type ListToolsetsResponseBody struct {
	// The list of toolsets
	Toolsets []*ToolsetResponseBody `form:"toolsets" json:"toolsets" xml:"toolsets"`
}

// UpdateToolsetResponseBody is the type of the "toolsets" service
// "updateToolset" endpoint HTTP response body.
type UpdateToolsetResponseBody struct {
	// The ID of the toolset
	ID string `form:"id" json:"id" xml:"id"`
	// The project ID this toolset belongs to
	ProjectID string `form:"project_id" json:"project_id" xml:"project_id"`
	// The organization ID this toolset belongs to
	OrganizationID string `form:"organization_id" json:"organization_id" xml:"organization_id"`
	// The name of the toolset
	Name string `form:"name" json:"name" xml:"name"`
	// The slug of the toolset
	Slug string `form:"slug" json:"slug" xml:"slug"`
	// Description of the toolset
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The ID of the environment to use as the default for the toolset
	DefaultEnvironmentID *string `form:"default_environment_id,omitempty" json:"default_environment_id,omitempty" xml:"default_environment_id,omitempty"`
	// List of HTTP tool IDs included in this toolset
	HTTPToolIds []string `form:"http_tool_ids,omitempty" json:"http_tool_ids,omitempty" xml:"http_tool_ids,omitempty"`
	// When the toolset was created.
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// When the toolset was last updated.
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// GetToolsetDetailsResponseBody is the type of the "toolsets" service
// "getToolsetDetails" endpoint HTTP response body.
type GetToolsetDetailsResponseBody struct {
	// The ID of the toolset
	ID string `form:"id" json:"id" xml:"id"`
	// The project ID this toolset belongs to
	ProjectID string `form:"project_id" json:"project_id" xml:"project_id"`
	// The organization ID this toolset belongs to
	OrganizationID string `form:"organization_id" json:"organization_id" xml:"organization_id"`
	// The name of the toolset
	Name string `form:"name" json:"name" xml:"name"`
	// The slug of the toolset
	Slug string `form:"slug" json:"slug" xml:"slug"`
	// Description of the toolset
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The ID of the environment to use as the default for the toolset
	DefaultEnvironmentID *string `form:"default_environment_id,omitempty" json:"default_environment_id,omitempty" xml:"default_environment_id,omitempty"`
	// The HTTP tools in this toolset
	HTTPTools []*HTTPToolDefinitionResponseBody `form:"http_tools" json:"http_tools" xml:"http_tools"`
	// When the toolset was created.
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// When the toolset was last updated.
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// ToolsetResponseBody is used to define fields on response body types.
type ToolsetResponseBody struct {
	// The ID of the toolset
	ID string `form:"id" json:"id" xml:"id"`
	// The project ID this toolset belongs to
	ProjectID string `form:"project_id" json:"project_id" xml:"project_id"`
	// The organization ID this toolset belongs to
	OrganizationID string `form:"organization_id" json:"organization_id" xml:"organization_id"`
	// The name of the toolset
	Name string `form:"name" json:"name" xml:"name"`
	// The slug of the toolset
	Slug string `form:"slug" json:"slug" xml:"slug"`
	// Description of the toolset
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The ID of the environment to use as the default for the toolset
	DefaultEnvironmentID *string `form:"default_environment_id,omitempty" json:"default_environment_id,omitempty" xml:"default_environment_id,omitempty"`
	// List of HTTP tool IDs included in this toolset
	HTTPToolIds []string `form:"http_tool_ids,omitempty" json:"http_tool_ids,omitempty" xml:"http_tool_ids,omitempty"`
	// When the toolset was created.
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// When the toolset was last updated.
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// HTTPToolDefinitionResponseBody is used to define fields on response body
// types.
type HTTPToolDefinitionResponseBody struct {
	// The ID of the HTTP tool
	ID string `form:"id" json:"id" xml:"id"`
	// The name of the tool
	Name string `form:"name" json:"name" xml:"name"`
	// Description of the tool
	Description string `form:"description" json:"description" xml:"description"`
	// The tags list for this http tool
	Tags []string `form:"tags" json:"tags" xml:"tags"`
	// Environment variable for the server URL
	ServerEnvVar string `form:"server_env_var" json:"server_env_var" xml:"server_env_var"`
	// Type of security (http:bearer, http:basic, apikey)
	SecurityType string `form:"security_type" json:"security_type" xml:"security_type"`
	// Environment variable for bearer token
	BearerEnvVar *string `form:"bearer_env_var,omitempty" json:"bearer_env_var,omitempty" xml:"bearer_env_var,omitempty"`
	// Environment variable for API key
	ApikeyEnvVar *string `form:"apikey_env_var,omitempty" json:"apikey_env_var,omitempty" xml:"apikey_env_var,omitempty"`
	// Environment variable for username
	UsernameEnvVar *string `form:"username_env_var,omitempty" json:"username_env_var,omitempty" xml:"username_env_var,omitempty"`
	// Environment variable for password
	PasswordEnvVar *string `form:"password_env_var,omitempty" json:"password_env_var,omitempty" xml:"password_env_var,omitempty"`
	// HTTP method for the request
	HTTPMethod string `form:"http_method" json:"http_method" xml:"http_method"`
	// Path for the request
	Path string `form:"path" json:"path" xml:"path"`
	// JSON schema for headers
	HeadersSchema *string `form:"headers_schema,omitempty" json:"headers_schema,omitempty" xml:"headers_schema,omitempty"`
	// JSON schema for query parameters
	QueriesSchema *string `form:"queries_schema,omitempty" json:"queries_schema,omitempty" xml:"queries_schema,omitempty"`
	// JSON schema for path parameters
	PathparamsSchema *string `form:"pathparams_schema,omitempty" json:"pathparams_schema,omitempty" xml:"pathparams_schema,omitempty"`
	// JSON schema for request body
	BodySchema *string `form:"body_schema,omitempty" json:"body_schema,omitempty" xml:"body_schema,omitempty"`
	// The creation date of the tool.
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// The last update date of the tool.
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// NewCreateToolsetResponseBody builds the HTTP response body from the result
// of the "createToolset" endpoint of the "toolsets" service.
func NewCreateToolsetResponseBody(res *toolsets.Toolset) *CreateToolsetResponseBody {
	body := &CreateToolsetResponseBody{
		ID:                   res.ID,
		ProjectID:            res.ProjectID,
		OrganizationID:       res.OrganizationID,
		Name:                 res.Name,
		Slug:                 res.Slug,
		Description:          res.Description,
		DefaultEnvironmentID: res.DefaultEnvironmentID,
		CreatedAt:            res.CreatedAt,
		UpdatedAt:            res.UpdatedAt,
	}
	if res.HTTPToolIds != nil {
		body.HTTPToolIds = make([]string, len(res.HTTPToolIds))
		for i, val := range res.HTTPToolIds {
			body.HTTPToolIds[i] = val
		}
	}
	return body
}

// NewListToolsetsResponseBody builds the HTTP response body from the result of
// the "listToolsets" endpoint of the "toolsets" service.
func NewListToolsetsResponseBody(res *toolsets.ListToolsetsResult) *ListToolsetsResponseBody {
	body := &ListToolsetsResponseBody{}
	if res.Toolsets != nil {
		body.Toolsets = make([]*ToolsetResponseBody, len(res.Toolsets))
		for i, val := range res.Toolsets {
			body.Toolsets[i] = marshalToolsetsToolsetToToolsetResponseBody(val)
		}
	} else {
		body.Toolsets = []*ToolsetResponseBody{}
	}
	return body
}

// NewUpdateToolsetResponseBody builds the HTTP response body from the result
// of the "updateToolset" endpoint of the "toolsets" service.
func NewUpdateToolsetResponseBody(res *toolsets.Toolset) *UpdateToolsetResponseBody {
	body := &UpdateToolsetResponseBody{
		ID:                   res.ID,
		ProjectID:            res.ProjectID,
		OrganizationID:       res.OrganizationID,
		Name:                 res.Name,
		Slug:                 res.Slug,
		Description:          res.Description,
		DefaultEnvironmentID: res.DefaultEnvironmentID,
		CreatedAt:            res.CreatedAt,
		UpdatedAt:            res.UpdatedAt,
	}
	if res.HTTPToolIds != nil {
		body.HTTPToolIds = make([]string, len(res.HTTPToolIds))
		for i, val := range res.HTTPToolIds {
			body.HTTPToolIds[i] = val
		}
	}
	return body
}

// NewGetToolsetDetailsResponseBody builds the HTTP response body from the
// result of the "getToolsetDetails" endpoint of the "toolsets" service.
func NewGetToolsetDetailsResponseBody(res *toolsets.ToolsetDetails) *GetToolsetDetailsResponseBody {
	body := &GetToolsetDetailsResponseBody{
		ID:                   res.ID,
		ProjectID:            res.ProjectID,
		OrganizationID:       res.OrganizationID,
		Name:                 res.Name,
		Slug:                 res.Slug,
		Description:          res.Description,
		DefaultEnvironmentID: res.DefaultEnvironmentID,
		CreatedAt:            res.CreatedAt,
		UpdatedAt:            res.UpdatedAt,
	}
	if res.HTTPTools != nil {
		body.HTTPTools = make([]*HTTPToolDefinitionResponseBody, len(res.HTTPTools))
		for i, val := range res.HTTPTools {
			body.HTTPTools[i] = marshalToolsetsHTTPToolDefinitionToHTTPToolDefinitionResponseBody(val)
		}
	} else {
		body.HTTPTools = []*HTTPToolDefinitionResponseBody{}
	}
	return body
}

// NewCreateToolsetPayload builds a toolsets service createToolset endpoint
// payload.
func NewCreateToolsetPayload(body *CreateToolsetRequestBody, sessionToken *string, projectSlug *string) *toolsets.CreateToolsetPayload {
	v := &toolsets.CreateToolsetPayload{
		Name:                 *body.Name,
		Description:          body.Description,
		DefaultEnvironmentID: body.DefaultEnvironmentID,
	}
	if body.HTTPToolIds != nil {
		v.HTTPToolIds = make([]string, len(body.HTTPToolIds))
		for i, val := range body.HTTPToolIds {
			v.HTTPToolIds[i] = val
		}
	}
	v.SessionToken = sessionToken
	v.ProjectSlug = projectSlug

	return v
}

// NewListToolsetsPayload builds a toolsets service listToolsets endpoint
// payload.
func NewListToolsetsPayload(sessionToken *string, projectSlug *string) *toolsets.ListToolsetsPayload {
	v := &toolsets.ListToolsetsPayload{}
	v.SessionToken = sessionToken
	v.ProjectSlug = projectSlug

	return v
}

// NewUpdateToolsetPayload builds a toolsets service updateToolset endpoint
// payload.
func NewUpdateToolsetPayload(body *UpdateToolsetRequestBody, id string, sessionToken *string, projectSlug *string) *toolsets.UpdateToolsetPayload {
	v := &toolsets.UpdateToolsetPayload{
		Name:                 body.Name,
		Description:          body.Description,
		DefaultEnvironmentID: body.DefaultEnvironmentID,
	}
	if body.HTTPToolIdsToAdd != nil {
		v.HTTPToolIdsToAdd = make([]string, len(body.HTTPToolIdsToAdd))
		for i, val := range body.HTTPToolIdsToAdd {
			v.HTTPToolIdsToAdd[i] = val
		}
	}
	if body.HTTPToolIdsToRemove != nil {
		v.HTTPToolIdsToRemove = make([]string, len(body.HTTPToolIdsToRemove))
		for i, val := range body.HTTPToolIdsToRemove {
			v.HTTPToolIdsToRemove[i] = val
		}
	}
	v.ID = id
	v.SessionToken = sessionToken
	v.ProjectSlug = projectSlug

	return v
}

// NewDeleteToolsetPayload builds a toolsets service deleteToolset endpoint
// payload.
func NewDeleteToolsetPayload(id string, sessionToken *string, projectSlug *string) *toolsets.DeleteToolsetPayload {
	v := &toolsets.DeleteToolsetPayload{}
	v.ID = id
	v.SessionToken = sessionToken
	v.ProjectSlug = projectSlug

	return v
}

// NewGetToolsetDetailsPayload builds a toolsets service getToolsetDetails
// endpoint payload.
func NewGetToolsetDetailsPayload(id string, sessionToken *string, projectSlug *string) *toolsets.GetToolsetDetailsPayload {
	v := &toolsets.GetToolsetDetailsPayload{}
	v.ID = id
	v.SessionToken = sessionToken
	v.ProjectSlug = projectSlug

	return v
}

// ValidateCreateToolsetRequestBody runs the validations defined on
// CreateToolsetRequestBody
func ValidateCreateToolsetRequestBody(body *CreateToolsetRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}
