// Code generated by goa v3.20.1, DO NOT EDIT.
//
// toolsets HTTP client types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package client

import (
	toolsets "github.com/speakeasy-api/gram/gen/toolsets"
	goa "goa.design/goa/v3/pkg"
)

// CreateToolsetRequestBody is the type of the "toolsets" service
// "createToolset" endpoint HTTP request body.
type CreateToolsetRequestBody struct {
	// The name of the toolset
	Name string `form:"name" json:"name" xml:"name"`
	// Description of the toolset
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// List of HTTP tool names to include
	HTTPToolNames []string `form:"http_tool_names,omitempty" json:"http_tool_names,omitempty" xml:"http_tool_names,omitempty"`
	// The slug of the environment to use as the default for the toolset
	DefaultEnvironmentSlug *string `form:"default_environment_slug,omitempty" json:"default_environment_slug,omitempty" xml:"default_environment_slug,omitempty"`
}

// UpdateToolsetRequestBody is the type of the "toolsets" service
// "updateToolset" endpoint HTTP request body.
type UpdateToolsetRequestBody struct {
	// The new name of the toolset
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The new description of the toolset
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The slug of the environment to use as the default for the toolset
	DefaultEnvironmentSlug *string `form:"default_environment_slug,omitempty" json:"default_environment_slug,omitempty" xml:"default_environment_slug,omitempty"`
	// List of HTTP tool names to include
	HTTPToolNames []string `form:"http_tool_names,omitempty" json:"http_tool_names,omitempty" xml:"http_tool_names,omitempty"`
}

// CreateToolsetResponseBody is the type of the "toolsets" service
// "createToolset" endpoint HTTP response body.
type CreateToolsetResponseBody struct {
	// The ID of the toolset
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The project ID this toolset belongs to
	ProjectID *string `form:"project_id,omitempty" json:"project_id,omitempty" xml:"project_id,omitempty"`
	// The organization ID this toolset belongs to
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// The name of the toolset
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The slug of the toolset
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	// Description of the toolset
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The slug of the environment to use as the default for the toolset
	DefaultEnvironmentSlug *string `form:"default_environment_slug,omitempty" json:"default_environment_slug,omitempty" xml:"default_environment_slug,omitempty"`
	// The environment variables that are relevant to the toolset
	RelevantEnvironmentVariables []string `form:"relevant_environment_variables,omitempty" json:"relevant_environment_variables,omitempty" xml:"relevant_environment_variables,omitempty"`
	// The HTTP tools in this toolset
	HTTPTools []*HTTPToolDefinitionResponseBody `form:"http_tools,omitempty" json:"http_tools,omitempty" xml:"http_tools,omitempty"`
	// When the toolset was created.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// When the toolset was last updated.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// ListToolsetsResponseBody is the type of the "toolsets" service
// "listToolsets" endpoint HTTP response body.
type ListToolsetsResponseBody struct {
	// The list of toolsets
	Toolsets []*ToolsetDetailsResponseBody `form:"toolsets,omitempty" json:"toolsets,omitempty" xml:"toolsets,omitempty"`
}

// UpdateToolsetResponseBody is the type of the "toolsets" service
// "updateToolset" endpoint HTTP response body.
type UpdateToolsetResponseBody struct {
	// The ID of the toolset
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The project ID this toolset belongs to
	ProjectID *string `form:"project_id,omitempty" json:"project_id,omitempty" xml:"project_id,omitempty"`
	// The organization ID this toolset belongs to
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// The name of the toolset
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The slug of the toolset
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	// Description of the toolset
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The slug of the environment to use as the default for the toolset
	DefaultEnvironmentSlug *string `form:"default_environment_slug,omitempty" json:"default_environment_slug,omitempty" xml:"default_environment_slug,omitempty"`
	// The environment variables that are relevant to the toolset
	RelevantEnvironmentVariables []string `form:"relevant_environment_variables,omitempty" json:"relevant_environment_variables,omitempty" xml:"relevant_environment_variables,omitempty"`
	// The HTTP tools in this toolset
	HTTPTools []*HTTPToolDefinitionResponseBody `form:"http_tools,omitempty" json:"http_tools,omitempty" xml:"http_tools,omitempty"`
	// When the toolset was created.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// When the toolset was last updated.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// GetToolsetDetailsResponseBody is the type of the "toolsets" service
// "getToolsetDetails" endpoint HTTP response body.
type GetToolsetDetailsResponseBody struct {
	// The ID of the toolset
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The project ID this toolset belongs to
	ProjectID *string `form:"project_id,omitempty" json:"project_id,omitempty" xml:"project_id,omitempty"`
	// The organization ID this toolset belongs to
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// The name of the toolset
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The slug of the toolset
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	// Description of the toolset
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The slug of the environment to use as the default for the toolset
	DefaultEnvironmentSlug *string `form:"default_environment_slug,omitempty" json:"default_environment_slug,omitempty" xml:"default_environment_slug,omitempty"`
	// The environment variables that are relevant to the toolset
	RelevantEnvironmentVariables []string `form:"relevant_environment_variables,omitempty" json:"relevant_environment_variables,omitempty" xml:"relevant_environment_variables,omitempty"`
	// The HTTP tools in this toolset
	HTTPTools []*HTTPToolDefinitionResponseBody `form:"http_tools,omitempty" json:"http_tools,omitempty" xml:"http_tools,omitempty"`
	// When the toolset was created.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// When the toolset was last updated.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// HTTPToolDefinitionResponseBody is used to define fields on response body
// types.
type HTTPToolDefinitionResponseBody struct {
	// The ID of the HTTP tool
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The ID of the project
	ProjectID *string `form:"project_id,omitempty" json:"project_id,omitempty" xml:"project_id,omitempty"`
	// The ID of the deployment
	DeploymentID *string `form:"deployment_id,omitempty" json:"deployment_id,omitempty" xml:"deployment_id,omitempty"`
	// The ID of the OpenAPI v3 document
	Openapiv3DocumentID *string `form:"openapiv3_document_id,omitempty" json:"openapiv3_document_id,omitempty" xml:"openapiv3_document_id,omitempty"`
	// The name of the tool
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Summary of the tool
	Summary *string `form:"summary,omitempty" json:"summary,omitempty" xml:"summary,omitempty"`
	// Description of the tool
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// OpenAPI v3 operation
	Openapiv3Operation *string `form:"openapiv3_operation,omitempty" json:"openapiv3_operation,omitempty" xml:"openapiv3_operation,omitempty"`
	// The tags list for this http tool
	Tags []string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
	// Security requirements for the underlying HTTP endpoint
	Security *string `form:"security,omitempty" json:"security,omitempty" xml:"security,omitempty"`
	// HTTP method for the request
	HTTPMethod *string `form:"http_method,omitempty" json:"http_method,omitempty" xml:"http_method,omitempty"`
	// Path for the request
	Path *string `form:"path,omitempty" json:"path,omitempty" xml:"path,omitempty"`
	// Version of the schema
	SchemaVersion *string `form:"schema_version,omitempty" json:"schema_version,omitempty" xml:"schema_version,omitempty"`
	// JSON schema for the request
	Schema *string `form:"schema,omitempty" json:"schema,omitempty" xml:"schema,omitempty"`
	// The creation date of the tool.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The last update date of the tool.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// ToolsetDetailsResponseBody is used to define fields on response body types.
type ToolsetDetailsResponseBody struct {
	// The ID of the toolset
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The project ID this toolset belongs to
	ProjectID *string `form:"project_id,omitempty" json:"project_id,omitempty" xml:"project_id,omitempty"`
	// The organization ID this toolset belongs to
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// The name of the toolset
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The slug of the toolset
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	// Description of the toolset
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The slug of the environment to use as the default for the toolset
	DefaultEnvironmentSlug *string `form:"default_environment_slug,omitempty" json:"default_environment_slug,omitempty" xml:"default_environment_slug,omitempty"`
	// The environment variables that are relevant to the toolset
	RelevantEnvironmentVariables []string `form:"relevant_environment_variables,omitempty" json:"relevant_environment_variables,omitempty" xml:"relevant_environment_variables,omitempty"`
	// The HTTP tools in this toolset
	HTTPTools []*HTTPToolDefinitionResponseBody `form:"http_tools,omitempty" json:"http_tools,omitempty" xml:"http_tools,omitempty"`
	// When the toolset was created.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// When the toolset was last updated.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// NewCreateToolsetRequestBody builds the HTTP request body from the payload of
// the "createToolset" endpoint of the "toolsets" service.
func NewCreateToolsetRequestBody(p *toolsets.CreateToolsetPayload) *CreateToolsetRequestBody {
	body := &CreateToolsetRequestBody{
		Name:                   p.Name,
		Description:            p.Description,
		DefaultEnvironmentSlug: p.DefaultEnvironmentSlug,
	}
	if p.HTTPToolNames != nil {
		body.HTTPToolNames = make([]string, len(p.HTTPToolNames))
		for i, val := range p.HTTPToolNames {
			body.HTTPToolNames[i] = val
		}
	}
	return body
}

// NewUpdateToolsetRequestBody builds the HTTP request body from the payload of
// the "updateToolset" endpoint of the "toolsets" service.
func NewUpdateToolsetRequestBody(p *toolsets.UpdateToolsetPayload) *UpdateToolsetRequestBody {
	body := &UpdateToolsetRequestBody{
		Name:                   p.Name,
		Description:            p.Description,
		DefaultEnvironmentSlug: p.DefaultEnvironmentSlug,
	}
	if p.HTTPToolNames != nil {
		body.HTTPToolNames = make([]string, len(p.HTTPToolNames))
		for i, val := range p.HTTPToolNames {
			body.HTTPToolNames[i] = val
		}
	}
	return body
}

// NewCreateToolsetToolsetDetailsOK builds a "toolsets" service "createToolset"
// endpoint result from a HTTP "OK" response.
func NewCreateToolsetToolsetDetailsOK(body *CreateToolsetResponseBody) *toolsets.ToolsetDetails {
	v := &toolsets.ToolsetDetails{
		ID:                     *body.ID,
		ProjectID:              *body.ProjectID,
		OrganizationID:         *body.OrganizationID,
		Name:                   *body.Name,
		Slug:                   *body.Slug,
		Description:            body.Description,
		DefaultEnvironmentSlug: body.DefaultEnvironmentSlug,
		CreatedAt:              *body.CreatedAt,
		UpdatedAt:              *body.UpdatedAt,
	}
	if body.RelevantEnvironmentVariables != nil {
		v.RelevantEnvironmentVariables = make([]string, len(body.RelevantEnvironmentVariables))
		for i, val := range body.RelevantEnvironmentVariables {
			v.RelevantEnvironmentVariables[i] = val
		}
	}
	v.HTTPTools = make([]*toolsets.HTTPToolDefinition, len(body.HTTPTools))
	for i, val := range body.HTTPTools {
		v.HTTPTools[i] = unmarshalHTTPToolDefinitionResponseBodyToToolsetsHTTPToolDefinition(val)
	}

	return v
}

// NewListToolsetsResultOK builds a "toolsets" service "listToolsets" endpoint
// result from a HTTP "OK" response.
func NewListToolsetsResultOK(body *ListToolsetsResponseBody) *toolsets.ListToolsetsResult {
	v := &toolsets.ListToolsetsResult{}
	v.Toolsets = make([]*toolsets.ToolsetDetails, len(body.Toolsets))
	for i, val := range body.Toolsets {
		v.Toolsets[i] = unmarshalToolsetDetailsResponseBodyToToolsetsToolsetDetails(val)
	}

	return v
}

// NewUpdateToolsetToolsetDetailsOK builds a "toolsets" service "updateToolset"
// endpoint result from a HTTP "OK" response.
func NewUpdateToolsetToolsetDetailsOK(body *UpdateToolsetResponseBody) *toolsets.ToolsetDetails {
	v := &toolsets.ToolsetDetails{
		ID:                     *body.ID,
		ProjectID:              *body.ProjectID,
		OrganizationID:         *body.OrganizationID,
		Name:                   *body.Name,
		Slug:                   *body.Slug,
		Description:            body.Description,
		DefaultEnvironmentSlug: body.DefaultEnvironmentSlug,
		CreatedAt:              *body.CreatedAt,
		UpdatedAt:              *body.UpdatedAt,
	}
	if body.RelevantEnvironmentVariables != nil {
		v.RelevantEnvironmentVariables = make([]string, len(body.RelevantEnvironmentVariables))
		for i, val := range body.RelevantEnvironmentVariables {
			v.RelevantEnvironmentVariables[i] = val
		}
	}
	v.HTTPTools = make([]*toolsets.HTTPToolDefinition, len(body.HTTPTools))
	for i, val := range body.HTTPTools {
		v.HTTPTools[i] = unmarshalHTTPToolDefinitionResponseBodyToToolsetsHTTPToolDefinition(val)
	}

	return v
}

// NewGetToolsetDetailsToolsetDetailsOK builds a "toolsets" service
// "getToolsetDetails" endpoint result from a HTTP "OK" response.
func NewGetToolsetDetailsToolsetDetailsOK(body *GetToolsetDetailsResponseBody) *toolsets.ToolsetDetails {
	v := &toolsets.ToolsetDetails{
		ID:                     *body.ID,
		ProjectID:              *body.ProjectID,
		OrganizationID:         *body.OrganizationID,
		Name:                   *body.Name,
		Slug:                   *body.Slug,
		Description:            body.Description,
		DefaultEnvironmentSlug: body.DefaultEnvironmentSlug,
		CreatedAt:              *body.CreatedAt,
		UpdatedAt:              *body.UpdatedAt,
	}
	if body.RelevantEnvironmentVariables != nil {
		v.RelevantEnvironmentVariables = make([]string, len(body.RelevantEnvironmentVariables))
		for i, val := range body.RelevantEnvironmentVariables {
			v.RelevantEnvironmentVariables[i] = val
		}
	}
	v.HTTPTools = make([]*toolsets.HTTPToolDefinition, len(body.HTTPTools))
	for i, val := range body.HTTPTools {
		v.HTTPTools[i] = unmarshalHTTPToolDefinitionResponseBodyToToolsetsHTTPToolDefinition(val)
	}

	return v
}

// ValidateCreateToolsetResponseBody runs the validations defined on
// CreateToolsetResponseBody
func ValidateCreateToolsetResponseBody(body *CreateToolsetResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.ProjectID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("project_id", "body"))
	}
	if body.OrganizationID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("organization_id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slug", "body"))
	}
	if body.HTTPTools == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("http_tools", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	for _, e := range body.HTTPTools {
		if e != nil {
			if err2 := ValidateHTTPToolDefinitionResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateListToolsetsResponseBody runs the validations defined on
// ListToolsetsResponseBody
func ValidateListToolsetsResponseBody(body *ListToolsetsResponseBody) (err error) {
	if body.Toolsets == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("toolsets", "body"))
	}
	for _, e := range body.Toolsets {
		if e != nil {
			if err2 := ValidateToolsetDetailsResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateUpdateToolsetResponseBody runs the validations defined on
// UpdateToolsetResponseBody
func ValidateUpdateToolsetResponseBody(body *UpdateToolsetResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.ProjectID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("project_id", "body"))
	}
	if body.OrganizationID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("organization_id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slug", "body"))
	}
	if body.HTTPTools == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("http_tools", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	for _, e := range body.HTTPTools {
		if e != nil {
			if err2 := ValidateHTTPToolDefinitionResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateGetToolsetDetailsResponseBody runs the validations defined on
// GetToolsetDetailsResponseBody
func ValidateGetToolsetDetailsResponseBody(body *GetToolsetDetailsResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.ProjectID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("project_id", "body"))
	}
	if body.OrganizationID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("organization_id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slug", "body"))
	}
	if body.HTTPTools == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("http_tools", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	for _, e := range body.HTTPTools {
		if e != nil {
			if err2 := ValidateHTTPToolDefinitionResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateHTTPToolDefinitionResponseBody runs the validations defined on
// HTTPToolDefinitionResponseBody
func ValidateHTTPToolDefinitionResponseBody(body *HTTPToolDefinitionResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.ProjectID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("project_id", "body"))
	}
	if body.DeploymentID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("deployment_id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Summary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("summary", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Tags == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tags", "body"))
	}
	if body.HTTPMethod == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("http_method", "body"))
	}
	if body.Path == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("path", "body"))
	}
	if body.Schema == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("schema", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateToolsetDetailsResponseBody runs the validations defined on
// ToolsetDetailsResponseBody
func ValidateToolsetDetailsResponseBody(body *ToolsetDetailsResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.ProjectID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("project_id", "body"))
	}
	if body.OrganizationID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("organization_id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slug", "body"))
	}
	if body.HTTPTools == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("http_tools", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	for _, e := range body.HTTPTools {
		if e != nil {
			if err2 := ValidateHTTPToolDefinitionResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}
