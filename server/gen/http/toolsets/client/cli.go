// Code generated by goa v3.20.1, DO NOT EDIT.
//
// toolsets HTTP client CLI support package
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package client

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"

	toolsets "github.com/speakeasy-api/gram/gen/toolsets"
	goa "goa.design/goa/v3/pkg"
)

// BuildCreateToolsetPayload builds the payload for the toolsets createToolset
// endpoint from CLI flags.
func BuildCreateToolsetPayload(toolsetsCreateToolsetBody string, toolsetsCreateToolsetSessionToken string, toolsetsCreateToolsetProjectSlugInput string) (*toolsets.CreateToolsetPayload, error) {
	var err error
	var body CreateToolsetRequestBody
	{
		err = json.Unmarshal([]byte(toolsetsCreateToolsetBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"default_environment_slug\": \"d20\",\n      \"description\": \"Libero quam.\",\n      \"http_tool_names\": [\n         \"Dolorum ut.\",\n         \"Nihil rerum repellat qui saepe.\",\n         \"Ut asperiores laudantium.\"\n      ],\n      \"name\": \"Suscipit quo minima laboriosam ipsam qui.\"\n   }'")
		}
		if body.DefaultEnvironmentSlug != nil {
			err = goa.MergeErrors(err, goa.ValidatePattern("body.default_environment_slug", *body.DefaultEnvironmentSlug, "^[a-z]+(?:[a-z0-9_-]*[a-z0-9])?$"))
		}
		if body.DefaultEnvironmentSlug != nil {
			if utf8.RuneCountInString(*body.DefaultEnvironmentSlug) > 40 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.default_environment_slug", *body.DefaultEnvironmentSlug, utf8.RuneCountInString(*body.DefaultEnvironmentSlug), 40, false))
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var sessionToken *string
	{
		if toolsetsCreateToolsetSessionToken != "" {
			sessionToken = &toolsetsCreateToolsetSessionToken
		}
	}
	var projectSlugInput *string
	{
		if toolsetsCreateToolsetProjectSlugInput != "" {
			projectSlugInput = &toolsetsCreateToolsetProjectSlugInput
		}
	}
	v := &toolsets.CreateToolsetPayload{
		Name:        body.Name,
		Description: body.Description,
	}
	if body.DefaultEnvironmentSlug != nil {
		defaultEnvironmentSlug := toolsets.Slug(*body.DefaultEnvironmentSlug)
		v.DefaultEnvironmentSlug = &defaultEnvironmentSlug
	}
	if body.HTTPToolNames != nil {
		v.HTTPToolNames = make([]string, len(body.HTTPToolNames))
		for i, val := range body.HTTPToolNames {
			v.HTTPToolNames[i] = val
		}
	}
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}

// BuildListToolsetsPayload builds the payload for the toolsets listToolsets
// endpoint from CLI flags.
func BuildListToolsetsPayload(toolsetsListToolsetsSessionToken string, toolsetsListToolsetsProjectSlugInput string) (*toolsets.ListToolsetsPayload, error) {
	var sessionToken *string
	{
		if toolsetsListToolsetsSessionToken != "" {
			sessionToken = &toolsetsListToolsetsSessionToken
		}
	}
	var projectSlugInput *string
	{
		if toolsetsListToolsetsProjectSlugInput != "" {
			projectSlugInput = &toolsetsListToolsetsProjectSlugInput
		}
	}
	v := &toolsets.ListToolsetsPayload{}
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}

// BuildUpdateToolsetPayload builds the payload for the toolsets updateToolset
// endpoint from CLI flags.
func BuildUpdateToolsetPayload(toolsetsUpdateToolsetBody string, toolsetsUpdateToolsetSlug string, toolsetsUpdateToolsetSessionToken string, toolsetsUpdateToolsetProjectSlugInput string) (*toolsets.UpdateToolsetPayload, error) {
	var err error
	var body UpdateToolsetRequestBody
	{
		err = json.Unmarshal([]byte(toolsetsUpdateToolsetBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"default_environment_slug\": \"hxi\",\n      \"description\": \"Qui corrupti nihil ad tempore.\",\n      \"http_tool_names\": [\n         \"Voluptatem natus dolores.\",\n         \"Omnis similique velit voluptas perspiciatis.\",\n         \"Nihil sit.\"\n      ],\n      \"name\": \"Reiciendis sequi omnis placeat.\"\n   }'")
		}
		if body.DefaultEnvironmentSlug != nil {
			err = goa.MergeErrors(err, goa.ValidatePattern("body.default_environment_slug", *body.DefaultEnvironmentSlug, "^[a-z]+(?:[a-z0-9_-]*[a-z0-9])?$"))
		}
		if body.DefaultEnvironmentSlug != nil {
			if utf8.RuneCountInString(*body.DefaultEnvironmentSlug) > 40 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.default_environment_slug", *body.DefaultEnvironmentSlug, utf8.RuneCountInString(*body.DefaultEnvironmentSlug), 40, false))
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var slug string
	{
		slug = toolsetsUpdateToolsetSlug
		err = goa.MergeErrors(err, goa.ValidatePattern("slug", slug, "^[a-z]+(?:[a-z0-9_-]*[a-z0-9])?$"))
		if utf8.RuneCountInString(slug) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("slug", slug, utf8.RuneCountInString(slug), 40, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var sessionToken *string
	{
		if toolsetsUpdateToolsetSessionToken != "" {
			sessionToken = &toolsetsUpdateToolsetSessionToken
		}
	}
	var projectSlugInput *string
	{
		if toolsetsUpdateToolsetProjectSlugInput != "" {
			projectSlugInput = &toolsetsUpdateToolsetProjectSlugInput
		}
	}
	v := &toolsets.UpdateToolsetPayload{
		Name:        body.Name,
		Description: body.Description,
	}
	if body.DefaultEnvironmentSlug != nil {
		defaultEnvironmentSlug := toolsets.Slug(*body.DefaultEnvironmentSlug)
		v.DefaultEnvironmentSlug = &defaultEnvironmentSlug
	}
	if body.HTTPToolNames != nil {
		v.HTTPToolNames = make([]string, len(body.HTTPToolNames))
		for i, val := range body.HTTPToolNames {
			v.HTTPToolNames[i] = val
		}
	}
	v.Slug = toolsets.Slug(slug)
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}

// BuildDeleteToolsetPayload builds the payload for the toolsets deleteToolset
// endpoint from CLI flags.
func BuildDeleteToolsetPayload(toolsetsDeleteToolsetSlug string, toolsetsDeleteToolsetSessionToken string, toolsetsDeleteToolsetProjectSlugInput string) (*toolsets.DeleteToolsetPayload, error) {
	var err error
	var slug string
	{
		slug = toolsetsDeleteToolsetSlug
		err = goa.MergeErrors(err, goa.ValidatePattern("slug", slug, "^[a-z]+(?:[a-z0-9_-]*[a-z0-9])?$"))
		if utf8.RuneCountInString(slug) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("slug", slug, utf8.RuneCountInString(slug), 40, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var sessionToken *string
	{
		if toolsetsDeleteToolsetSessionToken != "" {
			sessionToken = &toolsetsDeleteToolsetSessionToken
		}
	}
	var projectSlugInput *string
	{
		if toolsetsDeleteToolsetProjectSlugInput != "" {
			projectSlugInput = &toolsetsDeleteToolsetProjectSlugInput
		}
	}
	v := &toolsets.DeleteToolsetPayload{}
	v.Slug = toolsets.Slug(slug)
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}

// BuildGetToolsetPayload builds the payload for the toolsets getToolset
// endpoint from CLI flags.
func BuildGetToolsetPayload(toolsetsGetToolsetSlug string, toolsetsGetToolsetSessionToken string, toolsetsGetToolsetProjectSlugInput string) (*toolsets.GetToolsetPayload, error) {
	var err error
	var slug string
	{
		slug = toolsetsGetToolsetSlug
		err = goa.MergeErrors(err, goa.ValidatePattern("slug", slug, "^[a-z]+(?:[a-z0-9_-]*[a-z0-9])?$"))
		if utf8.RuneCountInString(slug) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("slug", slug, utf8.RuneCountInString(slug), 40, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var sessionToken *string
	{
		if toolsetsGetToolsetSessionToken != "" {
			sessionToken = &toolsetsGetToolsetSessionToken
		}
	}
	var projectSlugInput *string
	{
		if toolsetsGetToolsetProjectSlugInput != "" {
			projectSlugInput = &toolsetsGetToolsetProjectSlugInput
		}
	}
	v := &toolsets.GetToolsetPayload{}
	v.Slug = toolsets.Slug(slug)
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}
