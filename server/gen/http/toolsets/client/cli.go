// Code generated by goa v3.20.1, DO NOT EDIT.
//
// toolsets HTTP client CLI support package
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package client

import (
	"encoding/json"
	"fmt"

	toolsets "github.com/speakeasy-api/gram/gen/toolsets"
)

// BuildCreateToolsetPayload builds the payload for the toolsets createToolset
// endpoint from CLI flags.
func BuildCreateToolsetPayload(toolsetsCreateToolsetBody string, toolsetsCreateToolsetSessionToken string, toolsetsCreateToolsetProjectSlugInput string) (*toolsets.CreateToolsetPayload, error) {
	var err error
	var body CreateToolsetRequestBody
	{
		err = json.Unmarshal([]byte(toolsetsCreateToolsetBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"default_environment_id\": \"Nulla corrupti voluptas.\",\n      \"description\": \"Voluptatem hic distinctio consectetur commodi eos soluta.\",\n      \"http_tool_names\": [\n         \"Nostrum et asperiores.\",\n         \"Est harum animi esse unde molestiae iure.\"\n      ],\n      \"name\": \"Voluptates dignissimos quis sequi distinctio veritatis.\"\n   }'")
		}
	}
	var sessionToken *string
	{
		if toolsetsCreateToolsetSessionToken != "" {
			sessionToken = &toolsetsCreateToolsetSessionToken
		}
	}
	var projectSlugInput *string
	{
		if toolsetsCreateToolsetProjectSlugInput != "" {
			projectSlugInput = &toolsetsCreateToolsetProjectSlugInput
		}
	}
	v := &toolsets.CreateToolsetPayload{
		Name:                 body.Name,
		Description:          body.Description,
		DefaultEnvironmentID: body.DefaultEnvironmentID,
	}
	if body.HTTPToolNames != nil {
		v.HTTPToolNames = make([]string, len(body.HTTPToolNames))
		for i, val := range body.HTTPToolNames {
			v.HTTPToolNames[i] = val
		}
	}
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}

// BuildListToolsetsPayload builds the payload for the toolsets listToolsets
// endpoint from CLI flags.
func BuildListToolsetsPayload(toolsetsListToolsetsSessionToken string, toolsetsListToolsetsProjectSlugInput string) (*toolsets.ListToolsetsPayload, error) {
	var sessionToken *string
	{
		if toolsetsListToolsetsSessionToken != "" {
			sessionToken = &toolsetsListToolsetsSessionToken
		}
	}
	var projectSlugInput *string
	{
		if toolsetsListToolsetsProjectSlugInput != "" {
			projectSlugInput = &toolsetsListToolsetsProjectSlugInput
		}
	}
	v := &toolsets.ListToolsetsPayload{}
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}

// BuildUpdateToolsetPayload builds the payload for the toolsets updateToolset
// endpoint from CLI flags.
func BuildUpdateToolsetPayload(toolsetsUpdateToolsetBody string, toolsetsUpdateToolsetSlug string, toolsetsUpdateToolsetSessionToken string, toolsetsUpdateToolsetProjectSlugInput string) (*toolsets.UpdateToolsetPayload, error) {
	var err error
	var body UpdateToolsetRequestBody
	{
		err = json.Unmarshal([]byte(toolsetsUpdateToolsetBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"default_environment_id\": \"Reprehenderit fugiat temporibus reprehenderit.\",\n      \"description\": \"Placeat aut nam nostrum alias.\",\n      \"http_tool_names_to_add\": [\n         \"Dolores sit laboriosam et.\",\n         \"Rerum ea.\",\n         \"Nihil omnis a dignissimos rerum nostrum non.\",\n         \"Voluptas quo vitae amet voluptatum illum aut.\"\n      ],\n      \"http_tool_names_to_remove\": [\n         \"Officiis quaerat voluptatem recusandae ut similique dolor.\",\n         \"Sint praesentium nemo in quos quasi.\",\n         \"Asperiores eaque aut minus.\"\n      ],\n      \"name\": \"Aliquam aut vero dolore mollitia perspiciatis totam.\"\n   }'")
		}
	}
	var slug string
	{
		slug = toolsetsUpdateToolsetSlug
	}
	var sessionToken *string
	{
		if toolsetsUpdateToolsetSessionToken != "" {
			sessionToken = &toolsetsUpdateToolsetSessionToken
		}
	}
	var projectSlugInput *string
	{
		if toolsetsUpdateToolsetProjectSlugInput != "" {
			projectSlugInput = &toolsetsUpdateToolsetProjectSlugInput
		}
	}
	v := &toolsets.UpdateToolsetPayload{
		Name:                 body.Name,
		Description:          body.Description,
		DefaultEnvironmentID: body.DefaultEnvironmentID,
	}
	if body.HTTPToolNamesToAdd != nil {
		v.HTTPToolNamesToAdd = make([]string, len(body.HTTPToolNamesToAdd))
		for i, val := range body.HTTPToolNamesToAdd {
			v.HTTPToolNamesToAdd[i] = val
		}
	}
	if body.HTTPToolNamesToRemove != nil {
		v.HTTPToolNamesToRemove = make([]string, len(body.HTTPToolNamesToRemove))
		for i, val := range body.HTTPToolNamesToRemove {
			v.HTTPToolNamesToRemove[i] = val
		}
	}
	v.Slug = slug
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}

// BuildDeleteToolsetPayload builds the payload for the toolsets deleteToolset
// endpoint from CLI flags.
func BuildDeleteToolsetPayload(toolsetsDeleteToolsetSlug string, toolsetsDeleteToolsetSessionToken string, toolsetsDeleteToolsetProjectSlugInput string) (*toolsets.DeleteToolsetPayload, error) {
	var slug string
	{
		slug = toolsetsDeleteToolsetSlug
	}
	var sessionToken *string
	{
		if toolsetsDeleteToolsetSessionToken != "" {
			sessionToken = &toolsetsDeleteToolsetSessionToken
		}
	}
	var projectSlugInput *string
	{
		if toolsetsDeleteToolsetProjectSlugInput != "" {
			projectSlugInput = &toolsetsDeleteToolsetProjectSlugInput
		}
	}
	v := &toolsets.DeleteToolsetPayload{}
	v.Slug = slug
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}

// BuildGetToolsetDetailsPayload builds the payload for the toolsets
// getToolsetDetails endpoint from CLI flags.
func BuildGetToolsetDetailsPayload(toolsetsGetToolsetDetailsSlug string, toolsetsGetToolsetDetailsSessionToken string, toolsetsGetToolsetDetailsProjectSlugInput string) (*toolsets.GetToolsetDetailsPayload, error) {
	var slug string
	{
		slug = toolsetsGetToolsetDetailsSlug
	}
	var sessionToken *string
	{
		if toolsetsGetToolsetDetailsSessionToken != "" {
			sessionToken = &toolsetsGetToolsetDetailsSessionToken
		}
	}
	var projectSlugInput *string
	{
		if toolsetsGetToolsetDetailsProjectSlugInput != "" {
			projectSlugInput = &toolsetsGetToolsetDetailsProjectSlugInput
		}
	}
	v := &toolsets.GetToolsetDetailsPayload{}
	v.Slug = slug
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}
