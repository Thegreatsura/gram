// Code generated by goa v3.20.1, DO NOT EDIT.
//
// toolsets HTTP client CLI support package
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package client

import (
	"encoding/json"
	"fmt"

	toolsets "github.com/speakeasy-api/gram/gen/toolsets"
)

// BuildCreateToolsetPayload builds the payload for the toolsets createToolset
// endpoint from CLI flags.
func BuildCreateToolsetPayload(toolsetsCreateToolsetBody string, toolsetsCreateToolsetSessionToken string, toolsetsCreateToolsetProjectSlugInput string) (*toolsets.CreateToolsetPayload, error) {
	var err error
	var body CreateToolsetRequestBody
	{
		err = json.Unmarshal([]byte(toolsetsCreateToolsetBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"default_environment_slug\": \"Provident delectus voluptate omnis modi est.\",\n      \"description\": \"Aliquid quae minus.\",\n      \"http_tool_names\": [\n         \"Cum ipsam voluptatem illum.\",\n         \"Nobis doloremque.\",\n         \"Hic maxime unde.\"\n      ],\n      \"name\": \"Nam aliquid ipsa distinctio veritatis numquam.\"\n   }'")
		}
	}
	var sessionToken *string
	{
		if toolsetsCreateToolsetSessionToken != "" {
			sessionToken = &toolsetsCreateToolsetSessionToken
		}
	}
	var projectSlugInput *string
	{
		if toolsetsCreateToolsetProjectSlugInput != "" {
			projectSlugInput = &toolsetsCreateToolsetProjectSlugInput
		}
	}
	v := &toolsets.CreateToolsetPayload{
		Name:                   body.Name,
		Description:            body.Description,
		DefaultEnvironmentSlug: body.DefaultEnvironmentSlug,
	}
	if body.HTTPToolNames != nil {
		v.HTTPToolNames = make([]string, len(body.HTTPToolNames))
		for i, val := range body.HTTPToolNames {
			v.HTTPToolNames[i] = val
		}
	}
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}

// BuildListToolsetsPayload builds the payload for the toolsets listToolsets
// endpoint from CLI flags.
func BuildListToolsetsPayload(toolsetsListToolsetsSessionToken string, toolsetsListToolsetsProjectSlugInput string) (*toolsets.ListToolsetsPayload, error) {
	var sessionToken *string
	{
		if toolsetsListToolsetsSessionToken != "" {
			sessionToken = &toolsetsListToolsetsSessionToken
		}
	}
	var projectSlugInput *string
	{
		if toolsetsListToolsetsProjectSlugInput != "" {
			projectSlugInput = &toolsetsListToolsetsProjectSlugInput
		}
	}
	v := &toolsets.ListToolsetsPayload{}
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}

// BuildUpdateToolsetPayload builds the payload for the toolsets updateToolset
// endpoint from CLI flags.
func BuildUpdateToolsetPayload(toolsetsUpdateToolsetBody string, toolsetsUpdateToolsetSlug string, toolsetsUpdateToolsetSessionToken string, toolsetsUpdateToolsetProjectSlugInput string) (*toolsets.UpdateToolsetPayload, error) {
	var err error
	var body UpdateToolsetRequestBody
	{
		err = json.Unmarshal([]byte(toolsetsUpdateToolsetBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"default_environment_slug\": \"Autem perspiciatis.\",\n      \"description\": \"Autem ut et voluptatem corrupti sequi.\",\n      \"http_tool_names\": [\n         \"Rem aut provident nihil officiis non.\",\n         \"Qui asperiores eveniet impedit necessitatibus est.\"\n      ],\n      \"name\": \"Quasi libero mollitia.\"\n   }'")
		}
	}
	var slug string
	{
		slug = toolsetsUpdateToolsetSlug
	}
	var sessionToken *string
	{
		if toolsetsUpdateToolsetSessionToken != "" {
			sessionToken = &toolsetsUpdateToolsetSessionToken
		}
	}
	var projectSlugInput *string
	{
		if toolsetsUpdateToolsetProjectSlugInput != "" {
			projectSlugInput = &toolsetsUpdateToolsetProjectSlugInput
		}
	}
	v := &toolsets.UpdateToolsetPayload{
		Name:                   body.Name,
		Description:            body.Description,
		DefaultEnvironmentSlug: body.DefaultEnvironmentSlug,
	}
	if body.HTTPToolNames != nil {
		v.HTTPToolNames = make([]string, len(body.HTTPToolNames))
		for i, val := range body.HTTPToolNames {
			v.HTTPToolNames[i] = val
		}
	}
	v.Slug = slug
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}

// BuildDeleteToolsetPayload builds the payload for the toolsets deleteToolset
// endpoint from CLI flags.
func BuildDeleteToolsetPayload(toolsetsDeleteToolsetSlug string, toolsetsDeleteToolsetSessionToken string, toolsetsDeleteToolsetProjectSlugInput string) (*toolsets.DeleteToolsetPayload, error) {
	var slug string
	{
		slug = toolsetsDeleteToolsetSlug
	}
	var sessionToken *string
	{
		if toolsetsDeleteToolsetSessionToken != "" {
			sessionToken = &toolsetsDeleteToolsetSessionToken
		}
	}
	var projectSlugInput *string
	{
		if toolsetsDeleteToolsetProjectSlugInput != "" {
			projectSlugInput = &toolsetsDeleteToolsetProjectSlugInput
		}
	}
	v := &toolsets.DeleteToolsetPayload{}
	v.Slug = slug
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}

// BuildGetToolsetPayload builds the payload for the toolsets getToolset
// endpoint from CLI flags.
func BuildGetToolsetPayload(toolsetsGetToolsetSlug string, toolsetsGetToolsetSessionToken string, toolsetsGetToolsetProjectSlugInput string) (*toolsets.GetToolsetPayload, error) {
	var slug string
	{
		slug = toolsetsGetToolsetSlug
	}
	var sessionToken *string
	{
		if toolsetsGetToolsetSessionToken != "" {
			sessionToken = &toolsetsGetToolsetSessionToken
		}
	}
	var projectSlugInput *string
	{
		if toolsetsGetToolsetProjectSlugInput != "" {
			projectSlugInput = &toolsetsGetToolsetProjectSlugInput
		}
	}
	v := &toolsets.GetToolsetPayload{}
	v.Slug = slug
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}
