// Code generated by goa v3.20.0, DO NOT EDIT.
//
// toolsets HTTP client CLI support package
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package client

import (
	"encoding/json"
	"fmt"

	toolsets "github.com/speakeasy-api/gram/gen/toolsets"
)

// BuildCreateToolsetPayload builds the payload for the toolsets createToolset
// endpoint from CLI flags.
func BuildCreateToolsetPayload(toolsetsCreateToolsetBody string, toolsetsCreateToolsetGramSessionToken string) (*toolsets.CreateToolsetPayload, error) {
	var err error
	var body CreateToolsetRequestBody
	{
		err = json.Unmarshal([]byte(toolsetsCreateToolsetBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"description\": \"Voluptatem mollitia dolor explicabo doloribus.\",\n      \"http_tool_ids\": [\n         \"Assumenda commodi pariatur reprehenderit.\",\n         \"Ipsa molestiae voluptas nemo.\",\n         \"Iusto voluptas culpa sed.\"\n      ],\n      \"name\": \"Labore consectetur doloribus distinctio officiis.\",\n      \"project_id\": \"Eos dolorem excepturi voluptatibus quisquam.\"\n   }'")
		}
	}
	var gramSessionToken *string
	{
		if toolsetsCreateToolsetGramSessionToken != "" {
			gramSessionToken = &toolsetsCreateToolsetGramSessionToken
		}
	}
	v := &toolsets.CreateToolsetPayload{
		Name:        body.Name,
		ProjectID:   body.ProjectID,
		Description: body.Description,
	}
	if body.HTTPToolIds != nil {
		v.HTTPToolIds = make([]string, len(body.HTTPToolIds))
		for i, val := range body.HTTPToolIds {
			v.HTTPToolIds[i] = val
		}
	}
	v.GramSessionToken = gramSessionToken

	return v, nil
}

// BuildListToolsetsPayload builds the payload for the toolsets listToolsets
// endpoint from CLI flags.
func BuildListToolsetsPayload(toolsetsListToolsetsProjectID string, toolsetsListToolsetsGramSessionToken string) (*toolsets.ListToolsetsPayload, error) {
	var projectID string
	{
		projectID = toolsetsListToolsetsProjectID
	}
	var gramSessionToken *string
	{
		if toolsetsListToolsetsGramSessionToken != "" {
			gramSessionToken = &toolsetsListToolsetsGramSessionToken
		}
	}
	v := &toolsets.ListToolsetsPayload{}
	v.ProjectID = projectID
	v.GramSessionToken = gramSessionToken

	return v, nil
}

// BuildUpdateToolsetPayload builds the payload for the toolsets updateToolset
// endpoint from CLI flags.
func BuildUpdateToolsetPayload(toolsetsUpdateToolsetBody string, toolsetsUpdateToolsetID string, toolsetsUpdateToolsetGramSessionToken string) (*toolsets.UpdateToolsetPayload, error) {
	var err error
	var body UpdateToolsetRequestBody
	{
		err = json.Unmarshal([]byte(toolsetsUpdateToolsetBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"description\": \"Laboriosam voluptatem ullam doloribus ut quaerat.\",\n      \"http_tool_ids_to_add\": [\n         \"Fuga id ea et esse.\",\n         \"Error et enim nostrum doloremque.\",\n         \"Maxime error voluptatum dolore debitis.\"\n      ],\n      \"http_tool_ids_to_remove\": [\n         \"Magnam nostrum aut sunt itaque.\",\n         \"Assumenda ut.\"\n      ],\n      \"name\": \"Nemo assumenda quas dolor.\"\n   }'")
		}
	}
	var id string
	{
		id = toolsetsUpdateToolsetID
	}
	var gramSessionToken *string
	{
		if toolsetsUpdateToolsetGramSessionToken != "" {
			gramSessionToken = &toolsetsUpdateToolsetGramSessionToken
		}
	}
	v := &toolsets.UpdateToolsetPayload{
		Name:        body.Name,
		Description: body.Description,
	}
	if body.HTTPToolIdsToAdd != nil {
		v.HTTPToolIdsToAdd = make([]string, len(body.HTTPToolIdsToAdd))
		for i, val := range body.HTTPToolIdsToAdd {
			v.HTTPToolIdsToAdd[i] = val
		}
	}
	if body.HTTPToolIdsToRemove != nil {
		v.HTTPToolIdsToRemove = make([]string, len(body.HTTPToolIdsToRemove))
		for i, val := range body.HTTPToolIdsToRemove {
			v.HTTPToolIdsToRemove[i] = val
		}
	}
	v.ID = id
	v.GramSessionToken = gramSessionToken

	return v, nil
}

// BuildGetToolsetDetailsPayload builds the payload for the toolsets
// getToolsetDetails endpoint from CLI flags.
func BuildGetToolsetDetailsPayload(toolsetsGetToolsetDetailsID string, toolsetsGetToolsetDetailsGramSessionToken string) (*toolsets.GetToolsetDetailsPayload, error) {
	var id string
	{
		id = toolsetsGetToolsetDetailsID
	}
	var gramSessionToken *string
	{
		if toolsetsGetToolsetDetailsGramSessionToken != "" {
			gramSessionToken = &toolsetsGetToolsetDetailsGramSessionToken
		}
	}
	v := &toolsets.GetToolsetDetailsPayload{}
	v.ID = id
	v.GramSessionToken = gramSessionToken

	return v, nil
}
