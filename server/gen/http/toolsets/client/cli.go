// Code generated by goa v3.20.0, DO NOT EDIT.
//
// toolsets HTTP client CLI support package
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package client

import (
	"encoding/json"
	"fmt"

	toolsets "github.com/speakeasy-api/gram/gen/toolsets"
)

// BuildCreateToolsetPayload builds the payload for the toolsets createToolset
// endpoint from CLI flags.
func BuildCreateToolsetPayload(toolsetsCreateToolsetBody string, toolsetsCreateToolsetSessionToken string, toolsetsCreateToolsetProjectSlug string) (*toolsets.CreateToolsetPayload, error) {
	var err error
	var body CreateToolsetRequestBody
	{
		err = json.Unmarshal([]byte(toolsetsCreateToolsetBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"default_environment_id\": \"Qui labore ut ad error.\",\n      \"description\": \"Eaque veniam ducimus ipsa recusandae.\",\n      \"http_tool_ids\": [\n         \"Non ipsa.\",\n         \"Vero id.\",\n         \"Est officia.\"\n      ],\n      \"name\": \"Pariatur similique nulla.\"\n   }'")
		}
	}
	var sessionToken *string
	{
		if toolsetsCreateToolsetSessionToken != "" {
			sessionToken = &toolsetsCreateToolsetSessionToken
		}
	}
	var projectSlug string
	{
		projectSlug = toolsetsCreateToolsetProjectSlug
	}
	v := &toolsets.CreateToolsetPayload{
		Name:                 body.Name,
		Description:          body.Description,
		DefaultEnvironmentID: body.DefaultEnvironmentID,
	}
	if body.HTTPToolIds != nil {
		v.HTTPToolIds = make([]string, len(body.HTTPToolIds))
		for i, val := range body.HTTPToolIds {
			v.HTTPToolIds[i] = val
		}
	}
	v.SessionToken = sessionToken
	v.ProjectSlug = projectSlug

	return v, nil
}

// BuildListToolsetsPayload builds the payload for the toolsets listToolsets
// endpoint from CLI flags.
func BuildListToolsetsPayload(toolsetsListToolsetsSessionToken string, toolsetsListToolsetsProjectSlug string) (*toolsets.ListToolsetsPayload, error) {
	var sessionToken *string
	{
		if toolsetsListToolsetsSessionToken != "" {
			sessionToken = &toolsetsListToolsetsSessionToken
		}
	}
	var projectSlug string
	{
		projectSlug = toolsetsListToolsetsProjectSlug
	}
	v := &toolsets.ListToolsetsPayload{}
	v.SessionToken = sessionToken
	v.ProjectSlug = projectSlug

	return v, nil
}

// BuildUpdateToolsetPayload builds the payload for the toolsets updateToolset
// endpoint from CLI flags.
func BuildUpdateToolsetPayload(toolsetsUpdateToolsetBody string, toolsetsUpdateToolsetID string, toolsetsUpdateToolsetSessionToken string, toolsetsUpdateToolsetProjectSlug string) (*toolsets.UpdateToolsetPayload, error) {
	var err error
	var body UpdateToolsetRequestBody
	{
		err = json.Unmarshal([]byte(toolsetsUpdateToolsetBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"default_environment_id\": \"Voluptatum doloribus et aliquam.\",\n      \"description\": \"Id occaecati aut.\",\n      \"http_tool_ids_to_add\": [\n         \"Magnam sit aliquid odio est doloribus esse.\",\n         \"Voluptatem nostrum velit omnis temporibus.\"\n      ],\n      \"http_tool_ids_to_remove\": [\n         \"Numquam error deserunt harum possimus.\",\n         \"Unde voluptates ipsa qui adipisci odit.\",\n         \"Ut quas nesciunt.\"\n      ],\n      \"name\": \"Sunt quas.\"\n   }'")
		}
	}
	var id string
	{
		id = toolsetsUpdateToolsetID
	}
	var sessionToken *string
	{
		if toolsetsUpdateToolsetSessionToken != "" {
			sessionToken = &toolsetsUpdateToolsetSessionToken
		}
	}
	var projectSlug string
	{
		projectSlug = toolsetsUpdateToolsetProjectSlug
	}
	v := &toolsets.UpdateToolsetPayload{
		Name:                 body.Name,
		Description:          body.Description,
		DefaultEnvironmentID: body.DefaultEnvironmentID,
	}
	if body.HTTPToolIdsToAdd != nil {
		v.HTTPToolIdsToAdd = make([]string, len(body.HTTPToolIdsToAdd))
		for i, val := range body.HTTPToolIdsToAdd {
			v.HTTPToolIdsToAdd[i] = val
		}
	}
	if body.HTTPToolIdsToRemove != nil {
		v.HTTPToolIdsToRemove = make([]string, len(body.HTTPToolIdsToRemove))
		for i, val := range body.HTTPToolIdsToRemove {
			v.HTTPToolIdsToRemove[i] = val
		}
	}
	v.ID = id
	v.SessionToken = sessionToken
	v.ProjectSlug = projectSlug

	return v, nil
}

// BuildDeleteToolsetPayload builds the payload for the toolsets deleteToolset
// endpoint from CLI flags.
func BuildDeleteToolsetPayload(toolsetsDeleteToolsetID string, toolsetsDeleteToolsetSessionToken string, toolsetsDeleteToolsetProjectSlug string) (*toolsets.DeleteToolsetPayload, error) {
	var id string
	{
		id = toolsetsDeleteToolsetID
	}
	var sessionToken *string
	{
		if toolsetsDeleteToolsetSessionToken != "" {
			sessionToken = &toolsetsDeleteToolsetSessionToken
		}
	}
	var projectSlug string
	{
		projectSlug = toolsetsDeleteToolsetProjectSlug
	}
	v := &toolsets.DeleteToolsetPayload{}
	v.ID = id
	v.SessionToken = sessionToken
	v.ProjectSlug = projectSlug

	return v, nil
}

// BuildGetToolsetDetailsPayload builds the payload for the toolsets
// getToolsetDetails endpoint from CLI flags.
func BuildGetToolsetDetailsPayload(toolsetsGetToolsetDetailsID string, toolsetsGetToolsetDetailsSessionToken string, toolsetsGetToolsetDetailsProjectSlug string) (*toolsets.GetToolsetDetailsPayload, error) {
	var id string
	{
		id = toolsetsGetToolsetDetailsID
	}
	var sessionToken *string
	{
		if toolsetsGetToolsetDetailsSessionToken != "" {
			sessionToken = &toolsetsGetToolsetDetailsSessionToken
		}
	}
	var projectSlug string
	{
		projectSlug = toolsetsGetToolsetDetailsProjectSlug
	}
	v := &toolsets.GetToolsetDetailsPayload{}
	v.ID = id
	v.SessionToken = sessionToken
	v.ProjectSlug = projectSlug

	return v, nil
}
