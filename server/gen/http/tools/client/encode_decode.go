// Code generated by goa v3.20.1, DO NOT EDIT.
//
// tools HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	tools "github.com/speakeasy-api/gram/gen/tools"
	goahttp "goa.design/goa/v3/http"
)

// BuildListToolsRequest instantiates a HTTP request object with method and
// path set to call the "tools" service "listTools" endpoint
func (c *Client) BuildListToolsRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListToolsToolsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("tools", "listTools", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListToolsRequest returns an encoder for requests sent to the tools
// listTools server.
func EncodeListToolsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*tools.ListToolsPayload)
		if !ok {
			return goahttp.ErrInvalidType("tools", "listTools", "*tools.ListToolsPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlug != nil {
			head := *p.ProjectSlug
			req.Header.Set("Gram-Project", head)
		}
		values := req.URL.Query()
		if p.Cursor != nil {
			values.Add("cursor", *p.Cursor)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeListToolsResponse returns a decoder for responses returned by the
// tools listTools endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeListToolsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListToolsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tools", "listTools", err)
			}
			err = ValidateListToolsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("tools", "listTools", err)
			}
			res := NewListToolsResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("tools", "listTools", resp.StatusCode, string(body))
		}
	}
}

// unmarshalHTTPToolDefinitionResponseBodyToToolsHTTPToolDefinition builds a
// value of type *tools.HTTPToolDefinition from a value of type
// *HTTPToolDefinitionResponseBody.
func unmarshalHTTPToolDefinitionResponseBodyToToolsHTTPToolDefinition(v *HTTPToolDefinitionResponseBody) *tools.HTTPToolDefinition {
	res := &tools.HTTPToolDefinition{
		ID:                  *v.ID,
		ProjectID:           *v.ProjectID,
		DeploymentID:        *v.DeploymentID,
		Openapiv3DocumentID: v.Openapiv3DocumentID,
		Name:                *v.Name,
		Summary:             *v.Summary,
		Description:         *v.Description,
		Openapiv3Operation:  v.Openapiv3Operation,
		Security:            v.Security,
		HTTPMethod:          *v.HTTPMethod,
		Path:                *v.Path,
		SchemaVersion:       v.SchemaVersion,
		Schema:              *v.Schema,
		CreatedAt:           *v.CreatedAt,
		UpdatedAt:           *v.UpdatedAt,
	}
	res.Tags = make([]string, len(v.Tags))
	for i, val := range v.Tags {
		res.Tags[i] = val
	}

	return res
}
