// Code generated by goa v3.20.1, DO NOT EDIT.
//
// tools HTTP client types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package client

import (
	tools "github.com/speakeasy-api/gram/gen/tools"
	goa "goa.design/goa/v3/pkg"
)

// ListToolsResponseBody is the type of the "tools" service "listTools"
// endpoint HTTP response body.
type ListToolsResponseBody struct {
	// The cursor to fetch results from
	NextCursor *string `form:"next_cursor,omitempty" json:"next_cursor,omitempty" xml:"next_cursor,omitempty"`
	// The list of tools
	Tools []*HTTPToolDefinitionResponseBody `form:"tools,omitempty" json:"tools,omitempty" xml:"tools,omitempty"`
}

// HTTPToolDefinitionResponseBody is used to define fields on response body
// types.
type HTTPToolDefinitionResponseBody struct {
	// The ID of the HTTP tool
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The name of the tool
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the tool
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The tags list for this http tool
	Tags []string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
	// Environment variable for the server URL
	ServerEnvVar *string `form:"server_env_var,omitempty" json:"server_env_var,omitempty" xml:"server_env_var,omitempty"`
	// Type of security (http:bearer, http:basic, apikey)
	SecurityType *string `form:"security_type,omitempty" json:"security_type,omitempty" xml:"security_type,omitempty"`
	// Environment variable for bearer token
	BearerEnvVar *string `form:"bearer_env_var,omitempty" json:"bearer_env_var,omitempty" xml:"bearer_env_var,omitempty"`
	// Environment variable for API key
	ApikeyEnvVar *string `form:"apikey_env_var,omitempty" json:"apikey_env_var,omitempty" xml:"apikey_env_var,omitempty"`
	// Environment variable for username
	UsernameEnvVar *string `form:"username_env_var,omitempty" json:"username_env_var,omitempty" xml:"username_env_var,omitempty"`
	// Environment variable for password
	PasswordEnvVar *string `form:"password_env_var,omitempty" json:"password_env_var,omitempty" xml:"password_env_var,omitempty"`
	// HTTP method for the request
	HTTPMethod *string `form:"http_method,omitempty" json:"http_method,omitempty" xml:"http_method,omitempty"`
	// Path for the request
	Path *string `form:"path,omitempty" json:"path,omitempty" xml:"path,omitempty"`
	// JSON schema for the request
	Schema *string `form:"schema,omitempty" json:"schema,omitempty" xml:"schema,omitempty"`
	// The creation date of the tool.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The last update date of the tool.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// NewListToolsResultOK builds a "tools" service "listTools" endpoint result
// from a HTTP "OK" response.
func NewListToolsResultOK(body *ListToolsResponseBody) *tools.ListToolsResult {
	v := &tools.ListToolsResult{
		NextCursor: body.NextCursor,
	}
	v.Tools = make([]*tools.HTTPToolDefinition, len(body.Tools))
	for i, val := range body.Tools {
		v.Tools[i] = unmarshalHTTPToolDefinitionResponseBodyToToolsHTTPToolDefinition(val)
	}

	return v
}

// ValidateListToolsResponseBody runs the validations defined on
// ListToolsResponseBody
func ValidateListToolsResponseBody(body *ListToolsResponseBody) (err error) {
	if body.Tools == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tools", "body"))
	}
	for _, e := range body.Tools {
		if e != nil {
			if err2 := ValidateHTTPToolDefinitionResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateHTTPToolDefinitionResponseBody runs the validations defined on
// HTTPToolDefinitionResponseBody
func ValidateHTTPToolDefinitionResponseBody(body *HTTPToolDefinitionResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Tags == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tags", "body"))
	}
	if body.HTTPMethod == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("http_method", "body"))
	}
	if body.Path == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("path", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}
