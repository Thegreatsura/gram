// Code generated by goa v3.20.1, DO NOT EDIT.
//
// tools HTTP server types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package server

import (
	tools "github.com/speakeasy-api/gram/gen/tools"
)

// ListToolsResponseBody is the type of the "tools" service "listTools"
// endpoint HTTP response body.
type ListToolsResponseBody struct {
	// The cursor to fetch results from
	NextCursor *string `form:"next_cursor,omitempty" json:"next_cursor,omitempty" xml:"next_cursor,omitempty"`
	// The list of tools
	Tools []*HTTPToolDefinitionResponseBody `form:"tools" json:"tools" xml:"tools"`
}

// HTTPToolDefinitionResponseBody is used to define fields on response body
// types.
type HTTPToolDefinitionResponseBody struct {
	// The ID of the HTTP tool
	ID string `form:"id" json:"id" xml:"id"`
	// The ID of the project
	ProjectID string `form:"project_id" json:"project_id" xml:"project_id"`
	// The ID of the deployment
	DeploymentID string `form:"deployment_id" json:"deployment_id" xml:"deployment_id"`
	// The ID of the OpenAPI v3 document
	Openapiv3DocumentID *string `form:"openapiv3_document_id,omitempty" json:"openapiv3_document_id,omitempty" xml:"openapiv3_document_id,omitempty"`
	// The name of the tool
	Name string `form:"name" json:"name" xml:"name"`
	// Summary of the tool
	Summary string `form:"summary" json:"summary" xml:"summary"`
	// Description of the tool
	Description string `form:"description" json:"description" xml:"description"`
	// OpenAPI v3 operation
	Openapiv3Operation *string `form:"openapiv3_operation,omitempty" json:"openapiv3_operation,omitempty" xml:"openapiv3_operation,omitempty"`
	// The tags list for this http tool
	Tags []string `form:"tags" json:"tags" xml:"tags"`
	// Security requirements for the underlying HTTP endpoint
	Security *string `form:"security,omitempty" json:"security,omitempty" xml:"security,omitempty"`
	// HTTP method for the request
	HTTPMethod string `form:"http_method" json:"http_method" xml:"http_method"`
	// Path for the request
	Path string `form:"path" json:"path" xml:"path"`
	// Version of the schema
	SchemaVersion *string `form:"schema_version,omitempty" json:"schema_version,omitempty" xml:"schema_version,omitempty"`
	// JSON schema for the request
	Schema string `form:"schema" json:"schema" xml:"schema"`
	// The creation date of the tool.
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// The last update date of the tool.
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// NewListToolsResponseBody builds the HTTP response body from the result of
// the "listTools" endpoint of the "tools" service.
func NewListToolsResponseBody(res *tools.ListToolsResult) *ListToolsResponseBody {
	body := &ListToolsResponseBody{
		NextCursor: res.NextCursor,
	}
	if res.Tools != nil {
		body.Tools = make([]*HTTPToolDefinitionResponseBody, len(res.Tools))
		for i, val := range res.Tools {
			body.Tools[i] = marshalToolsHTTPToolDefinitionToHTTPToolDefinitionResponseBody(val)
		}
	} else {
		body.Tools = []*HTTPToolDefinitionResponseBody{}
	}
	return body
}

// NewListToolsPayload builds a tools service listTools endpoint payload.
func NewListToolsPayload(cursor *string, deploymentID *string, sessionToken *string, projectSlugInput *string) *tools.ListToolsPayload {
	v := &tools.ListToolsPayload{}
	v.Cursor = cursor
	v.DeploymentID = deploymentID
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}
