// Code generated by goa v3.20.1, DO NOT EDIT.
//
// tools HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package server

import (
	"context"
	"net/http"
	"strings"

	tools "github.com/speakeasy-api/gram/gen/tools"
	goahttp "goa.design/goa/v3/http"
)

// EncodeListToolsResponse returns an encoder for responses returned by the
// tools listTools endpoint.
func EncodeListToolsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*tools.ListToolsResult)
		enc := encoder(ctx, w)
		body := NewListToolsResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListToolsRequest returns a decoder for requests sent to the tools
// listTools endpoint.
func DecodeListToolsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			cursor       *string
			sessionToken *string
			projectSlug  *string
		)
		cursorRaw := r.URL.Query().Get("cursor")
		if cursorRaw != "" {
			cursor = &cursorRaw
		}
		sessionTokenRaw := r.Header.Get("Gram-Session")
		if sessionTokenRaw != "" {
			sessionToken = &sessionTokenRaw
		}
		projectSlugRaw := r.Header.Get("Gram-Project")
		if projectSlugRaw != "" {
			projectSlug = &projectSlugRaw
		}
		payload := NewListToolsPayload(cursor, sessionToken, projectSlug)
		if payload.SessionToken != nil {
			if strings.Contains(*payload.SessionToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.SessionToken, " ", 2)[1]
				payload.SessionToken = &cred
			}
		}
		if payload.ProjectSlug != nil {
			if strings.Contains(*payload.ProjectSlug, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.ProjectSlug, " ", 2)[1]
				payload.ProjectSlug = &cred
			}
		}

		return payload, nil
	}
}

// marshalToolsHTTPToolDefinitionToHTTPToolDefinitionResponseBody builds a
// value of type *HTTPToolDefinitionResponseBody from a value of type
// *tools.HTTPToolDefinition.
func marshalToolsHTTPToolDefinitionToHTTPToolDefinitionResponseBody(v *tools.HTTPToolDefinition) *HTTPToolDefinitionResponseBody {
	res := &HTTPToolDefinitionResponseBody{
		ID:               v.ID,
		Name:             v.Name,
		Description:      v.Description,
		ServerEnvVar:     v.ServerEnvVar,
		SecurityType:     v.SecurityType,
		BearerEnvVar:     v.BearerEnvVar,
		ApikeyEnvVar:     v.ApikeyEnvVar,
		UsernameEnvVar:   v.UsernameEnvVar,
		PasswordEnvVar:   v.PasswordEnvVar,
		HTTPMethod:       v.HTTPMethod,
		Path:             v.Path,
		HeadersSchema:    v.HeadersSchema,
		QueriesSchema:    v.QueriesSchema,
		PathparamsSchema: v.PathparamsSchema,
		BodySchema:       v.BodySchema,
		CreatedAt:        v.CreatedAt,
		UpdatedAt:        v.UpdatedAt,
	}
	if v.Tags != nil {
		res.Tags = make([]string, len(v.Tags))
		for i, val := range v.Tags {
			res.Tags[i] = val
		}
	} else {
		res.Tags = []string{}
	}

	return res
}
