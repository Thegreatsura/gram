// Code generated by goa v3.20.1, DO NOT EDIT.
//
// packages HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	packages "github.com/speakeasy-api/gram/gen/packages"
	goahttp "goa.design/goa/v3/http"
)

// BuildCreatePackageRequest instantiates a HTTP request object with method and
// path set to call the "packages" service "createPackage" endpoint
func (c *Client) BuildCreatePackageRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreatePackagePackagesPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("packages", "createPackage", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreatePackageRequest returns an encoder for requests sent to the
// packages createPackage server.
func EncodeCreatePackageRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*packages.CreatePackagePayload)
		if !ok {
			return goahttp.ErrInvalidType("packages", "createPackage", "*packages.CreatePackagePayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		body := NewCreatePackageRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("packages", "createPackage", err)
		}
		return nil
	}
}

// DecodeCreatePackageResponse returns a decoder for responses returned by the
// packages createPackage endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeCreatePackageResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - error: internal error
func DecodeCreatePackageResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CreatePackageResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("packages", "createPackage", err)
			}
			err = ValidateCreatePackageResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("packages", "createPackage", err)
			}
			res := NewCreatePackageResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body CreatePackageUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("packages", "createPackage", err)
			}
			err = ValidateCreatePackageUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("packages", "createPackage", err)
			}
			return nil, NewCreatePackageUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body CreatePackageForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("packages", "createPackage", err)
			}
			err = ValidateCreatePackageForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("packages", "createPackage", err)
			}
			return nil, NewCreatePackageForbidden(&body)
		case http.StatusBadRequest:
			var (
				body CreatePackageBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("packages", "createPackage", err)
			}
			err = ValidateCreatePackageBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("packages", "createPackage", err)
			}
			return nil, NewCreatePackageBadRequest(&body)
		case http.StatusNotFound:
			var (
				body CreatePackageNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("packages", "createPackage", err)
			}
			err = ValidateCreatePackageNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("packages", "createPackage", err)
			}
			return nil, NewCreatePackageNotFound(&body)
		case http.StatusConflict:
			var (
				body CreatePackageConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("packages", "createPackage", err)
			}
			err = ValidateCreatePackageConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("packages", "createPackage", err)
			}
			return nil, NewCreatePackageConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body CreatePackageUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("packages", "createPackage", err)
			}
			err = ValidateCreatePackageUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("packages", "createPackage", err)
			}
			return nil, NewCreatePackageUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body CreatePackageInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("packages", "createPackage", err)
			}
			err = ValidateCreatePackageInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("packages", "createPackage", err)
			}
			return nil, NewCreatePackageInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body CreatePackageInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("packages", "createPackage", err)
				}
				err = ValidateCreatePackageInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("packages", "createPackage", err)
				}
				return nil, NewCreatePackageInvariantViolation(&body)
			case "unexpected":
				var (
					body CreatePackageUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("packages", "createPackage", err)
				}
				err = ValidateCreatePackageUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("packages", "createPackage", err)
				}
				return nil, NewCreatePackageUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("packages", "createPackage", resp.StatusCode, string(body))
			}
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("packages", "createPackage", resp.StatusCode, string(body))
		}
	}
}

// BuildListVersionsRequest instantiates a HTTP request object with method and
// path set to call the "packages" service "listVersions" endpoint
func (c *Client) BuildListVersionsRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListVersionsPackagesPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("packages", "listVersions", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListVersionsRequest returns an encoder for requests sent to the
// packages listVersions server.
func EncodeListVersionsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*packages.ListVersionsPayload)
		if !ok {
			return goahttp.ErrInvalidType("packages", "listVersions", "*packages.ListVersionsPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		values := req.URL.Query()
		values.Add("name", p.Name)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeListVersionsResponse returns a decoder for responses returned by the
// packages listVersions endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeListVersionsResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - error: internal error
func DecodeListVersionsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListVersionsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("packages", "listVersions", err)
			}
			err = ValidateListVersionsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("packages", "listVersions", err)
			}
			res := NewListVersionsResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body ListVersionsUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("packages", "listVersions", err)
			}
			err = ValidateListVersionsUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("packages", "listVersions", err)
			}
			return nil, NewListVersionsUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body ListVersionsForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("packages", "listVersions", err)
			}
			err = ValidateListVersionsForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("packages", "listVersions", err)
			}
			return nil, NewListVersionsForbidden(&body)
		case http.StatusBadRequest:
			var (
				body ListVersionsBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("packages", "listVersions", err)
			}
			err = ValidateListVersionsBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("packages", "listVersions", err)
			}
			return nil, NewListVersionsBadRequest(&body)
		case http.StatusNotFound:
			var (
				body ListVersionsNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("packages", "listVersions", err)
			}
			err = ValidateListVersionsNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("packages", "listVersions", err)
			}
			return nil, NewListVersionsNotFound(&body)
		case http.StatusConflict:
			var (
				body ListVersionsConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("packages", "listVersions", err)
			}
			err = ValidateListVersionsConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("packages", "listVersions", err)
			}
			return nil, NewListVersionsConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body ListVersionsUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("packages", "listVersions", err)
			}
			err = ValidateListVersionsUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("packages", "listVersions", err)
			}
			return nil, NewListVersionsUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body ListVersionsInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("packages", "listVersions", err)
			}
			err = ValidateListVersionsInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("packages", "listVersions", err)
			}
			return nil, NewListVersionsInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body ListVersionsInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("packages", "listVersions", err)
				}
				err = ValidateListVersionsInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("packages", "listVersions", err)
				}
				return nil, NewListVersionsInvariantViolation(&body)
			case "unexpected":
				var (
					body ListVersionsUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("packages", "listVersions", err)
				}
				err = ValidateListVersionsUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("packages", "listVersions", err)
				}
				return nil, NewListVersionsUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("packages", "listVersions", resp.StatusCode, string(body))
			}
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("packages", "listVersions", resp.StatusCode, string(body))
		}
	}
}

// BuildPublishRequest instantiates a HTTP request object with method and path
// set to call the "packages" service "publish" endpoint
func (c *Client) BuildPublishRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: PublishPackagesPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("packages", "publish", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodePublishRequest returns an encoder for requests sent to the packages
// publish server.
func EncodePublishRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*packages.PublishPayload)
		if !ok {
			return goahttp.ErrInvalidType("packages", "publish", "*packages.PublishPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		body := NewPublishRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("packages", "publish", err)
		}
		return nil
	}
}

// DecodePublishResponse returns a decoder for responses returned by the
// packages publish endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodePublishResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - error: internal error
func DecodePublishResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body PublishResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("packages", "publish", err)
			}
			err = ValidatePublishResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("packages", "publish", err)
			}
			res := NewPublishPackageResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body PublishUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("packages", "publish", err)
			}
			err = ValidatePublishUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("packages", "publish", err)
			}
			return nil, NewPublishUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body PublishForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("packages", "publish", err)
			}
			err = ValidatePublishForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("packages", "publish", err)
			}
			return nil, NewPublishForbidden(&body)
		case http.StatusBadRequest:
			var (
				body PublishBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("packages", "publish", err)
			}
			err = ValidatePublishBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("packages", "publish", err)
			}
			return nil, NewPublishBadRequest(&body)
		case http.StatusNotFound:
			var (
				body PublishNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("packages", "publish", err)
			}
			err = ValidatePublishNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("packages", "publish", err)
			}
			return nil, NewPublishNotFound(&body)
		case http.StatusConflict:
			var (
				body PublishConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("packages", "publish", err)
			}
			err = ValidatePublishConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("packages", "publish", err)
			}
			return nil, NewPublishConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body PublishUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("packages", "publish", err)
			}
			err = ValidatePublishUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("packages", "publish", err)
			}
			return nil, NewPublishUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body PublishInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("packages", "publish", err)
			}
			err = ValidatePublishInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("packages", "publish", err)
			}
			return nil, NewPublishInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body PublishInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("packages", "publish", err)
				}
				err = ValidatePublishInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("packages", "publish", err)
				}
				return nil, NewPublishInvariantViolation(&body)
			case "unexpected":
				var (
					body PublishUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("packages", "publish", err)
				}
				err = ValidatePublishUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("packages", "publish", err)
				}
				return nil, NewPublishUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("packages", "publish", resp.StatusCode, string(body))
			}
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("packages", "publish", resp.StatusCode, string(body))
		}
	}
}

// unmarshalPackageResponseBodyToPackagesPackage builds a value of type
// *packages.Package from a value of type *PackageResponseBody.
func unmarshalPackageResponseBodyToPackagesPackage(v *PackageResponseBody) *packages.Package {
	res := &packages.Package{
		ID:             *v.ID,
		ProjectID:      *v.ProjectID,
		OrganizationID: *v.OrganizationID,
		Name:           *v.Name,
		Title:          v.Title,
		Summary:        v.Summary,
		LatestVersion:  v.LatestVersion,
		CreatedAt:      *v.CreatedAt,
		UpdatedAt:      *v.UpdatedAt,
		DeletedAt:      v.DeletedAt,
	}
	if v.Keywords != nil {
		res.Keywords = make([]string, len(v.Keywords))
		for i, val := range v.Keywords {
			res.Keywords[i] = val
		}
	}

	return res
}

// unmarshalPackageVersionResponseBodyToPackagesPackageVersion builds a value
// of type *packages.PackageVersion from a value of type
// *PackageVersionResponseBody.
func unmarshalPackageVersionResponseBodyToPackagesPackageVersion(v *PackageVersionResponseBody) *packages.PackageVersion {
	res := &packages.PackageVersion{
		ID:           *v.ID,
		PackageID:    *v.PackageID,
		DeploymentID: *v.DeploymentID,
		Visibility:   *v.Visibility,
		Semver:       *v.Semver,
		CreatedAt:    *v.CreatedAt,
	}

	return res
}
