// Code generated by goa v3.20.1, DO NOT EDIT.
//
// packages HTTP client types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package client

import (
	packages "github.com/speakeasy-api/gram/gen/packages"
	goa "goa.design/goa/v3/pkg"
)

// CreatePackageRequestBody is the type of the "packages" service
// "createPackage" endpoint HTTP request body.
type CreatePackageRequestBody struct {
	// The name of the package
	Name string `form:"name" json:"name" xml:"name"`
	// The title of the package
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// The summary of the package
	Summary *string `form:"summary,omitempty" json:"summary,omitempty" xml:"summary,omitempty"`
	// The keywords of the package
	Keywords []string `form:"keywords,omitempty" json:"keywords,omitempty" xml:"keywords,omitempty"`
}

// PublishRequestBody is the type of the "packages" service "publish" endpoint
// HTTP request body.
type PublishRequestBody struct {
	// The name of the package
	Name string `form:"name" json:"name" xml:"name"`
	// The new semantic version of the package to publish
	Version string `form:"version" json:"version" xml:"version"`
	// The deployment ID to associate with the package version
	DeploymentID string `form:"deployment_id" json:"deployment_id" xml:"deployment_id"`
	// The visibility of the package version
	Visibility string `form:"visibility" json:"visibility" xml:"visibility"`
}

// CreatePackageResponseBody is the type of the "packages" service
// "createPackage" endpoint HTTP response body.
type CreatePackageResponseBody struct {
	// The newly created package
	Package *PackageResponseBody `form:"package,omitempty" json:"package,omitempty" xml:"package,omitempty"`
}

// ListVersionsResponseBody is the type of the "packages" service
// "listVersions" endpoint HTTP response body.
type ListVersionsResponseBody struct {
	Package  *PackageResponseBody          `form:"package,omitempty" json:"package,omitempty" xml:"package,omitempty"`
	Versions []*PackageVersionResponseBody `form:"versions,omitempty" json:"versions,omitempty" xml:"versions,omitempty"`
}

// PublishResponseBody is the type of the "packages" service "publish" endpoint
// HTTP response body.
type PublishResponseBody struct {
	// The published package
	Package *PackageResponseBody `form:"package,omitempty" json:"package,omitempty" xml:"package,omitempty"`
	// The published package version
	Version *PackageVersionResponseBody `form:"version,omitempty" json:"version,omitempty" xml:"version,omitempty"`
}

// PackageResponseBody is used to define fields on response body types.
type PackageResponseBody struct {
	// The ID of the package
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The ID of the project that owns the package
	ProjectID *string `form:"project_id,omitempty" json:"project_id,omitempty" xml:"project_id,omitempty"`
	// The ID of the organization that owns the package
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// The name of the package
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The title of the package
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// The summary of the package
	Summary *string `form:"summary,omitempty" json:"summary,omitempty" xml:"summary,omitempty"`
	// The keywords of the package
	Keywords []string `form:"keywords,omitempty" json:"keywords,omitempty" xml:"keywords,omitempty"`
	// The latest version of the package
	LatestVersion *string `form:"latest_version,omitempty" json:"latest_version,omitempty" xml:"latest_version,omitempty"`
	// The creation date of the package
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The last update date of the package
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// The deletion date of the package
	DeletedAt *string `form:"deleted_at,omitempty" json:"deleted_at,omitempty" xml:"deleted_at,omitempty"`
}

// PackageVersionResponseBody is used to define fields on response body types.
type PackageVersionResponseBody struct {
	// The ID of the package version
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The ID of the package that the version belongs to
	PackageID *string `form:"package_id,omitempty" json:"package_id,omitempty" xml:"package_id,omitempty"`
	// The ID of the deployment that the version belongs to
	DeploymentID *string `form:"deployment_id,omitempty" json:"deployment_id,omitempty" xml:"deployment_id,omitempty"`
	// The visibility of the package version
	Visibility *string `form:"visibility,omitempty" json:"visibility,omitempty" xml:"visibility,omitempty"`
	// The semantic version value
	Semver *string `form:"semver,omitempty" json:"semver,omitempty" xml:"semver,omitempty"`
	// The creation date of the package version
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
}

// NewCreatePackageRequestBody builds the HTTP request body from the payload of
// the "createPackage" endpoint of the "packages" service.
func NewCreatePackageRequestBody(p *packages.CreatePackageForm) *CreatePackageRequestBody {
	body := &CreatePackageRequestBody{
		Name:    p.Name,
		Title:   p.Title,
		Summary: p.Summary,
	}
	if p.Keywords != nil {
		body.Keywords = make([]string, len(p.Keywords))
		for i, val := range p.Keywords {
			body.Keywords[i] = val
		}
	}
	return body
}

// NewPublishRequestBody builds the HTTP request body from the payload of the
// "publish" endpoint of the "packages" service.
func NewPublishRequestBody(p *packages.PublishPackageForm) *PublishRequestBody {
	body := &PublishRequestBody{
		Name:         p.Name,
		Version:      p.Version,
		DeploymentID: p.DeploymentID,
		Visibility:   p.Visibility,
	}
	return body
}

// NewCreatePackageResultOK builds a "packages" service "createPackage"
// endpoint result from a HTTP "OK" response.
func NewCreatePackageResultOK(body *CreatePackageResponseBody) *packages.CreatePackageResult {
	v := &packages.CreatePackageResult{}
	v.Package = unmarshalPackageResponseBodyToPackagesPackage(body.Package)

	return v
}

// NewListVersionsResultOK builds a "packages" service "listVersions" endpoint
// result from a HTTP "OK" response.
func NewListVersionsResultOK(body *ListVersionsResponseBody) *packages.ListVersionsResult {
	v := &packages.ListVersionsResult{}
	v.Package = unmarshalPackageResponseBodyToPackagesPackage(body.Package)
	v.Versions = make([]*packages.PackageVersion, len(body.Versions))
	for i, val := range body.Versions {
		v.Versions[i] = unmarshalPackageVersionResponseBodyToPackagesPackageVersion(val)
	}

	return v
}

// NewPublishPackageResultOK builds a "packages" service "publish" endpoint
// result from a HTTP "OK" response.
func NewPublishPackageResultOK(body *PublishResponseBody) *packages.PublishPackageResult {
	v := &packages.PublishPackageResult{}
	v.Package = unmarshalPackageResponseBodyToPackagesPackage(body.Package)
	v.Version = unmarshalPackageVersionResponseBodyToPackagesPackageVersion(body.Version)

	return v
}

// ValidateCreatePackageResponseBody runs the validations defined on
// CreatePackageResponseBody
func ValidateCreatePackageResponseBody(body *CreatePackageResponseBody) (err error) {
	if body.Package == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("package", "body"))
	}
	if body.Package != nil {
		if err2 := ValidatePackageResponseBody(body.Package); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateListVersionsResponseBody runs the validations defined on
// ListVersionsResponseBody
func ValidateListVersionsResponseBody(body *ListVersionsResponseBody) (err error) {
	if body.Package == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("package", "body"))
	}
	if body.Versions == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("versions", "body"))
	}
	if body.Package != nil {
		if err2 := ValidatePackageResponseBody(body.Package); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.Versions {
		if e != nil {
			if err2 := ValidatePackageVersionResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidatePublishResponseBody runs the validations defined on
// PublishResponseBody
func ValidatePublishResponseBody(body *PublishResponseBody) (err error) {
	if body.Package == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("package", "body"))
	}
	if body.Version == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("version", "body"))
	}
	if body.Package != nil {
		if err2 := ValidatePackageResponseBody(body.Package); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Version != nil {
		if err2 := ValidatePackageVersionResponseBody(body.Version); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidatePackageResponseBody runs the validations defined on
// PackageResponseBody
func ValidatePackageResponseBody(body *PackageResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ProjectID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("project_id", "body"))
	}
	if body.OrganizationID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("organization_id", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	if body.DeletedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.deleted_at", *body.DeletedAt, goa.FormatDateTime))
	}
	return
}

// ValidatePackageVersionResponseBody runs the validations defined on
// PackageVersionResponseBody
func ValidatePackageVersionResponseBody(body *PackageVersionResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.PackageID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("package_id", "body"))
	}
	if body.DeploymentID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("deployment_id", "body"))
	}
	if body.Visibility == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("visibility", "body"))
	}
	if body.Semver == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("semver", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	return
}
