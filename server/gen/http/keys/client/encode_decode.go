// Code generated by goa v3.20.0, DO NOT EDIT.
//
// keys HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	keys "github.com/speakeasy-api/gram/gen/keys"
	goahttp "goa.design/goa/v3/http"
)

// BuildCreateKeyRequest instantiates a HTTP request object with method and
// path set to call the "keys" service "createKey" endpoint
func (c *Client) BuildCreateKeyRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateKeyKeysPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("keys", "createKey", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateKeyRequest returns an encoder for requests sent to the keys
// createKey server.
func EncodeCreateKeyRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*keys.CreateKeyPayload)
		if !ok {
			return goahttp.ErrInvalidType("keys", "createKey", "*keys.CreateKeyPayload", v)
		}
		if p.GramSessionToken != nil {
			head := *p.GramSessionToken
			req.Header.Set("Gram-Session", head)
		}
		body := NewCreateKeyRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("keys", "createKey", err)
		}
		return nil
	}
}

// DecodeCreateKeyResponse returns a decoder for responses returned by the keys
// createKey endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeCreateKeyResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CreateKeyResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("keys", "createKey", err)
			}
			err = ValidateCreateKeyResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("keys", "createKey", err)
			}
			res := NewCreateKeyGramKeyOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("keys", "createKey", resp.StatusCode, string(body))
		}
	}
}

// BuildListKeysRequest instantiates a HTTP request object with method and path
// set to call the "keys" service "listKeys" endpoint
func (c *Client) BuildListKeysRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListKeysKeysPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("keys", "listKeys", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListKeysRequest returns an encoder for requests sent to the keys
// listKeys server.
func EncodeListKeysRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*keys.ListKeysPayload)
		if !ok {
			return goahttp.ErrInvalidType("keys", "listKeys", "*keys.ListKeysPayload", v)
		}
		if p.GramSessionToken != nil {
			head := *p.GramSessionToken
			req.Header.Set("Gram-Session", head)
		}
		return nil
	}
}

// DecodeListKeysResponse returns a decoder for responses returned by the keys
// listKeys endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeListKeysResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListKeysResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("keys", "listKeys", err)
			}
			err = ValidateListKeysResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("keys", "listKeys", err)
			}
			res := NewListKeysResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("keys", "listKeys", resp.StatusCode, string(body))
		}
	}
}

// BuildRevokeKeyRequest instantiates a HTTP request object with method and
// path set to call the "keys" service "revokeKey" endpoint
func (c *Client) BuildRevokeKeyRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*keys.RevokeKeyPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("keys", "revokeKey", "*keys.RevokeKeyPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RevokeKeyKeysPath(id)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("keys", "revokeKey", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRevokeKeyRequest returns an encoder for requests sent to the keys
// revokeKey server.
func EncodeRevokeKeyRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*keys.RevokeKeyPayload)
		if !ok {
			return goahttp.ErrInvalidType("keys", "revokeKey", "*keys.RevokeKeyPayload", v)
		}
		if p.GramSessionToken != nil {
			head := *p.GramSessionToken
			req.Header.Set("Gram-Session", head)
		}
		return nil
	}
}

// DecodeRevokeKeyResponse returns a decoder for responses returned by the keys
// revokeKey endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeRevokeKeyResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body RevokeKeyResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("keys", "revokeKey", err)
			}
			err = ValidateRevokeKeyResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("keys", "revokeKey", err)
			}
			res := NewRevokeKeyGramKeyOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("keys", "revokeKey", resp.StatusCode, string(body))
		}
	}
}

// unmarshalGramKeyResponseBodyToKeysGramKey builds a value of type
// *keys.GramKey from a value of type *GramKeyResponseBody.
func unmarshalGramKeyResponseBodyToKeysGramKey(v *GramKeyResponseBody) *keys.GramKey {
	res := &keys.GramKey{
		ID:              *v.ID,
		OrganizationID:  *v.OrganizationID,
		ProjectID:       v.ProjectID,
		CreatedByUserID: *v.CreatedByUserID,
		Name:            *v.Name,
		Token:           *v.Token,
		CreatedAt:       *v.CreatedAt,
		UpdatedAt:       *v.UpdatedAt,
	}
	res.Scopes = make([]string, len(v.Scopes))
	for i, val := range v.Scopes {
		res.Scopes[i] = val
	}

	return res
}
