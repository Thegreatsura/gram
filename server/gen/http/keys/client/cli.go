// Code generated by goa v3.20.0, DO NOT EDIT.
//
// keys HTTP client CLI support package
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package client

import (
	"encoding/json"
	"fmt"

	keys "github.com/speakeasy-api/gram/gen/keys"
)

// BuildCreateKeyPayload builds the payload for the keys createKey endpoint
// from CLI flags.
func BuildCreateKeyPayload(keysCreateKeyBody string, keysCreateKeyGramSessionToken string) (*keys.CreateKeyPayload, error) {
	var err error
	var body CreateKeyRequestBody
	{
		err = json.Unmarshal([]byte(keysCreateKeyBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"name\": \"At expedita magni perferendis amet unde.\"\n   }'")
		}
	}
	var gramSessionToken *string
	{
		if keysCreateKeyGramSessionToken != "" {
			gramSessionToken = &keysCreateKeyGramSessionToken
		}
	}
	v := &keys.CreateKeyPayload{
		Name: body.Name,
	}
	v.GramSessionToken = gramSessionToken

	return v, nil
}

// BuildListKeysPayload builds the payload for the keys listKeys endpoint from
// CLI flags.
func BuildListKeysPayload(keysListKeysGramSessionToken string) (*keys.ListKeysPayload, error) {
	var gramSessionToken *string
	{
		if keysListKeysGramSessionToken != "" {
			gramSessionToken = &keysListKeysGramSessionToken
		}
	}
	v := &keys.ListKeysPayload{}
	v.GramSessionToken = gramSessionToken

	return v, nil
}

// BuildRevokeKeyPayload builds the payload for the keys revokeKey endpoint
// from CLI flags.
func BuildRevokeKeyPayload(keysRevokeKeyID string, keysRevokeKeyGramSessionToken string) (*keys.RevokeKeyPayload, error) {
	var id string
	{
		id = keysRevokeKeyID
	}
	var gramSessionToken *string
	{
		if keysRevokeKeyGramSessionToken != "" {
			gramSessionToken = &keysRevokeKeyGramSessionToken
		}
	}
	v := &keys.RevokeKeyPayload{}
	v.ID = id
	v.GramSessionToken = gramSessionToken

	return v, nil
}
