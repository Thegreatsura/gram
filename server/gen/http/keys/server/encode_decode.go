// Code generated by goa v3.20.0, DO NOT EDIT.
//
// keys HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package server

import (
	"context"
	"errors"
	"io"
	"net/http"
	"strings"

	keys "github.com/speakeasy-api/gram/gen/keys"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeCreateKeyResponse returns an encoder for responses returned by the
// keys createKey endpoint.
func EncodeCreateKeyResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*keys.Key)
		enc := encoder(ctx, w)
		body := NewCreateKeyResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeCreateKeyRequest returns a decoder for requests sent to the keys
// createKey endpoint.
func DecodeCreateKeyRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body CreateKeyRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateKeyRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			gramSessionToken *string
		)
		gramSessionTokenRaw := r.Header.Get("Gram-Session")
		if gramSessionTokenRaw != "" {
			gramSessionToken = &gramSessionTokenRaw
		}
		payload := NewCreateKeyPayload(&body, gramSessionToken)
		if payload.GramSessionToken != nil {
			if strings.Contains(*payload.GramSessionToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.GramSessionToken, " ", 2)[1]
				payload.GramSessionToken = &cred
			}
		}

		return payload, nil
	}
}

// EncodeListKeysResponse returns an encoder for responses returned by the keys
// listKeys endpoint.
func EncodeListKeysResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*keys.ListKeysResult)
		enc := encoder(ctx, w)
		body := NewListKeysResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListKeysRequest returns a decoder for requests sent to the keys
// listKeys endpoint.
func DecodeListKeysRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			gramSessionToken *string
		)
		gramSessionTokenRaw := r.Header.Get("Gram-Session")
		if gramSessionTokenRaw != "" {
			gramSessionToken = &gramSessionTokenRaw
		}
		payload := NewListKeysPayload(gramSessionToken)
		if payload.GramSessionToken != nil {
			if strings.Contains(*payload.GramSessionToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.GramSessionToken, " ", 2)[1]
				payload.GramSessionToken = &cred
			}
		}

		return payload, nil
	}
}

// EncodeRevokeKeyResponse returns an encoder for responses returned by the
// keys revokeKey endpoint.
func EncodeRevokeKeyResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*keys.Key)
		enc := encoder(ctx, w)
		body := NewRevokeKeyResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeRevokeKeyRequest returns a decoder for requests sent to the keys
// revokeKey endpoint.
func DecodeRevokeKeyRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			id               string
			gramSessionToken *string

			params = mux.Vars(r)
		)
		id = params["id"]
		gramSessionTokenRaw := r.Header.Get("Gram-Session")
		if gramSessionTokenRaw != "" {
			gramSessionToken = &gramSessionTokenRaw
		}
		payload := NewRevokeKeyPayload(id, gramSessionToken)
		if payload.GramSessionToken != nil {
			if strings.Contains(*payload.GramSessionToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.GramSessionToken, " ", 2)[1]
				payload.GramSessionToken = &cred
			}
		}

		return payload, nil
	}
}

// marshalKeysKeyToKeyResponseBody builds a value of type *KeyResponseBody from
// a value of type *keys.Key.
func marshalKeysKeyToKeyResponseBody(v *keys.Key) *KeyResponseBody {
	res := &KeyResponseBody{
		ID:              v.ID,
		OrganizationID:  v.OrganizationID,
		ProjectID:       v.ProjectID,
		CreatedByUserID: v.CreatedByUserID,
		Name:            v.Name,
		Token:           v.Token,
		CreatedAt:       v.CreatedAt,
		UpdatedAt:       v.UpdatedAt,
	}
	if v.Scopes != nil {
		res.Scopes = make([]string, len(v.Scopes))
		for i, val := range v.Scopes {
			res.Scopes[i] = val
		}
	} else {
		res.Scopes = []string{}
	}

	return res
}
