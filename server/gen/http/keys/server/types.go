// Code generated by goa v3.20.1, DO NOT EDIT.
//
// keys HTTP server types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package server

import (
	keys "github.com/speakeasy-api/gram/gen/keys"
	goa "goa.design/goa/v3/pkg"
)

// CreateKeyRequestBody is the type of the "keys" service "createKey" endpoint
// HTTP request body.
type CreateKeyRequestBody struct {
	// The name of the key
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// CreateKeyResponseBody is the type of the "keys" service "createKey" endpoint
// HTTP response body.
type CreateKeyResponseBody struct {
	// The ID of the key
	ID string `form:"id" json:"id" xml:"id"`
	// The organization ID this key belongs to
	OrganizationID string `form:"organization_id" json:"organization_id" xml:"organization_id"`
	// The optional project ID this key is scoped to
	ProjectID *string `form:"project_id,omitempty" json:"project_id,omitempty" xml:"project_id,omitempty"`
	// The ID of the user who created this key
	CreatedByUserID string `form:"created_by_user_id" json:"created_by_user_id" xml:"created_by_user_id"`
	// The name of the key
	Name string `form:"name" json:"name" xml:"name"`
	// The API token value
	Token string `form:"token" json:"token" xml:"token"`
	// List of permission scopes for this key
	Scopes []string `form:"scopes" json:"scopes" xml:"scopes"`
	// The creation date of the key.
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// When the key was last updated.
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// ListKeysResponseBody is the type of the "keys" service "listKeys" endpoint
// HTTP response body.
type ListKeysResponseBody struct {
	Keys []*KeyResponseBody `form:"keys" json:"keys" xml:"keys"`
}

// KeyResponseBody is used to define fields on response body types.
type KeyResponseBody struct {
	// The ID of the key
	ID string `form:"id" json:"id" xml:"id"`
	// The organization ID this key belongs to
	OrganizationID string `form:"organization_id" json:"organization_id" xml:"organization_id"`
	// The optional project ID this key is scoped to
	ProjectID *string `form:"project_id,omitempty" json:"project_id,omitempty" xml:"project_id,omitempty"`
	// The ID of the user who created this key
	CreatedByUserID string `form:"created_by_user_id" json:"created_by_user_id" xml:"created_by_user_id"`
	// The name of the key
	Name string `form:"name" json:"name" xml:"name"`
	// The API token value
	Token string `form:"token" json:"token" xml:"token"`
	// List of permission scopes for this key
	Scopes []string `form:"scopes" json:"scopes" xml:"scopes"`
	// The creation date of the key.
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// When the key was last updated.
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// NewCreateKeyResponseBody builds the HTTP response body from the result of
// the "createKey" endpoint of the "keys" service.
func NewCreateKeyResponseBody(res *keys.Key) *CreateKeyResponseBody {
	body := &CreateKeyResponseBody{
		ID:              res.ID,
		OrganizationID:  res.OrganizationID,
		ProjectID:       res.ProjectID,
		CreatedByUserID: res.CreatedByUserID,
		Name:            res.Name,
		Token:           res.Token,
		CreatedAt:       res.CreatedAt,
		UpdatedAt:       res.UpdatedAt,
	}
	if res.Scopes != nil {
		body.Scopes = make([]string, len(res.Scopes))
		for i, val := range res.Scopes {
			body.Scopes[i] = val
		}
	} else {
		body.Scopes = []string{}
	}
	return body
}

// NewListKeysResponseBody builds the HTTP response body from the result of the
// "listKeys" endpoint of the "keys" service.
func NewListKeysResponseBody(res *keys.ListKeysResult) *ListKeysResponseBody {
	body := &ListKeysResponseBody{}
	if res.Keys != nil {
		body.Keys = make([]*KeyResponseBody, len(res.Keys))
		for i, val := range res.Keys {
			body.Keys[i] = marshalKeysKeyToKeyResponseBody(val)
		}
	} else {
		body.Keys = []*KeyResponseBody{}
	}
	return body
}

// NewCreateKeyPayload builds a keys service createKey endpoint payload.
func NewCreateKeyPayload(body *CreateKeyRequestBody, sessionToken *string) *keys.CreateKeyPayload {
	v := &keys.CreateKeyPayload{
		Name: *body.Name,
	}
	v.SessionToken = sessionToken

	return v
}

// NewListKeysPayload builds a keys service listKeys endpoint payload.
func NewListKeysPayload(sessionToken *string) *keys.ListKeysPayload {
	v := &keys.ListKeysPayload{}
	v.SessionToken = sessionToken

	return v
}

// NewRevokeKeyPayload builds a keys service revokeKey endpoint payload.
func NewRevokeKeyPayload(id string, sessionToken *string) *keys.RevokeKeyPayload {
	v := &keys.RevokeKeyPayload{}
	v.ID = id
	v.SessionToken = sessionToken

	return v
}

// ValidateCreateKeyRequestBody runs the validations defined on
// CreateKeyRequestBody
func ValidateCreateKeyRequestBody(body *CreateKeyRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}
