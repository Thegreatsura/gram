// Code generated by goa v3.20.1, DO NOT EDIT.
//
// auth HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	auth "github.com/speakeasy-api/gram/gen/auth"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildCallbackRequest instantiates a HTTP request object with method and path
// set to call the "auth" service "callback" endpoint
func (c *Client) BuildCallbackRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CallbackAuthPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("auth", "callback", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCallbackRequest returns an encoder for requests sent to the auth
// callback server.
func EncodeCallbackRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*auth.CallbackPayload)
		if !ok {
			return goahttp.ErrInvalidType("auth", "callback", "*auth.CallbackPayload", v)
		}
		values := req.URL.Query()
		values.Add("id_token", p.IDToken)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeCallbackResponse returns a decoder for responses returned by the auth
// callback endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeCallbackResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusTemporaryRedirect:
			var (
				location     string
				sessionToken string
				err          error
			)
			locationRaw := resp.Header.Get("Location")
			if locationRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("location", "header"))
			}
			location = locationRaw
			sessionTokenRaw := resp.Header.Get("Gram-Session")
			if sessionTokenRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("session_token", "header"))
			}
			sessionToken = sessionTokenRaw
			var (
				sessionCookie    string
				sessionCookieRaw string

				cookies = resp.Cookies()
			)
			for _, c := range cookies {
				switch c.Name {
				case "gram_session":
					sessionCookieRaw = c.Value
				}
			}
			if sessionCookieRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("session_cookie", "cookie"))
			}
			sessionCookie = sessionCookieRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "callback", err)
			}
			res := NewCallbackResultTemporaryRedirect(location, sessionToken, sessionCookie)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("auth", "callback", resp.StatusCode, string(body))
		}
	}
}

// BuildLoginRequest instantiates a HTTP request object with method and path
// set to call the "auth" service "login" endpoint
func (c *Client) BuildLoginRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: LoginAuthPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("auth", "login", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeLoginResponse returns a decoder for responses returned by the auth
// login endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeLoginResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusTemporaryRedirect:
			var (
				location string
				err      error
			)
			locationRaw := resp.Header.Get("Location")
			if locationRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("location", "header"))
			}
			location = locationRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "login", err)
			}
			res := NewLoginResultTemporaryRedirect(location)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("auth", "login", resp.StatusCode, string(body))
		}
	}
}

// BuildSwitchScopesRequest instantiates a HTTP request object with method and
// path set to call the "auth" service "switchScopes" endpoint
func (c *Client) BuildSwitchScopesRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SwitchScopesAuthPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("auth", "switchScopes", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSwitchScopesRequest returns an encoder for requests sent to the auth
// switchScopes server.
func EncodeSwitchScopesRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*auth.SwitchScopesPayload)
		if !ok {
			return goahttp.ErrInvalidType("auth", "switchScopes", "*auth.SwitchScopesPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		values := req.URL.Query()
		if p.OrganizationID != nil {
			values.Add("organization_id", *p.OrganizationID)
		}
		if p.ProjectID != nil {
			values.Add("project_id", *p.ProjectID)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeSwitchScopesResponse returns a decoder for responses returned by the
// auth switchScopes endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeSwitchScopesResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				sessionToken string
				err          error
			)
			sessionTokenRaw := resp.Header.Get("Gram-Session")
			if sessionTokenRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("session_token", "header"))
			}
			sessionToken = sessionTokenRaw
			var (
				sessionCookie    string
				sessionCookieRaw string

				cookies = resp.Cookies()
			)
			for _, c := range cookies {
				switch c.Name {
				case "gram_session":
					sessionCookieRaw = c.Value
				}
			}
			if sessionCookieRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("session_cookie", "cookie"))
			}
			sessionCookie = sessionCookieRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "switchScopes", err)
			}
			res := NewSwitchScopesResultOK(sessionToken, sessionCookie)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("auth", "switchScopes", resp.StatusCode, string(body))
		}
	}
}

// BuildLogoutRequest instantiates a HTTP request object with method and path
// set to call the "auth" service "logout" endpoint
func (c *Client) BuildLogoutRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: LogoutAuthPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("auth", "logout", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeLogoutRequest returns an encoder for requests sent to the auth logout
// server.
func EncodeLogoutRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*auth.LogoutPayload)
		if !ok {
			return goahttp.ErrInvalidType("auth", "logout", "*auth.LogoutPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		return nil
	}
}

// DecodeLogoutResponse returns a decoder for responses returned by the auth
// logout endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeLogoutResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				sessionCookie    string
				sessionCookieRaw string

				cookies = resp.Cookies()
				err     error
			)
			for _, c := range cookies {
				switch c.Name {
				case "gram_session":
					sessionCookieRaw = c.Value
				}
			}
			if sessionCookieRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("session_cookie", "cookie"))
			}
			sessionCookie = sessionCookieRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "logout", err)
			}
			res := NewLogoutResultOK(sessionCookie)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("auth", "logout", resp.StatusCode, string(body))
		}
	}
}

// BuildInfoRequest instantiates a HTTP request object with method and path set
// to call the "auth" service "info" endpoint
func (c *Client) BuildInfoRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: InfoAuthPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("auth", "info", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeInfoRequest returns an encoder for requests sent to the auth info
// server.
func EncodeInfoRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*auth.InfoPayload)
		if !ok {
			return goahttp.ErrInvalidType("auth", "info", "*auth.InfoPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		return nil
	}
}

// DecodeInfoResponse returns a decoder for responses returned by the auth info
// endpoint. restoreBody controls whether the response body should be restored
// after having been read.
func DecodeInfoResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body InfoResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "info", err)
			}
			err = ValidateInfoResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "info", err)
			}
			var (
				sessionToken string
			)
			sessionTokenRaw := resp.Header.Get("Gram-Session")
			if sessionTokenRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("session_token", "header"))
			}
			sessionToken = sessionTokenRaw
			var (
				sessionCookie    string
				sessionCookieRaw string

				cookies = resp.Cookies()
			)
			for _, c := range cookies {
				switch c.Name {
				case "gram_session":
					sessionCookieRaw = c.Value
				}
			}
			if sessionCookieRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("session_cookie", "cookie"))
			}
			sessionCookie = sessionCookieRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "info", err)
			}
			res := NewInfoResultOK(&body, sessionToken, sessionCookie)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("auth", "info", resp.StatusCode, string(body))
		}
	}
}

// unmarshalOrganizationResponseBodyToAuthOrganization builds a value of type
// *auth.Organization from a value of type *OrganizationResponseBody.
func unmarshalOrganizationResponseBodyToAuthOrganization(v *OrganizationResponseBody) *auth.Organization {
	res := &auth.Organization{
		OrganizationID:   *v.OrganizationID,
		OrganizationName: *v.OrganizationName,
		OrganizationSlug: *v.OrganizationSlug,
		AccountType:      *v.AccountType,
	}
	res.Projects = make([]*auth.Project, len(v.Projects))
	for i, val := range v.Projects {
		res.Projects[i] = unmarshalProjectResponseBodyToAuthProject(val)
	}

	return res
}

// unmarshalProjectResponseBodyToAuthProject builds a value of type
// *auth.Project from a value of type *ProjectResponseBody.
func unmarshalProjectResponseBodyToAuthProject(v *ProjectResponseBody) *auth.Project {
	res := &auth.Project{
		ProjectID:   *v.ProjectID,
		ProjectName: *v.ProjectName,
		ProjectSlug: auth.Slug(*v.ProjectSlug),
	}

	return res
}
