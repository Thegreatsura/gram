// Code generated by goa v3.20.0, DO NOT EDIT.
//
// auth HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	auth "github.com/speakeasy-api/gram/gen/auth"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildAuthCallbackRequest instantiates a HTTP request object with method and
// path set to call the "auth" service "auth callback" endpoint
func (c *Client) BuildAuthCallbackRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AuthCallbackAuthPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("auth", "auth callback", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAuthCallbackRequest returns an encoder for requests sent to the auth
// auth callback server.
func EncodeAuthCallbackRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*auth.AuthCallbackPayload)
		if !ok {
			return goahttp.ErrInvalidType("auth", "auth callback", "*auth.AuthCallbackPayload", v)
		}
		values := req.URL.Query()
		values.Add("shared_token", p.SharedToken)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeAuthCallbackResponse returns a decoder for responses returned by the
// auth auth callback endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeAuthCallbackResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusTemporaryRedirect:
			var (
				location    string
				gramSession string
				err         error
			)
			locationRaw := resp.Header.Get("Location")
			if locationRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("location", "header"))
			}
			location = locationRaw
			gramSessionRaw := resp.Header.Get("X-Gram-Session")
			if gramSessionRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("gram_session", "header"))
			}
			gramSession = gramSessionRaw
			var (
				gramSessionCookie    string
				gramSessionCookieRaw string

				cookies = resp.Cookies()
			)
			for _, c := range cookies {
				switch c.Name {
				case "gram_session":
					gramSessionCookieRaw = c.Value
				}
			}
			if gramSessionCookieRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("gram_session_cookie", "cookie"))
			}
			gramSessionCookie = gramSessionCookieRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "auth callback", err)
			}
			res := NewAuthCallbackResultTemporaryRedirect(location, gramSession, gramSessionCookie)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("auth", "auth callback", resp.StatusCode, string(body))
		}
	}
}

// BuildAuthSwitchScopesRequest instantiates a HTTP request object with method
// and path set to call the "auth" service "auth switch scopes" endpoint
func (c *Client) BuildAuthSwitchScopesRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AuthSwitchScopesAuthPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("auth", "auth switch scopes", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAuthSwitchScopesRequest returns an encoder for requests sent to the
// auth auth switch scopes server.
func EncodeAuthSwitchScopesRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*auth.AuthSwitchScopesPayload)
		if !ok {
			return goahttp.ErrInvalidType("auth", "auth switch scopes", "*auth.AuthSwitchScopesPayload", v)
		}
		if p.GramSession != nil {
			head := *p.GramSession
			req.Header.Set("X-Gram-Session", head)
		}
		values := req.URL.Query()
		if p.OrgSlug != nil {
			values.Add("org_slug", *p.OrgSlug)
		}
		req.URL.RawQuery = values.Encode()
		body := NewAuthSwitchScopesRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("auth", "auth switch scopes", err)
		}
		return nil
	}
}

// DecodeAuthSwitchScopesResponse returns a decoder for responses returned by
// the auth auth switch scopes endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeAuthSwitchScopesResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				gramSession string
				err         error
			)
			gramSessionRaw := resp.Header.Get("X-Gram-Session")
			if gramSessionRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("gram_session", "header"))
			}
			gramSession = gramSessionRaw
			var (
				gramSessionCookie    string
				gramSessionCookieRaw string

				cookies = resp.Cookies()
			)
			for _, c := range cookies {
				switch c.Name {
				case "gram_session":
					gramSessionCookieRaw = c.Value
				}
			}
			if gramSessionCookieRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("gram_session_cookie", "cookie"))
			}
			gramSessionCookie = gramSessionCookieRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "auth switch scopes", err)
			}
			res := NewAuthSwitchScopesResultOK(gramSession, gramSessionCookie)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("auth", "auth switch scopes", resp.StatusCode, string(body))
		}
	}
}

// BuildAuthLogoutRequest instantiates a HTTP request object with method and
// path set to call the "auth" service "auth logout" endpoint
func (c *Client) BuildAuthLogoutRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AuthLogoutAuthPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("auth", "auth logout", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeAuthLogoutResponse returns a decoder for responses returned by the
// auth auth logout endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeAuthLogoutResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				gramSession    string
				gramSessionRaw string

				cookies = resp.Cookies()
				err     error
			)
			for _, c := range cookies {
				switch c.Name {
				case "gram_session":
					gramSessionRaw = c.Value
				}
			}
			if gramSessionRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("gram_session", "cookie"))
			}
			gramSession = gramSessionRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "auth logout", err)
			}
			res := NewAuthLogoutResultOK(gramSession)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("auth", "auth logout", resp.StatusCode, string(body))
		}
	}
}

// BuildAuthInfoRequest instantiates a HTTP request object with method and path
// set to call the "auth" service "auth info" endpoint
func (c *Client) BuildAuthInfoRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AuthInfoAuthPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("auth", "auth info", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAuthInfoRequest returns an encoder for requests sent to the auth auth
// info server.
func EncodeAuthInfoRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*auth.AuthInfoPayload)
		if !ok {
			return goahttp.ErrInvalidType("auth", "auth info", "*auth.AuthInfoPayload", v)
		}
		if p.GramSession != nil {
			head := *p.GramSession
			req.Header.Set("X-Gram-Session", head)
		}
		return nil
	}
}

// DecodeAuthInfoResponse returns a decoder for responses returned by the auth
// auth info endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeAuthInfoResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body AuthInfoResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "auth info", err)
			}
			err = ValidateAuthInfoResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "auth info", err)
			}
			var (
				gramSession *string
			)
			gramSessionRaw := resp.Header.Get("X-Gram-Session")
			if gramSessionRaw != "" {
				gramSession = &gramSessionRaw
			}
			var (
				gramSessionCookie    *string
				gramSessionCookieRaw string

				cookies = resp.Cookies()
			)
			for _, c := range cookies {
				switch c.Name {
				case "gram_session":
					gramSessionCookieRaw = c.Value
				}
			}
			if gramSessionCookieRaw != "" {
				gramSessionCookie = &gramSessionCookieRaw
			}
			res := NewAuthInfoResultOK(&body, gramSession, gramSessionCookie)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("auth", "auth info", resp.StatusCode, string(body))
		}
	}
}
