// Code generated by goa v3.20.0, DO NOT EDIT.
//
// auth HTTP client CLI support package
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package client

import (
	"encoding/json"
	"fmt"

	auth "github.com/speakeasy-api/gram/gen/auth"
)

// BuildAuthCallbackPayload builds the payload for the auth auth callback
// endpoint from CLI flags.
func BuildAuthCallbackPayload(authAuthCallbackSharedToken string) (*auth.AuthCallbackPayload, error) {
	var sharedToken string
	{
		sharedToken = authAuthCallbackSharedToken
	}
	v := &auth.AuthCallbackPayload{}
	v.SharedToken = sharedToken

	return v, nil
}

// BuildAuthSwitchScopesPayload builds the payload for the auth auth switch
// scopes endpoint from CLI flags.
func BuildAuthSwitchScopesPayload(authAuthSwitchScopesBody string, authAuthSwitchScopesOrgSlug string, authAuthSwitchScopesGramSession string) (*auth.AuthSwitchScopesPayload, error) {
	var err error
	var body AuthSwitchScopesRequestBody
	{
		err = json.Unmarshal([]byte(authAuthSwitchScopesBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"project_id\": \"Omnis eligendi a nostrum illo quis eos.\"\n   }'")
		}
	}
	var orgSlug *string
	{
		if authAuthSwitchScopesOrgSlug != "" {
			orgSlug = &authAuthSwitchScopesOrgSlug
		}
	}
	var gramSession *string
	{
		if authAuthSwitchScopesGramSession != "" {
			gramSession = &authAuthSwitchScopesGramSession
		}
	}
	v := &auth.AuthSwitchScopesPayload{
		ProjectID: body.ProjectID,
	}
	v.OrgSlug = orgSlug
	v.GramSession = gramSession

	return v, nil
}

// BuildAuthInfoPayload builds the payload for the auth auth info endpoint from
// CLI flags.
func BuildAuthInfoPayload(authAuthInfoGramSession string) (*auth.AuthInfoPayload, error) {
	var gramSession *string
	{
		if authAuthInfoGramSession != "" {
			gramSession = &authAuthInfoGramSession
		}
	}
	v := &auth.AuthInfoPayload{}
	v.GramSession = gramSession

	return v, nil
}
