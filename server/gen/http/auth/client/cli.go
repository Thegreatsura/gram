// Code generated by goa v3.20.0, DO NOT EDIT.
//
// auth HTTP client CLI support package
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package client

import (
	auth "github.com/speakeasy-api/gram/gen/auth"
)

// BuildCallbackPayload builds the payload for the auth callback endpoint from
// CLI flags.
func BuildCallbackPayload(authCallbackSharedToken string) (*auth.CallbackPayload, error) {
	var sharedToken string
	{
		sharedToken = authCallbackSharedToken
	}
	v := &auth.CallbackPayload{}
	v.SharedToken = sharedToken

	return v, nil
}

// BuildSwitchScopesPayload builds the payload for the auth switchScopes
// endpoint from CLI flags.
func BuildSwitchScopesPayload(authSwitchScopesOrganizationID string, authSwitchScopesProjectID string, authSwitchScopesGramSessionToken string) (*auth.SwitchScopesPayload, error) {
	var organizationID *string
	{
		if authSwitchScopesOrganizationID != "" {
			organizationID = &authSwitchScopesOrganizationID
		}
	}
	var projectID *string
	{
		if authSwitchScopesProjectID != "" {
			projectID = &authSwitchScopesProjectID
		}
	}
	var gramSessionToken *string
	{
		if authSwitchScopesGramSessionToken != "" {
			gramSessionToken = &authSwitchScopesGramSessionToken
		}
	}
	v := &auth.SwitchScopesPayload{}
	v.OrganizationID = organizationID
	v.ProjectID = projectID
	v.GramSessionToken = gramSessionToken

	return v, nil
}

// BuildLogoutPayload builds the payload for the auth logout endpoint from CLI
// flags.
func BuildLogoutPayload(authLogoutGramSessionToken string) (*auth.LogoutPayload, error) {
	var gramSessionToken *string
	{
		if authLogoutGramSessionToken != "" {
			gramSessionToken = &authLogoutGramSessionToken
		}
	}
	v := &auth.LogoutPayload{}
	v.GramSessionToken = gramSessionToken

	return v, nil
}

// BuildInfoPayload builds the payload for the auth info endpoint from CLI
// flags.
func BuildInfoPayload(authInfoGramSessionToken string) (*auth.InfoPayload, error) {
	var gramSessionToken *string
	{
		if authInfoGramSessionToken != "" {
			gramSessionToken = &authInfoGramSessionToken
		}
	}
	v := &auth.InfoPayload{}
	v.GramSessionToken = gramSessionToken

	return v, nil
}
