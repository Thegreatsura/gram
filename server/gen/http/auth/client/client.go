// Code generated by goa v3.20.0, DO NOT EDIT.
//
// auth client HTTP transport
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the auth service endpoint HTTP clients.
type Client struct {
	// AuthCallback Doer is the HTTP client used to make requests to the auth
	// callback endpoint.
	AuthCallbackDoer goahttp.Doer

	// AuthSwitchScopes Doer is the HTTP client used to make requests to the auth
	// switch scopes endpoint.
	AuthSwitchScopesDoer goahttp.Doer

	// AuthLogout Doer is the HTTP client used to make requests to the auth logout
	// endpoint.
	AuthLogoutDoer goahttp.Doer

	// AuthInfo Doer is the HTTP client used to make requests to the auth info
	// endpoint.
	AuthInfoDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the auth service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		AuthCallbackDoer:     doer,
		AuthSwitchScopesDoer: doer,
		AuthLogoutDoer:       doer,
		AuthInfoDoer:         doer,
		RestoreResponseBody:  restoreBody,
		scheme:               scheme,
		host:                 host,
		decoder:              dec,
		encoder:              enc,
	}
}

// AuthCallback returns an endpoint that makes HTTP requests to the auth
// service auth callback server.
func (c *Client) AuthCallback() goa.Endpoint {
	var (
		encodeRequest  = EncodeAuthCallbackRequest(c.encoder)
		decodeResponse = DecodeAuthCallbackResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildAuthCallbackRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.AuthCallbackDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("auth", "auth callback", err)
		}
		return decodeResponse(resp)
	}
}

// AuthSwitchScopes returns an endpoint that makes HTTP requests to the auth
// service auth switch scopes server.
func (c *Client) AuthSwitchScopes() goa.Endpoint {
	var (
		encodeRequest  = EncodeAuthSwitchScopesRequest(c.encoder)
		decodeResponse = DecodeAuthSwitchScopesResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildAuthSwitchScopesRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.AuthSwitchScopesDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("auth", "auth switch scopes", err)
		}
		return decodeResponse(resp)
	}
}

// AuthLogout returns an endpoint that makes HTTP requests to the auth service
// auth logout server.
func (c *Client) AuthLogout() goa.Endpoint {
	var (
		decodeResponse = DecodeAuthLogoutResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildAuthLogoutRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.AuthLogoutDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("auth", "auth logout", err)
		}
		return decodeResponse(resp)
	}
}

// AuthInfo returns an endpoint that makes HTTP requests to the auth service
// auth info server.
func (c *Client) AuthInfo() goa.Endpoint {
	var (
		encodeRequest  = EncodeAuthInfoRequest(c.encoder)
		decodeResponse = DecodeAuthInfoResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildAuthInfoRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.AuthInfoDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("auth", "auth info", err)
		}
		return decodeResponse(resp)
	}
}
