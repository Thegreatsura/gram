// Code generated by goa v3.20.0, DO NOT EDIT.
//
// auth HTTP client types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package client

import (
	auth "github.com/speakeasy-api/gram/gen/auth"
	goa "goa.design/goa/v3/pkg"
)

// AuthInfoResponseBody is the type of the "auth" service "auth info" endpoint
// HTTP response body.
type AuthInfoResponseBody struct {
	UserID               *string                     `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	UserEmail            *string                     `form:"user_email,omitempty" json:"user_email,omitempty" xml:"user_email,omitempty"`
	ActiveOrganizationID *string                     `form:"active_organization_id,omitempty" json:"active_organization_id,omitempty" xml:"active_organization_id,omitempty"`
	ActiveProjectID      *string                     `form:"active_project_id,omitempty" json:"active_project_id,omitempty" xml:"active_project_id,omitempty"`
	Organizations        []*OrganizationResponseBody `form:"organizations,omitempty" json:"organizations,omitempty" xml:"organizations,omitempty"`
}

// OrganizationResponseBody is used to define fields on response body types.
type OrganizationResponseBody struct {
	OrganizationID   *string                `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	OrganizationName *string                `form:"organization_name,omitempty" json:"organization_name,omitempty" xml:"organization_name,omitempty"`
	OrganizationSlug *string                `form:"organization_slug,omitempty" json:"organization_slug,omitempty" xml:"organization_slug,omitempty"`
	AccountType      *string                `form:"account_type,omitempty" json:"account_type,omitempty" xml:"account_type,omitempty"`
	Projects         []*ProjectResponseBody `form:"projects,omitempty" json:"projects,omitempty" xml:"projects,omitempty"`
}

// ProjectResponseBody is used to define fields on response body types.
type ProjectResponseBody struct {
	ProjectID *string `form:"project_id,omitempty" json:"project_id,omitempty" xml:"project_id,omitempty"`
}

// NewAuthCallbackResultTemporaryRedirect builds a "auth" service "auth
// callback" endpoint result from a HTTP "TemporaryRedirect" response.
func NewAuthCallbackResultTemporaryRedirect(location string, gramSession string, gramSessionCookie string) *auth.AuthCallbackResult {
	v := &auth.AuthCallbackResult{}
	v.Location = location
	v.GramSession = gramSession
	v.GramSessionCookie = gramSessionCookie

	return v
}

// NewAuthSwitchScopesResultOK builds a "auth" service "auth switch scopes"
// endpoint result from a HTTP "OK" response.
func NewAuthSwitchScopesResultOK(gramSession string, gramSessionCookie string) *auth.AuthSwitchScopesResult {
	v := &auth.AuthSwitchScopesResult{}
	v.GramSession = gramSession
	v.GramSessionCookie = gramSessionCookie

	return v
}

// NewAuthLogoutResultOK builds a "auth" service "auth logout" endpoint result
// from a HTTP "OK" response.
func NewAuthLogoutResultOK(gramSession string) *auth.AuthLogoutResult {
	v := &auth.AuthLogoutResult{}
	v.GramSession = gramSession

	return v
}

// NewAuthInfoResultOK builds a "auth" service "auth info" endpoint result from
// a HTTP "OK" response.
func NewAuthInfoResultOK(body *AuthInfoResponseBody, gramSession string, gramSessionCookie string) *auth.AuthInfoResult {
	v := &auth.AuthInfoResult{
		UserID:               *body.UserID,
		UserEmail:            *body.UserEmail,
		ActiveOrganizationID: *body.ActiveOrganizationID,
		ActiveProjectID:      *body.ActiveProjectID,
	}
	v.Organizations = make([]*auth.Organization, len(body.Organizations))
	for i, val := range body.Organizations {
		v.Organizations[i] = unmarshalOrganizationResponseBodyToAuthOrganization(val)
	}
	v.GramSession = gramSession
	v.GramSessionCookie = gramSessionCookie

	return v
}

// ValidateAuthInfoResponseBody runs the validations defined on Auth
// InfoResponseBody
func ValidateAuthInfoResponseBody(body *AuthInfoResponseBody) (err error) {
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_id", "body"))
	}
	if body.UserEmail == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_email", "body"))
	}
	if body.ActiveOrganizationID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("active_organization_id", "body"))
	}
	if body.ActiveProjectID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("active_project_id", "body"))
	}
	if body.Organizations == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("organizations", "body"))
	}
	for _, e := range body.Organizations {
		if e != nil {
			if err2 := ValidateOrganizationResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateOrganizationResponseBody runs the validations defined on
// OrganizationResponseBody
func ValidateOrganizationResponseBody(body *OrganizationResponseBody) (err error) {
	if body.OrganizationID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("organization_id", "body"))
	}
	if body.OrganizationName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("organization_name", "body"))
	}
	if body.OrganizationSlug == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("organization_slug", "body"))
	}
	if body.AccountType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("account_type", "body"))
	}
	if body.Projects == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("projects", "body"))
	}
	for _, e := range body.Projects {
		if e != nil {
			if err2 := ValidateProjectResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateProjectResponseBody runs the validations defined on
// ProjectResponseBody
func ValidateProjectResponseBody(body *ProjectResponseBody) (err error) {
	if body.ProjectID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("project_id", "body"))
	}
	return
}
