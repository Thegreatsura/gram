// Code generated by goa v3.20.0, DO NOT EDIT.
//
// auth HTTP client types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package client

import (
	auth "github.com/speakeasy-api/gram/gen/auth"
	goa "goa.design/goa/v3/pkg"
)

// AuthSwitchScopesRequestBody is the type of the "auth" service "auth switch
// scopes" endpoint HTTP request body.
type AuthSwitchScopesRequestBody struct {
	// The project id to switch scopes too
	ProjectID *string `form:"project_id,omitempty" json:"project_id,omitempty" xml:"project_id,omitempty"`
}

// AuthInfoResponseBody is the type of the "auth" service "auth info" endpoint
// HTTP response body.
type AuthInfoResponseBody struct {
	UserID           *string `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	UserEmail        *string `form:"user_email,omitempty" json:"user_email,omitempty" xml:"user_email,omitempty"`
	OrganizationSlug *string `form:"organization_slug,omitempty" json:"organization_slug,omitempty" xml:"organization_slug,omitempty"`
	OrganizationName *string `form:"organization_name,omitempty" json:"organization_name,omitempty" xml:"organization_name,omitempty"`
	AccountType      *string `form:"account_type,omitempty" json:"account_type,omitempty" xml:"account_type,omitempty"`
	ProjectID        *string `form:"project_id,omitempty" json:"project_id,omitempty" xml:"project_id,omitempty"`
	ProjectName      *string `form:"project_name,omitempty" json:"project_name,omitempty" xml:"project_name,omitempty"`
}

// NewAuthSwitchScopesRequestBody builds the HTTP request body from the payload
// of the "auth switch scopes" endpoint of the "auth" service.
func NewAuthSwitchScopesRequestBody(p *auth.AuthSwitchScopesPayload) *AuthSwitchScopesRequestBody {
	body := &AuthSwitchScopesRequestBody{
		ProjectID: p.ProjectID,
	}
	return body
}

// NewAuthCallbackResultTemporaryRedirect builds a "auth" service "auth
// callback" endpoint result from a HTTP "TemporaryRedirect" response.
func NewAuthCallbackResultTemporaryRedirect(location string, gramSession string, gramSessionCookie string) *auth.AuthCallbackResult {
	v := &auth.AuthCallbackResult{}
	v.Location = location
	v.GramSession = gramSession
	v.GramSessionCookie = gramSessionCookie

	return v
}

// NewAuthSwitchScopesResultOK builds a "auth" service "auth switch scopes"
// endpoint result from a HTTP "OK" response.
func NewAuthSwitchScopesResultOK(gramSession string, gramSessionCookie string) *auth.AuthSwitchScopesResult {
	v := &auth.AuthSwitchScopesResult{}
	v.GramSession = gramSession
	v.GramSessionCookie = gramSessionCookie

	return v
}

// NewAuthLogoutResultOK builds a "auth" service "auth logout" endpoint result
// from a HTTP "OK" response.
func NewAuthLogoutResultOK(gramSession string) *auth.AuthLogoutResult {
	v := &auth.AuthLogoutResult{}
	v.GramSession = gramSession

	return v
}

// NewAuthInfoResultOK builds a "auth" service "auth info" endpoint result from
// a HTTP "OK" response.
func NewAuthInfoResultOK(body *AuthInfoResponseBody, gramSession *string, gramSessionCookie *string) *auth.AuthInfoResult {
	v := &auth.AuthInfoResult{
		UserID:           *body.UserID,
		UserEmail:        *body.UserEmail,
		OrganizationSlug: *body.OrganizationSlug,
		OrganizationName: *body.OrganizationName,
		AccountType:      *body.AccountType,
		ProjectID:        *body.ProjectID,
		ProjectName:      *body.ProjectName,
	}
	v.GramSession = gramSession
	v.GramSessionCookie = gramSessionCookie

	return v
}

// ValidateAuthInfoResponseBody runs the validations defined on Auth
// InfoResponseBody
func ValidateAuthInfoResponseBody(body *AuthInfoResponseBody) (err error) {
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_id", "body"))
	}
	if body.UserEmail == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_email", "body"))
	}
	if body.OrganizationSlug == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("organization_slug", "body"))
	}
	if body.OrganizationName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("organization_name", "body"))
	}
	if body.AccountType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("account_type", "body"))
	}
	if body.ProjectID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("project_id", "body"))
	}
	if body.ProjectName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("project_name", "body"))
	}
	return
}
