// Code generated by goa v3.20.1, DO NOT EDIT.
//
// auth HTTP client types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package client

import (
	"unicode/utf8"

	auth "github.com/speakeasy-api/gram/gen/auth"
	goa "goa.design/goa/v3/pkg"
)

// InfoResponseBody is the type of the "auth" service "info" endpoint HTTP
// response body.
type InfoResponseBody struct {
	UserID               *string                          `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	UserEmail            *string                          `form:"user_email,omitempty" json:"user_email,omitempty" xml:"user_email,omitempty"`
	ActiveOrganizationID *string                          `form:"active_organization_id,omitempty" json:"active_organization_id,omitempty" xml:"active_organization_id,omitempty"`
	Organizations        []*OrganizationEntryResponseBody `form:"organizations,omitempty" json:"organizations,omitempty" xml:"organizations,omitempty"`
}

// OrganizationEntryResponseBody is used to define fields on response body
// types.
type OrganizationEntryResponseBody struct {
	ID          *string                     `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name        *string                     `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Slug        *string                     `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	AccountType *string                     `form:"account_type,omitempty" json:"account_type,omitempty" xml:"account_type,omitempty"`
	Projects    []*ProjectEntryResponseBody `form:"projects,omitempty" json:"projects,omitempty" xml:"projects,omitempty"`
}

// ProjectEntryResponseBody is used to define fields on response body types.
type ProjectEntryResponseBody struct {
	// The ID of the project
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The name of the project
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The slug of the project
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
}

// NewCallbackResultTemporaryRedirect builds a "auth" service "callback"
// endpoint result from a HTTP "TemporaryRedirect" response.
func NewCallbackResultTemporaryRedirect(location string, sessionToken string, sessionCookie string) *auth.CallbackResult {
	v := &auth.CallbackResult{}
	v.Location = location
	v.SessionToken = sessionToken
	v.SessionCookie = sessionCookie

	return v
}

// NewLoginResultTemporaryRedirect builds a "auth" service "login" endpoint
// result from a HTTP "TemporaryRedirect" response.
func NewLoginResultTemporaryRedirect(location string) *auth.LoginResult {
	v := &auth.LoginResult{}
	v.Location = location

	return v
}

// NewSwitchScopesResultOK builds a "auth" service "switchScopes" endpoint
// result from a HTTP "OK" response.
func NewSwitchScopesResultOK(sessionToken string, sessionCookie string) *auth.SwitchScopesResult {
	v := &auth.SwitchScopesResult{}
	v.SessionToken = sessionToken
	v.SessionCookie = sessionCookie

	return v
}

// NewLogoutResultOK builds a "auth" service "logout" endpoint result from a
// HTTP "OK" response.
func NewLogoutResultOK(sessionCookie string) *auth.LogoutResult {
	v := &auth.LogoutResult{}
	v.SessionCookie = sessionCookie

	return v
}

// NewInfoResultOK builds a "auth" service "info" endpoint result from a HTTP
// "OK" response.
func NewInfoResultOK(body *InfoResponseBody, sessionToken string, sessionCookie string) *auth.InfoResult {
	v := &auth.InfoResult{
		UserID:               *body.UserID,
		UserEmail:            *body.UserEmail,
		ActiveOrganizationID: *body.ActiveOrganizationID,
	}
	v.Organizations = make([]*auth.OrganizationEntry, len(body.Organizations))
	for i, val := range body.Organizations {
		v.Organizations[i] = unmarshalOrganizationEntryResponseBodyToAuthOrganizationEntry(val)
	}
	v.SessionToken = sessionToken
	v.SessionCookie = sessionCookie

	return v
}

// ValidateInfoResponseBody runs the validations defined on InfoResponseBody
func ValidateInfoResponseBody(body *InfoResponseBody) (err error) {
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_id", "body"))
	}
	if body.UserEmail == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_email", "body"))
	}
	if body.ActiveOrganizationID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("active_organization_id", "body"))
	}
	if body.Organizations == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("organizations", "body"))
	}
	for _, e := range body.Organizations {
		if e != nil {
			if err2 := ValidateOrganizationEntryResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateOrganizationEntryResponseBody runs the validations defined on
// OrganizationEntryResponseBody
func ValidateOrganizationEntryResponseBody(body *OrganizationEntryResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slug", "body"))
	}
	if body.AccountType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("account_type", "body"))
	}
	if body.Projects == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("projects", "body"))
	}
	for _, e := range body.Projects {
		if e != nil {
			if err2 := ValidateProjectEntryResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateProjectEntryResponseBody runs the validations defined on
// ProjectEntryResponseBody
func ValidateProjectEntryResponseBody(body *ProjectEntryResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slug", "body"))
	}
	if body.Slug != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.slug", *body.Slug, "^[a-z]+(?:[a-z0-9_-]*[a-z0-9])?$"))
	}
	if body.Slug != nil {
		if utf8.RuneCountInString(*body.Slug) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.slug", *body.Slug, utf8.RuneCountInString(*body.Slug), 40, false))
		}
	}
	return
}
