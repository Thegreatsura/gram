// Code generated by goa v3.20.0, DO NOT EDIT.
//
// auth HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package server

import (
	"context"
	"net/http"
	"strings"

	auth "github.com/speakeasy-api/gram/gen/auth"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeAuthCallbackResponse returns an encoder for responses returned by the
// auth auth callback endpoint.
func EncodeAuthCallbackResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*auth.AuthCallbackResult)
		w.Header().Set("Location", res.Location)
		w.Header().Set("X-Gram-Session", res.GramSession)
		gramSessionCookie := res.GramSessionCookie
		http.SetCookie(w, &http.Cookie{
			Name:     "gram_session",
			Value:    gramSessionCookie,
			MaxAge:   2592000,
			Secure:   true,
			HttpOnly: true,
		})
		w.WriteHeader(http.StatusTemporaryRedirect)
		return nil
	}
}

// DecodeAuthCallbackRequest returns a decoder for requests sent to the auth
// auth callback endpoint.
func DecodeAuthCallbackRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			sharedToken string
			err         error
		)
		sharedToken = r.URL.Query().Get("shared_token")
		if sharedToken == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("shared_token", "query string"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewAuthCallbackPayload(sharedToken)

		return payload, nil
	}
}

// EncodeAuthSwitchScopesResponse returns an encoder for responses returned by
// the auth auth switch scopes endpoint.
func EncodeAuthSwitchScopesResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*auth.AuthSwitchScopesResult)
		w.Header().Set("X-Gram-Session", res.GramSession)
		gramSessionCookie := res.GramSessionCookie
		http.SetCookie(w, &http.Cookie{
			Name:     "gram_session",
			Value:    gramSessionCookie,
			MaxAge:   2592000,
			Secure:   true,
			HttpOnly: true,
		})
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeAuthSwitchScopesRequest returns a decoder for requests sent to the
// auth auth switch scopes endpoint.
func DecodeAuthSwitchScopesRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			organizationID *string
			projectID      *string
			gramSession    *string
		)
		qp := r.URL.Query()
		organizationIDRaw := qp.Get("organization_id")
		if organizationIDRaw != "" {
			organizationID = &organizationIDRaw
		}
		projectIDRaw := qp.Get("project_id")
		if projectIDRaw != "" {
			projectID = &projectIDRaw
		}
		gramSessionRaw := r.Header.Get("X-Gram-Session")
		if gramSessionRaw != "" {
			gramSession = &gramSessionRaw
		}
		payload := NewAuthSwitchScopesPayload(organizationID, projectID, gramSession)
		if payload.GramSession != nil {
			if strings.Contains(*payload.GramSession, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.GramSession, " ", 2)[1]
				payload.GramSession = &cred
			}
		}

		return payload, nil
	}
}

// EncodeAuthLogoutResponse returns an encoder for responses returned by the
// auth auth logout endpoint.
func EncodeAuthLogoutResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*auth.AuthLogoutResult)
		gramSession := res.GramSession
		http.SetCookie(w, &http.Cookie{
			Name:     "gram_session",
			Value:    gramSession,
			MaxAge:   0,
			Secure:   true,
			HttpOnly: true,
		})
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeAuthLogoutRequest returns a decoder for requests sent to the auth auth
// logout endpoint.
func DecodeAuthLogoutRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			gramSession *string
		)
		gramSessionRaw := r.Header.Get("X-Gram-Session")
		if gramSessionRaw != "" {
			gramSession = &gramSessionRaw
		}
		payload := NewAuthLogoutPayload(gramSession)
		if payload.GramSession != nil {
			if strings.Contains(*payload.GramSession, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.GramSession, " ", 2)[1]
				payload.GramSession = &cred
			}
		}

		return payload, nil
	}
}

// EncodeAuthInfoResponse returns an encoder for responses returned by the auth
// auth info endpoint.
func EncodeAuthInfoResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*auth.AuthInfoResult)
		enc := encoder(ctx, w)
		body := NewAuthInfoResponseBody(res)
		w.Header().Set("X-Gram-Session", res.GramSession)
		gramSessionCookie := res.GramSessionCookie
		http.SetCookie(w, &http.Cookie{
			Name:     "gram_session",
			Value:    gramSessionCookie,
			MaxAge:   2592000,
			Secure:   true,
			HttpOnly: true,
		})
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeAuthInfoRequest returns a decoder for requests sent to the auth auth
// info endpoint.
func DecodeAuthInfoRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			gramSession *string
		)
		gramSessionRaw := r.Header.Get("X-Gram-Session")
		if gramSessionRaw != "" {
			gramSession = &gramSessionRaw
		}
		payload := NewAuthInfoPayload(gramSession)
		if payload.GramSession != nil {
			if strings.Contains(*payload.GramSession, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.GramSession, " ", 2)[1]
				payload.GramSession = &cred
			}
		}

		return payload, nil
	}
}

// marshalAuthOrganizationToOrganizationResponseBody builds a value of type
// *OrganizationResponseBody from a value of type *auth.Organization.
func marshalAuthOrganizationToOrganizationResponseBody(v *auth.Organization) *OrganizationResponseBody {
	res := &OrganizationResponseBody{
		OrganizationID:   v.OrganizationID,
		OrganizationName: v.OrganizationName,
		OrganizationSlug: v.OrganizationSlug,
		AccountType:      v.AccountType,
	}
	if v.Projects != nil {
		res.Projects = make([]*ProjectResponseBody, len(v.Projects))
		for i, val := range v.Projects {
			res.Projects[i] = marshalAuthProjectToProjectResponseBody(val)
		}
	} else {
		res.Projects = []*ProjectResponseBody{}
	}

	return res
}

// marshalAuthProjectToProjectResponseBody builds a value of type
// *ProjectResponseBody from a value of type *auth.Project.
func marshalAuthProjectToProjectResponseBody(v *auth.Project) *ProjectResponseBody {
	res := &ProjectResponseBody{
		ProjectID: v.ProjectID,
	}

	return res
}
