// Code generated by goa v3.20.1, DO NOT EDIT.
//
// auth HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package server

import (
	"context"
	"net/http"
	"strings"

	auth "github.com/speakeasy-api/gram/gen/auth"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeCallbackResponse returns an encoder for responses returned by the auth
// callback endpoint.
func EncodeCallbackResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*auth.CallbackResult)
		w.Header().Set("Location", res.Location)
		w.Header().Set("Gram-Session", res.SessionToken)
		sessionCookie := res.SessionCookie
		http.SetCookie(w, &http.Cookie{
			Name:     "gram_session",
			Value:    sessionCookie,
			MaxAge:   2592000,
			Secure:   true,
			HttpOnly: true,
		})
		w.WriteHeader(http.StatusTemporaryRedirect)
		return nil
	}
}

// DecodeCallbackRequest returns a decoder for requests sent to the auth
// callback endpoint.
func DecodeCallbackRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			idToken string
			err     error
		)
		idToken = r.URL.Query().Get("id_token")
		if idToken == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("id_token", "query string"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewCallbackPayload(idToken)

		return payload, nil
	}
}

// EncodeLoginResponse returns an encoder for responses returned by the auth
// login endpoint.
func EncodeLoginResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*auth.LoginResult)
		w.Header().Set("Location", res.Location)
		w.WriteHeader(http.StatusTemporaryRedirect)
		return nil
	}
}

// EncodeSwitchScopesResponse returns an encoder for responses returned by the
// auth switchScopes endpoint.
func EncodeSwitchScopesResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*auth.SwitchScopesResult)
		w.Header().Set("Gram-Session", res.SessionToken)
		sessionCookie := res.SessionCookie
		http.SetCookie(w, &http.Cookie{
			Name:     "gram_session",
			Value:    sessionCookie,
			MaxAge:   2592000,
			Secure:   true,
			HttpOnly: true,
		})
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeSwitchScopesRequest returns a decoder for requests sent to the auth
// switchScopes endpoint.
func DecodeSwitchScopesRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			organizationID *string
			projectID      *string
			sessionToken   *string
		)
		qp := r.URL.Query()
		organizationIDRaw := qp.Get("organization_id")
		if organizationIDRaw != "" {
			organizationID = &organizationIDRaw
		}
		projectIDRaw := qp.Get("project_id")
		if projectIDRaw != "" {
			projectID = &projectIDRaw
		}
		sessionTokenRaw := r.Header.Get("Gram-Session")
		if sessionTokenRaw != "" {
			sessionToken = &sessionTokenRaw
		}
		payload := NewSwitchScopesPayload(organizationID, projectID, sessionToken)
		if payload.SessionToken != nil {
			if strings.Contains(*payload.SessionToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.SessionToken, " ", 2)[1]
				payload.SessionToken = &cred
			}
		}

		return payload, nil
	}
}

// EncodeLogoutResponse returns an encoder for responses returned by the auth
// logout endpoint.
func EncodeLogoutResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*auth.LogoutResult)
		sessionCookie := res.SessionCookie
		http.SetCookie(w, &http.Cookie{
			Name:     "gram_session",
			Value:    sessionCookie,
			MaxAge:   0,
			Secure:   true,
			HttpOnly: true,
		})
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeLogoutRequest returns a decoder for requests sent to the auth logout
// endpoint.
func DecodeLogoutRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			sessionToken *string
		)
		sessionTokenRaw := r.Header.Get("Gram-Session")
		if sessionTokenRaw != "" {
			sessionToken = &sessionTokenRaw
		}
		payload := NewLogoutPayload(sessionToken)
		if payload.SessionToken != nil {
			if strings.Contains(*payload.SessionToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.SessionToken, " ", 2)[1]
				payload.SessionToken = &cred
			}
		}

		return payload, nil
	}
}

// EncodeInfoResponse returns an encoder for responses returned by the auth
// info endpoint.
func EncodeInfoResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*auth.InfoResult)
		enc := encoder(ctx, w)
		body := NewInfoResponseBody(res)
		w.Header().Set("Gram-Session", res.SessionToken)
		sessionCookie := res.SessionCookie
		http.SetCookie(w, &http.Cookie{
			Name:     "gram_session",
			Value:    sessionCookie,
			MaxAge:   2592000,
			Secure:   true,
			HttpOnly: true,
		})
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeInfoRequest returns a decoder for requests sent to the auth info
// endpoint.
func DecodeInfoRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			sessionToken *string
		)
		sessionTokenRaw := r.Header.Get("Gram-Session")
		if sessionTokenRaw != "" {
			sessionToken = &sessionTokenRaw
		}
		payload := NewInfoPayload(sessionToken)
		if payload.SessionToken != nil {
			if strings.Contains(*payload.SessionToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.SessionToken, " ", 2)[1]
				payload.SessionToken = &cred
			}
		}

		return payload, nil
	}
}

// marshalAuthOrganizationEntryToOrganizationEntryResponseBody builds a value
// of type *OrganizationEntryResponseBody from a value of type
// *auth.OrganizationEntry.
func marshalAuthOrganizationEntryToOrganizationEntryResponseBody(v *auth.OrganizationEntry) *OrganizationEntryResponseBody {
	res := &OrganizationEntryResponseBody{
		ID:          v.ID,
		Name:        v.Name,
		Slug:        v.Slug,
		AccountType: v.AccountType,
	}
	if v.Projects != nil {
		res.Projects = make([]*ProjectEntryResponseBody, len(v.Projects))
		for i, val := range v.Projects {
			res.Projects[i] = marshalAuthProjectEntryToProjectEntryResponseBody(val)
		}
	} else {
		res.Projects = []*ProjectEntryResponseBody{}
	}

	return res
}

// marshalAuthProjectEntryToProjectEntryResponseBody builds a value of type
// *ProjectEntryResponseBody from a value of type *auth.ProjectEntry.
func marshalAuthProjectEntryToProjectEntryResponseBody(v *auth.ProjectEntry) *ProjectEntryResponseBody {
	res := &ProjectEntryResponseBody{
		ID:   v.ID,
		Name: v.Name,
		Slug: string(v.Slug),
	}

	return res
}
