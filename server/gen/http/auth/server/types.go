// Code generated by goa v3.20.1, DO NOT EDIT.
//
// auth HTTP server types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package server

import (
	auth "github.com/speakeasy-api/gram/gen/auth"
)

// InfoResponseBody is the type of the "auth" service "info" endpoint HTTP
// response body.
type InfoResponseBody struct {
	UserID               string                           `form:"user_id" json:"user_id" xml:"user_id"`
	UserEmail            string                           `form:"user_email" json:"user_email" xml:"user_email"`
	ActiveOrganizationID string                           `form:"active_organization_id" json:"active_organization_id" xml:"active_organization_id"`
	Organizations        []*OrganizationEntryResponseBody `form:"organizations" json:"organizations" xml:"organizations"`
}

// OrganizationEntryResponseBody is used to define fields on response body
// types.
type OrganizationEntryResponseBody struct {
	ID          string                      `form:"id" json:"id" xml:"id"`
	Name        string                      `form:"name" json:"name" xml:"name"`
	Slug        string                      `form:"slug" json:"slug" xml:"slug"`
	AccountType string                      `form:"account_type" json:"account_type" xml:"account_type"`
	Projects    []*ProjectEntryResponseBody `form:"projects" json:"projects" xml:"projects"`
}

// ProjectEntryResponseBody is used to define fields on response body types.
type ProjectEntryResponseBody struct {
	// The ID of the project
	ID string `form:"id" json:"id" xml:"id"`
	// The name of the project
	Name string `form:"name" json:"name" xml:"name"`
	// The slug of the project
	Slug string `form:"slug" json:"slug" xml:"slug"`
}

// NewInfoResponseBody builds the HTTP response body from the result of the
// "info" endpoint of the "auth" service.
func NewInfoResponseBody(res *auth.InfoResult) *InfoResponseBody {
	body := &InfoResponseBody{
		UserID:               res.UserID,
		UserEmail:            res.UserEmail,
		ActiveOrganizationID: res.ActiveOrganizationID,
	}
	if res.Organizations != nil {
		body.Organizations = make([]*OrganizationEntryResponseBody, len(res.Organizations))
		for i, val := range res.Organizations {
			body.Organizations[i] = marshalAuthOrganizationEntryToOrganizationEntryResponseBody(val)
		}
	} else {
		body.Organizations = []*OrganizationEntryResponseBody{}
	}
	return body
}

// NewCallbackPayload builds a auth service callback endpoint payload.
func NewCallbackPayload(idToken string) *auth.CallbackPayload {
	v := &auth.CallbackPayload{}
	v.IDToken = idToken

	return v
}

// NewSwitchScopesPayload builds a auth service switchScopes endpoint payload.
func NewSwitchScopesPayload(organizationID *string, projectID *string, sessionToken *string) *auth.SwitchScopesPayload {
	v := &auth.SwitchScopesPayload{}
	v.OrganizationID = organizationID
	v.ProjectID = projectID
	v.SessionToken = sessionToken

	return v
}

// NewLogoutPayload builds a auth service logout endpoint payload.
func NewLogoutPayload(sessionToken *string) *auth.LogoutPayload {
	v := &auth.LogoutPayload{}
	v.SessionToken = sessionToken

	return v
}

// NewInfoPayload builds a auth service info endpoint payload.
func NewInfoPayload(sessionToken *string) *auth.InfoPayload {
	v := &auth.InfoPayload{}
	v.SessionToken = sessionToken

	return v
}
