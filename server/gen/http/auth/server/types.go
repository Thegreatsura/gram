// Code generated by goa v3.20.0, DO NOT EDIT.
//
// auth HTTP server types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package server

import (
	auth "github.com/speakeasy-api/gram/gen/auth"
)

// AuthInfoResponseBody is the type of the "auth" service "auth info" endpoint
// HTTP response body.
type AuthInfoResponseBody struct {
	UserID               string                      `form:"user_id" json:"user_id" xml:"user_id"`
	UserEmail            string                      `form:"user_email" json:"user_email" xml:"user_email"`
	ActiveOrganizationID string                      `form:"active_organization_id" json:"active_organization_id" xml:"active_organization_id"`
	ActiveProjectID      string                      `form:"active_project_id" json:"active_project_id" xml:"active_project_id"`
	Organizations        []*OrganizationResponseBody `form:"organizations" json:"organizations" xml:"organizations"`
}

// OrganizationResponseBody is used to define fields on response body types.
type OrganizationResponseBody struct {
	OrgID       string                 `form:"org_id" json:"org_id" xml:"org_id"`
	OrgName     string                 `form:"org_name" json:"org_name" xml:"org_name"`
	OrgSlug     string                 `form:"org_slug" json:"org_slug" xml:"org_slug"`
	AccountType string                 `form:"account_type" json:"account_type" xml:"account_type"`
	Projects    []*ProjectResponseBody `form:"projects" json:"projects" xml:"projects"`
}

// ProjectResponseBody is used to define fields on response body types.
type ProjectResponseBody struct {
	ProjectID string `form:"project_id" json:"project_id" xml:"project_id"`
}

// NewAuthInfoResponseBody builds the HTTP response body from the result of the
// "auth info" endpoint of the "auth" service.
func NewAuthInfoResponseBody(res *auth.AuthInfoResult) *AuthInfoResponseBody {
	body := &AuthInfoResponseBody{
		UserID:               res.UserID,
		UserEmail:            res.UserEmail,
		ActiveOrganizationID: res.ActiveOrganizationID,
		ActiveProjectID:      res.ActiveProjectID,
	}
	if res.Organizations != nil {
		body.Organizations = make([]*OrganizationResponseBody, len(res.Organizations))
		for i, val := range res.Organizations {
			body.Organizations[i] = marshalAuthOrganizationToOrganizationResponseBody(val)
		}
	} else {
		body.Organizations = []*OrganizationResponseBody{}
	}
	return body
}

// NewAuthCallbackPayload builds a auth service auth callback endpoint payload.
func NewAuthCallbackPayload(sharedToken string) *auth.AuthCallbackPayload {
	v := &auth.AuthCallbackPayload{}
	v.SharedToken = sharedToken

	return v
}

// NewAuthSwitchScopesPayload builds a auth service auth switch scopes endpoint
// payload.
func NewAuthSwitchScopesPayload(organizationID *string, projectID *string, gramSession *string) *auth.AuthSwitchScopesPayload {
	v := &auth.AuthSwitchScopesPayload{}
	v.OrganizationID = organizationID
	v.ProjectID = projectID
	v.GramSession = gramSession

	return v
}

// NewAuthInfoPayload builds a auth service auth info endpoint payload.
func NewAuthInfoPayload(gramSession *string) *auth.AuthInfoPayload {
	v := &auth.AuthInfoPayload{}
	v.GramSession = gramSession

	return v
}
