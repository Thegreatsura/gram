// Code generated by goa v3.20.0, DO NOT EDIT.
//
// auth HTTP server types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package server

import (
	auth "github.com/speakeasy-api/gram/gen/auth"
)

// InfoResponseBody is the type of the "auth" service "info" endpoint HTTP
// response body.
type InfoResponseBody struct {
	UserID               string                      `form:"user_id" json:"user_id" xml:"user_id"`
	UserEmail            string                      `form:"user_email" json:"user_email" xml:"user_email"`
	ActiveOrganizationID string                      `form:"active_organization_id" json:"active_organization_id" xml:"active_organization_id"`
	Organizations        []*OrganizationResponseBody `form:"organizations" json:"organizations" xml:"organizations"`
}

// OrganizationResponseBody is used to define fields on response body types.
type OrganizationResponseBody struct {
	OrganizationID   string                 `form:"organization_id" json:"organization_id" xml:"organization_id"`
	OrganizationName string                 `form:"organization_name" json:"organization_name" xml:"organization_name"`
	OrganizationSlug string                 `form:"organization_slug" json:"organization_slug" xml:"organization_slug"`
	AccountType      string                 `form:"account_type" json:"account_type" xml:"account_type"`
	Projects         []*ProjectResponseBody `form:"projects" json:"projects" xml:"projects"`
}

// ProjectResponseBody is used to define fields on response body types.
type ProjectResponseBody struct {
	ProjectID string `form:"project_id" json:"project_id" xml:"project_id"`
}

// NewInfoResponseBody builds the HTTP response body from the result of the
// "info" endpoint of the "auth" service.
func NewInfoResponseBody(res *auth.InfoResult) *InfoResponseBody {
	body := &InfoResponseBody{
		UserID:               res.UserID,
		UserEmail:            res.UserEmail,
		ActiveOrganizationID: res.ActiveOrganizationID,
	}
	if res.Organizations != nil {
		body.Organizations = make([]*OrganizationResponseBody, len(res.Organizations))
		for i, val := range res.Organizations {
			body.Organizations[i] = marshalAuthOrganizationToOrganizationResponseBody(val)
		}
	} else {
		body.Organizations = []*OrganizationResponseBody{}
	}
	return body
}

// NewCallbackPayload builds a auth service callback endpoint payload.
func NewCallbackPayload(sharedToken string) *auth.CallbackPayload {
	v := &auth.CallbackPayload{}
	v.SharedToken = sharedToken

	return v
}

// NewSwitchScopesPayload builds a auth service switchScopes endpoint payload.
func NewSwitchScopesPayload(organizationID *string, projectID *string, gramSessionToken *string) *auth.SwitchScopesPayload {
	v := &auth.SwitchScopesPayload{}
	v.OrganizationID = organizationID
	v.ProjectID = projectID
	v.GramSessionToken = gramSessionToken

	return v
}

// NewLogoutPayload builds a auth service logout endpoint payload.
func NewLogoutPayload(gramSessionToken *string) *auth.LogoutPayload {
	v := &auth.LogoutPayload{}
	v.GramSessionToken = gramSessionToken

	return v
}

// NewInfoPayload builds a auth service info endpoint payload.
func NewInfoPayload(gramSessionToken *string) *auth.InfoPayload {
	v := &auth.InfoPayload{}
	v.GramSessionToken = gramSessionToken

	return v
}
