// Code generated by goa v3.20.1, DO NOT EDIT.
//
// integrations HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	integrations "github.com/speakeasy-api/gram/gen/integrations"
	goahttp "goa.design/goa/v3/http"
)

// BuildListRequest instantiates a HTTP request object with method and path set
// to call the "integrations" service "list" endpoint
func (c *Client) BuildListRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListIntegrationsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("integrations", "list", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListRequest returns an encoder for requests sent to the integrations
// list server.
func EncodeListRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*integrations.ListPayload)
		if !ok {
			return goahttp.ErrInvalidType("integrations", "list", "*integrations.ListPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		values := req.URL.Query()
		for _, value := range p.Keywords {
			values.Add("keywords", value)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeListResponse returns a decoder for responses returned by the
// integrations list endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeListResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "unsupported_media" (type *goa.ServiceError): http.StatusUnsupportedMediaType
//   - "invalid" (type *goa.ServiceError): http.StatusUnprocessableEntity
//   - "invariant_violation" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unexpected" (type *goa.ServiceError): http.StatusInternalServerError
//   - error: internal error
func DecodeListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("integrations", "list", err)
			}
			err = ValidateListResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("integrations", "list", err)
			}
			res := NewListIntegrationsResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body ListUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("integrations", "list", err)
			}
			err = ValidateListUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("integrations", "list", err)
			}
			return nil, NewListUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body ListForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("integrations", "list", err)
			}
			err = ValidateListForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("integrations", "list", err)
			}
			return nil, NewListForbidden(&body)
		case http.StatusBadRequest:
			var (
				body ListBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("integrations", "list", err)
			}
			err = ValidateListBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("integrations", "list", err)
			}
			return nil, NewListBadRequest(&body)
		case http.StatusNotFound:
			var (
				body ListNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("integrations", "list", err)
			}
			err = ValidateListNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("integrations", "list", err)
			}
			return nil, NewListNotFound(&body)
		case http.StatusConflict:
			var (
				body ListConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("integrations", "list", err)
			}
			err = ValidateListConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("integrations", "list", err)
			}
			return nil, NewListConflict(&body)
		case http.StatusUnsupportedMediaType:
			var (
				body ListUnsupportedMediaResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("integrations", "list", err)
			}
			err = ValidateListUnsupportedMediaResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("integrations", "list", err)
			}
			return nil, NewListUnsupportedMedia(&body)
		case http.StatusUnprocessableEntity:
			var (
				body ListInvalidResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("integrations", "list", err)
			}
			err = ValidateListInvalidResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("integrations", "list", err)
			}
			return nil, NewListInvalid(&body)
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invariant_violation":
				var (
					body ListInvariantViolationResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("integrations", "list", err)
				}
				err = ValidateListInvariantViolationResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("integrations", "list", err)
				}
				return nil, NewListInvariantViolation(&body)
			case "unexpected":
				var (
					body ListUnexpectedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("integrations", "list", err)
				}
				err = ValidateListUnexpectedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("integrations", "list", err)
				}
				return nil, NewListUnexpected(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("integrations", "list", resp.StatusCode, string(body))
			}
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("integrations", "list", resp.StatusCode, string(body))
		}
	}
}

// unmarshalIntegrationResponseBodyToIntegrationsIntegration builds a value of
// type *integrations.Integration from a value of type *IntegrationResponseBody.
func unmarshalIntegrationResponseBodyToIntegrationsIntegration(v *IntegrationResponseBody) *integrations.Integration {
	if v == nil {
		return nil
	}
	res := &integrations.Integration{
		PackageID:        *v.PackageID,
		PackageName:      *v.PackageName,
		PackageTitle:     v.PackageTitle,
		PackageSummary:   v.PackageSummary,
		Version:          *v.Version,
		VersionCreatedAt: *v.VersionCreatedAt,
		ToolCount:        *v.ToolCount,
	}
	if v.PackageKeywords != nil {
		res.PackageKeywords = make([]string, len(v.PackageKeywords))
		for i, val := range v.PackageKeywords {
			res.PackageKeywords[i] = val
		}
	}

	return res
}
