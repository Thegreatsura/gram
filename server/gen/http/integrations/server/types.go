// Code generated by goa v3.20.1, DO NOT EDIT.
//
// integrations HTTP server types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package server

import (
	integrations "github.com/speakeasy-api/gram/gen/integrations"
	goa "goa.design/goa/v3/pkg"
)

// ListResponseBody is the type of the "integrations" service "list" endpoint
// HTTP response body.
type ListResponseBody struct {
	// List of available third-party integrations
	Integrations []*IntegrationResponseBody `form:"integrations,omitempty" json:"integrations,omitempty" xml:"integrations,omitempty"`
}

// ListUnauthorizedResponseBody is the type of the "integrations" service
// "list" endpoint HTTP response body for the "unauthorized" error.
type ListUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListForbiddenResponseBody is the type of the "integrations" service "list"
// endpoint HTTP response body for the "forbidden" error.
type ListForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListBadRequestResponseBody is the type of the "integrations" service "list"
// endpoint HTTP response body for the "bad_request" error.
type ListBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListNotFoundResponseBody is the type of the "integrations" service "list"
// endpoint HTTP response body for the "not_found" error.
type ListNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListConflictResponseBody is the type of the "integrations" service "list"
// endpoint HTTP response body for the "conflict" error.
type ListConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListUnsupportedMediaResponseBody is the type of the "integrations" service
// "list" endpoint HTTP response body for the "unsupported_media" error.
type ListUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListInvalidResponseBody is the type of the "integrations" service "list"
// endpoint HTTP response body for the "invalid" error.
type ListInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListInvariantViolationResponseBody is the type of the "integrations" service
// "list" endpoint HTTP response body for the "invariant_violation" error.
type ListInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListUnexpectedResponseBody is the type of the "integrations" service "list"
// endpoint HTTP response body for the "unexpected" error.
type ListUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IntegrationResponseBody is used to define fields on response body types.
type IntegrationResponseBody struct {
	PackageID           string   `form:"package_id" json:"package_id" xml:"package_id"`
	PackageName         string   `form:"package_name" json:"package_name" xml:"package_name"`
	PackageTitle        *string  `form:"package_title,omitempty" json:"package_title,omitempty" xml:"package_title,omitempty"`
	PackageSummary      *string  `form:"package_summary,omitempty" json:"package_summary,omitempty" xml:"package_summary,omitempty"`
	PackageURL          *string  `form:"package_url,omitempty" json:"package_url,omitempty" xml:"package_url,omitempty"`
	PackageKeywords     []string `form:"package_keywords,omitempty" json:"package_keywords,omitempty" xml:"package_keywords,omitempty"`
	PackageImageAssetID *string  `form:"package_image_asset_id,omitempty" json:"package_image_asset_id,omitempty" xml:"package_image_asset_id,omitempty"`
	Version             string   `form:"version" json:"version" xml:"version"`
	VersionCreatedAt    string   `form:"version_created_at" json:"version_created_at" xml:"version_created_at"`
	ToolCount           int      `form:"tool_count" json:"tool_count" xml:"tool_count"`
}

// NewListResponseBody builds the HTTP response body from the result of the
// "list" endpoint of the "integrations" service.
func NewListResponseBody(res *integrations.ListIntegrationsResult) *ListResponseBody {
	body := &ListResponseBody{}
	if res.Integrations != nil {
		body.Integrations = make([]*IntegrationResponseBody, len(res.Integrations))
		for i, val := range res.Integrations {
			body.Integrations[i] = marshalIntegrationsIntegrationToIntegrationResponseBody(val)
		}
	}
	return body
}

// NewListUnauthorizedResponseBody builds the HTTP response body from the
// result of the "list" endpoint of the "integrations" service.
func NewListUnauthorizedResponseBody(res *goa.ServiceError) *ListUnauthorizedResponseBody {
	body := &ListUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListForbiddenResponseBody builds the HTTP response body from the result
// of the "list" endpoint of the "integrations" service.
func NewListForbiddenResponseBody(res *goa.ServiceError) *ListForbiddenResponseBody {
	body := &ListForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListBadRequestResponseBody builds the HTTP response body from the result
// of the "list" endpoint of the "integrations" service.
func NewListBadRequestResponseBody(res *goa.ServiceError) *ListBadRequestResponseBody {
	body := &ListBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListNotFoundResponseBody builds the HTTP response body from the result of
// the "list" endpoint of the "integrations" service.
func NewListNotFoundResponseBody(res *goa.ServiceError) *ListNotFoundResponseBody {
	body := &ListNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListConflictResponseBody builds the HTTP response body from the result of
// the "list" endpoint of the "integrations" service.
func NewListConflictResponseBody(res *goa.ServiceError) *ListConflictResponseBody {
	body := &ListConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListUnsupportedMediaResponseBody builds the HTTP response body from the
// result of the "list" endpoint of the "integrations" service.
func NewListUnsupportedMediaResponseBody(res *goa.ServiceError) *ListUnsupportedMediaResponseBody {
	body := &ListUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListInvalidResponseBody builds the HTTP response body from the result of
// the "list" endpoint of the "integrations" service.
func NewListInvalidResponseBody(res *goa.ServiceError) *ListInvalidResponseBody {
	body := &ListInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListInvariantViolationResponseBody builds the HTTP response body from the
// result of the "list" endpoint of the "integrations" service.
func NewListInvariantViolationResponseBody(res *goa.ServiceError) *ListInvariantViolationResponseBody {
	body := &ListInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListUnexpectedResponseBody builds the HTTP response body from the result
// of the "list" endpoint of the "integrations" service.
func NewListUnexpectedResponseBody(res *goa.ServiceError) *ListUnexpectedResponseBody {
	body := &ListUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListPayload builds a integrations service list endpoint payload.
func NewListPayload(keywords []string, sessionToken *string, projectSlugInput *string) *integrations.ListPayload {
	v := &integrations.ListPayload{}
	v.Keywords = keywords
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v
}
