// Code generated by goa v3.20.1, DO NOT EDIT.
//
// instances HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package server

import (
	"context"
	"net/http"
	"strings"

	instances "github.com/speakeasy-api/gram/gen/instances"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeLoadInstanceResponse returns an encoder for responses returned by the
// instances loadInstance endpoint.
func EncodeLoadInstanceResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*instances.InstanceResult)
		enc := encoder(ctx, w)
		body := NewLoadInstanceResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeLoadInstanceRequest returns a decoder for requests sent to the
// instances loadInstance endpoint.
func DecodeLoadInstanceRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			toolsetSlug     string
			environmentSlug *string
			sessionToken    *string
			projectSlug     *string
			apikeyToken     *string
			err             error
		)
		qp := r.URL.Query()
		toolsetSlug = qp.Get("toolset_slug")
		if toolsetSlug == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("toolset_slug", "query string"))
		}
		environmentSlugRaw := qp.Get("environment_slug")
		if environmentSlugRaw != "" {
			environmentSlug = &environmentSlugRaw
		}
		sessionTokenRaw := r.Header.Get("Gram-Session")
		if sessionTokenRaw != "" {
			sessionToken = &sessionTokenRaw
		}
		projectSlugRaw := r.Header.Get("Gram-Project")
		if projectSlugRaw != "" {
			projectSlug = &projectSlugRaw
		}
		apikeyTokenRaw := r.Header.Get("Gram-Key")
		if apikeyTokenRaw != "" {
			apikeyToken = &apikeyTokenRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewLoadInstancePayload(toolsetSlug, environmentSlug, sessionToken, projectSlug, apikeyToken)
		if payload.SessionToken != nil {
			if strings.Contains(*payload.SessionToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.SessionToken, " ", 2)[1]
				payload.SessionToken = &cred
			}
		}
		if payload.ProjectSlug != nil {
			if strings.Contains(*payload.ProjectSlug, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.ProjectSlug, " ", 2)[1]
				payload.ProjectSlug = &cred
			}
		}
		if payload.ApikeyToken != nil {
			if strings.Contains(*payload.ApikeyToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.ApikeyToken, " ", 2)[1]
				payload.ApikeyToken = &cred
			}
		}

		return payload, nil
	}
}

// marshalInstancesHTTPToolDefinitionToHTTPToolDefinitionResponseBody builds a
// value of type *HTTPToolDefinitionResponseBody from a value of type
// *instances.HTTPToolDefinition.
func marshalInstancesHTTPToolDefinitionToHTTPToolDefinitionResponseBody(v *instances.HTTPToolDefinition) *HTTPToolDefinitionResponseBody {
	res := &HTTPToolDefinitionResponseBody{
		ID:                  v.ID,
		ProjectID:           v.ProjectID,
		DeploymentID:        v.DeploymentID,
		Openapiv3DocumentID: v.Openapiv3DocumentID,
		Name:                v.Name,
		Summary:             v.Summary,
		Description:         v.Description,
		Openapiv3Operation:  v.Openapiv3Operation,
		Security:            v.Security,
		HTTPMethod:          v.HTTPMethod,
		Path:                v.Path,
		SchemaVersion:       v.SchemaVersion,
		Schema:              v.Schema,
		CreatedAt:           v.CreatedAt,
		UpdatedAt:           v.UpdatedAt,
	}
	if v.Tags != nil {
		res.Tags = make([]string, len(v.Tags))
		for i, val := range v.Tags {
			res.Tags[i] = val
		}
	} else {
		res.Tags = []string{}
	}

	return res
}

// marshalInstancesEnvironmentToEnvironmentResponseBody builds a value of type
// *EnvironmentResponseBody from a value of type *instances.Environment.
func marshalInstancesEnvironmentToEnvironmentResponseBody(v *instances.Environment) *EnvironmentResponseBody {
	res := &EnvironmentResponseBody{
		ID:             v.ID,
		OrganizationID: v.OrganizationID,
		ProjectID:      v.ProjectID,
		Name:           v.Name,
		Slug:           v.Slug,
		Description:    v.Description,
		CreatedAt:      v.CreatedAt,
		UpdatedAt:      v.UpdatedAt,
	}
	if v.Entries != nil {
		res.Entries = make([]*EnvironmentEntryResponseBody, len(v.Entries))
		for i, val := range v.Entries {
			res.Entries[i] = marshalInstancesEnvironmentEntryToEnvironmentEntryResponseBody(val)
		}
	} else {
		res.Entries = []*EnvironmentEntryResponseBody{}
	}

	return res
}

// marshalInstancesEnvironmentEntryToEnvironmentEntryResponseBody builds a
// value of type *EnvironmentEntryResponseBody from a value of type
// *instances.EnvironmentEntry.
func marshalInstancesEnvironmentEntryToEnvironmentEntryResponseBody(v *instances.EnvironmentEntry) *EnvironmentEntryResponseBody {
	res := &EnvironmentEntryResponseBody{
		Name:      v.Name,
		Value:     v.Value,
		CreatedAt: v.CreatedAt,
		UpdatedAt: v.UpdatedAt,
	}

	return res
}
