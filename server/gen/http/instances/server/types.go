// Code generated by goa v3.20.1, DO NOT EDIT.
//
// instances HTTP server types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package server

import (
	instances "github.com/speakeasy-api/gram/gen/instances"
	types "github.com/speakeasy-api/gram/gen/types"
	goa "goa.design/goa/v3/pkg"
)

// GetInstanceResponseBody is the type of the "instances" service "getInstance"
// endpoint HTTP response body.
type GetInstanceResponseBody struct {
	// The name of the toolset
	Name string `form:"name" json:"name" xml:"name"`
	// The description of the toolset
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The list of tools
	Tools []*HTTPToolDefinitionResponseBody `form:"tools" json:"tools" xml:"tools"`
	// The environment variables that are relevant to the toolset
	RelevantEnvironmentVariables []string `form:"relevant_environment_variables,omitempty" json:"relevant_environment_variables,omitempty" xml:"relevant_environment_variables,omitempty"`
	// The environment
	Environment *EnvironmentResponseBody `form:"environment" json:"environment" xml:"environment"`
}

// GetInstanceUnauthorizedResponseBody is the type of the "instances" service
// "getInstance" endpoint HTTP response body for the "unauthorized" error.
type GetInstanceUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetInstanceForbiddenResponseBody is the type of the "instances" service
// "getInstance" endpoint HTTP response body for the "forbidden" error.
type GetInstanceForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetInstanceBadRequestResponseBody is the type of the "instances" service
// "getInstance" endpoint HTTP response body for the "bad_request" error.
type GetInstanceBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetInstanceNotFoundResponseBody is the type of the "instances" service
// "getInstance" endpoint HTTP response body for the "not_found" error.
type GetInstanceNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetInstanceConflictResponseBody is the type of the "instances" service
// "getInstance" endpoint HTTP response body for the "conflict" error.
type GetInstanceConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetInstanceUnsupportedMediaResponseBody is the type of the "instances"
// service "getInstance" endpoint HTTP response body for the
// "unsupported_media" error.
type GetInstanceUnsupportedMediaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetInstanceInvalidResponseBody is the type of the "instances" service
// "getInstance" endpoint HTTP response body for the "invalid" error.
type GetInstanceInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetInstanceInvariantViolationResponseBody is the type of the "instances"
// service "getInstance" endpoint HTTP response body for the
// "invariant_violation" error.
type GetInstanceInvariantViolationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetInstanceUnexpectedResponseBody is the type of the "instances" service
// "getInstance" endpoint HTTP response body for the "unexpected" error.
type GetInstanceUnexpectedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetInstanceGatewayErrorResponseBody is the type of the "instances" service
// "getInstance" endpoint HTTP response body for the "gateway_error" error.
type GetInstanceGatewayErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// HTTPToolDefinitionResponseBody is used to define fields on response body
// types.
type HTTPToolDefinitionResponseBody struct {
	// The ID of the HTTP tool
	ID string `form:"id" json:"id" xml:"id"`
	// The ID of the project
	ProjectID string `form:"project_id" json:"project_id" xml:"project_id"`
	// The ID of the deployment
	DeploymentID string `form:"deployment_id" json:"deployment_id" xml:"deployment_id"`
	// The ID of the OpenAPI v3 document
	Openapiv3DocumentID *string `form:"openapiv3_document_id,omitempty" json:"openapiv3_document_id,omitempty" xml:"openapiv3_document_id,omitempty"`
	// The name of the tool
	Name string `form:"name" json:"name" xml:"name"`
	// Summary of the tool
	Summary string `form:"summary" json:"summary" xml:"summary"`
	// Description of the tool
	Description string `form:"description" json:"description" xml:"description"`
	// Confirmation mode for the tool
	Confirm string `form:"confirm" json:"confirm" xml:"confirm"`
	// Prompt for the confirmation
	ConfirmPrompt *string `form:"confirm_prompt,omitempty" json:"confirm_prompt,omitempty" xml:"confirm_prompt,omitempty"`
	// OpenAPI v3 operation
	Openapiv3Operation *string `form:"openapiv3_operation,omitempty" json:"openapiv3_operation,omitempty" xml:"openapiv3_operation,omitempty"`
	// The tags list for this http tool
	Tags []string `form:"tags" json:"tags" xml:"tags"`
	// Security requirements for the underlying HTTP endpoint
	Security *string `form:"security,omitempty" json:"security,omitempty" xml:"security,omitempty"`
	// HTTP method for the request
	HTTPMethod string `form:"http_method" json:"http_method" xml:"http_method"`
	// Path for the request
	Path string `form:"path" json:"path" xml:"path"`
	// Version of the schema
	SchemaVersion *string `form:"schema_version,omitempty" json:"schema_version,omitempty" xml:"schema_version,omitempty"`
	// JSON schema for the request
	Schema string `form:"schema" json:"schema" xml:"schema"`
	// The creation date of the tool.
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// The last update date of the tool.
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// EnvironmentResponseBody is used to define fields on response body types.
type EnvironmentResponseBody struct {
	// The ID of the environment
	ID string `form:"id" json:"id" xml:"id"`
	// The organization ID this environment belongs to
	OrganizationID string `form:"organization_id" json:"organization_id" xml:"organization_id"`
	// The project ID this environment belongs to
	ProjectID string `form:"project_id" json:"project_id" xml:"project_id"`
	// The name of the environment
	Name string `form:"name" json:"name" xml:"name"`
	// The slug identifier for the environment
	Slug string `form:"slug" json:"slug" xml:"slug"`
	// The description of the environment
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// List of environment entries
	Entries []*EnvironmentEntryResponseBody `form:"entries" json:"entries" xml:"entries"`
	// The creation date of the environment
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// When the environment was last updated
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// EnvironmentEntryResponseBody is used to define fields on response body types.
type EnvironmentEntryResponseBody struct {
	// The name of the environment variable
	Name string `form:"name" json:"name" xml:"name"`
	// Redacted values of the environment variable
	Value string `form:"value" json:"value" xml:"value"`
	// The creation date of the environment entry
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// When the environment entry was last updated
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// NewGetInstanceResponseBody builds the HTTP response body from the result of
// the "getInstance" endpoint of the "instances" service.
func NewGetInstanceResponseBody(res *instances.GetInstanceResult) *GetInstanceResponseBody {
	body := &GetInstanceResponseBody{
		Name:        res.Name,
		Description: res.Description,
	}
	if res.Tools != nil {
		body.Tools = make([]*HTTPToolDefinitionResponseBody, len(res.Tools))
		for i, val := range res.Tools {
			body.Tools[i] = marshalTypesHTTPToolDefinitionToHTTPToolDefinitionResponseBody(val)
		}
	} else {
		body.Tools = []*HTTPToolDefinitionResponseBody{}
	}
	if res.RelevantEnvironmentVariables != nil {
		body.RelevantEnvironmentVariables = make([]string, len(res.RelevantEnvironmentVariables))
		for i, val := range res.RelevantEnvironmentVariables {
			body.RelevantEnvironmentVariables[i] = val
		}
	}
	if res.Environment != nil {
		body.Environment = marshalTypesEnvironmentToEnvironmentResponseBody(res.Environment)
	}
	return body
}

// NewGetInstanceUnauthorizedResponseBody builds the HTTP response body from
// the result of the "getInstance" endpoint of the "instances" service.
func NewGetInstanceUnauthorizedResponseBody(res *goa.ServiceError) *GetInstanceUnauthorizedResponseBody {
	body := &GetInstanceUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetInstanceForbiddenResponseBody builds the HTTP response body from the
// result of the "getInstance" endpoint of the "instances" service.
func NewGetInstanceForbiddenResponseBody(res *goa.ServiceError) *GetInstanceForbiddenResponseBody {
	body := &GetInstanceForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetInstanceBadRequestResponseBody builds the HTTP response body from the
// result of the "getInstance" endpoint of the "instances" service.
func NewGetInstanceBadRequestResponseBody(res *goa.ServiceError) *GetInstanceBadRequestResponseBody {
	body := &GetInstanceBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetInstanceNotFoundResponseBody builds the HTTP response body from the
// result of the "getInstance" endpoint of the "instances" service.
func NewGetInstanceNotFoundResponseBody(res *goa.ServiceError) *GetInstanceNotFoundResponseBody {
	body := &GetInstanceNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetInstanceConflictResponseBody builds the HTTP response body from the
// result of the "getInstance" endpoint of the "instances" service.
func NewGetInstanceConflictResponseBody(res *goa.ServiceError) *GetInstanceConflictResponseBody {
	body := &GetInstanceConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetInstanceUnsupportedMediaResponseBody builds the HTTP response body
// from the result of the "getInstance" endpoint of the "instances" service.
func NewGetInstanceUnsupportedMediaResponseBody(res *goa.ServiceError) *GetInstanceUnsupportedMediaResponseBody {
	body := &GetInstanceUnsupportedMediaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetInstanceInvalidResponseBody builds the HTTP response body from the
// result of the "getInstance" endpoint of the "instances" service.
func NewGetInstanceInvalidResponseBody(res *goa.ServiceError) *GetInstanceInvalidResponseBody {
	body := &GetInstanceInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetInstanceInvariantViolationResponseBody builds the HTTP response body
// from the result of the "getInstance" endpoint of the "instances" service.
func NewGetInstanceInvariantViolationResponseBody(res *goa.ServiceError) *GetInstanceInvariantViolationResponseBody {
	body := &GetInstanceInvariantViolationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetInstanceUnexpectedResponseBody builds the HTTP response body from the
// result of the "getInstance" endpoint of the "instances" service.
func NewGetInstanceUnexpectedResponseBody(res *goa.ServiceError) *GetInstanceUnexpectedResponseBody {
	body := &GetInstanceUnexpectedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetInstanceGatewayErrorResponseBody builds the HTTP response body from
// the result of the "getInstance" endpoint of the "instances" service.
func NewGetInstanceGatewayErrorResponseBody(res *goa.ServiceError) *GetInstanceGatewayErrorResponseBody {
	body := &GetInstanceGatewayErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetInstanceForm builds a instances service getInstance endpoint payload.
func NewGetInstanceForm(toolsetSlug string, environmentSlug *string, sessionToken *string, projectSlugInput *string, apikeyToken *string) *instances.GetInstanceForm {
	v := &instances.GetInstanceForm{}
	v.ToolsetSlug = types.Slug(toolsetSlug)
	if environmentSlug != nil {
		tmpenvironmentSlug := types.Slug(*environmentSlug)
		v.EnvironmentSlug = &tmpenvironmentSlug
	}
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput
	v.ApikeyToken = apikeyToken

	return v
}
