// Code generated by goa v3.20.1, DO NOT EDIT.
//
// instances HTTP server types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package server

import (
	instances "github.com/speakeasy-api/gram/gen/instances"
)

// LoadInstanceResponseBody is the type of the "instances" service
// "loadInstance" endpoint HTTP response body.
type LoadInstanceResponseBody struct {
	// The list of tools
	Tools []*HTTPToolDefinitionResponseBody `form:"tools" json:"tools" xml:"tools"`
	// The environment
	Environment *EnvironmentResponseBody `form:"environment" json:"environment" xml:"environment"`
}

// HTTPToolDefinitionResponseBody is used to define fields on response body
// types.
type HTTPToolDefinitionResponseBody struct {
	// The ID of the HTTP tool
	ID string `form:"id" json:"id" xml:"id"`
	// The name of the tool
	Name string `form:"name" json:"name" xml:"name"`
	// Description of the tool
	Description string `form:"description" json:"description" xml:"description"`
	// The tags list for this http tool
	Tags []string `form:"tags" json:"tags" xml:"tags"`
	// Environment variable for the server URL
	ServerEnvVar *string `form:"server_env_var,omitempty" json:"server_env_var,omitempty" xml:"server_env_var,omitempty"`
	// Type of security (http:bearer, http:basic, apikey)
	SecurityType *string `form:"security_type,omitempty" json:"security_type,omitempty" xml:"security_type,omitempty"`
	// Environment variable for bearer token
	BearerEnvVar *string `form:"bearer_env_var,omitempty" json:"bearer_env_var,omitempty" xml:"bearer_env_var,omitempty"`
	// Environment variable for API key
	ApikeyEnvVar *string `form:"apikey_env_var,omitempty" json:"apikey_env_var,omitempty" xml:"apikey_env_var,omitempty"`
	// Environment variable for username
	UsernameEnvVar *string `form:"username_env_var,omitempty" json:"username_env_var,omitempty" xml:"username_env_var,omitempty"`
	// Environment variable for password
	PasswordEnvVar *string `form:"password_env_var,omitempty" json:"password_env_var,omitempty" xml:"password_env_var,omitempty"`
	// HTTP method for the request
	HTTPMethod string `form:"http_method" json:"http_method" xml:"http_method"`
	// Path for the request
	Path string `form:"path" json:"path" xml:"path"`
	// JSON schema for the request
	Schema *string `form:"schema,omitempty" json:"schema,omitempty" xml:"schema,omitempty"`
	// The creation date of the tool.
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// The last update date of the tool.
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// EnvironmentResponseBody is used to define fields on response body types.
type EnvironmentResponseBody struct {
	// The ID of the environment
	ID string `form:"id" json:"id" xml:"id"`
	// The organization ID this environment belongs to
	OrganizationID string `form:"organization_id" json:"organization_id" xml:"organization_id"`
	// The project ID this environment belongs to
	ProjectID string `form:"project_id" json:"project_id" xml:"project_id"`
	// The name of the environment
	Name string `form:"name" json:"name" xml:"name"`
	// The slug identifier for the environment
	Slug string `form:"slug" json:"slug" xml:"slug"`
	// The description of the environment
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// List of environment entries
	Entries []*EnvironmentEntryResponseBody `form:"entries" json:"entries" xml:"entries"`
	// The creation date of the environment
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// When the environment was last updated
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// EnvironmentEntryResponseBody is used to define fields on response body types.
type EnvironmentEntryResponseBody struct {
	// The name of the environment variable
	Name string `form:"name" json:"name" xml:"name"`
	// The value of the environment variable
	Value string `form:"value" json:"value" xml:"value"`
	// The creation date of the environment entry
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// When the environment entry was last updated
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// NewLoadInstanceResponseBody builds the HTTP response body from the result of
// the "loadInstance" endpoint of the "instances" service.
func NewLoadInstanceResponseBody(res *instances.InstanceResult) *LoadInstanceResponseBody {
	body := &LoadInstanceResponseBody{}
	if res.Tools != nil {
		body.Tools = make([]*HTTPToolDefinitionResponseBody, len(res.Tools))
		for i, val := range res.Tools {
			body.Tools[i] = marshalInstancesHTTPToolDefinitionToHTTPToolDefinitionResponseBody(val)
		}
	} else {
		body.Tools = []*HTTPToolDefinitionResponseBody{}
	}
	if res.Environment != nil {
		body.Environment = marshalInstancesEnvironmentToEnvironmentResponseBody(res.Environment)
	}
	return body
}

// NewLoadInstancePayload builds a instances service loadInstance endpoint
// payload.
func NewLoadInstancePayload(toolsetSlug string, environmentSlug *string, sessionToken *string, projectSlug *string, apikeyToken *string) *instances.LoadInstancePayload {
	v := &instances.LoadInstancePayload{}
	v.ToolsetSlug = toolsetSlug
	v.EnvironmentSlug = environmentSlug
	v.SessionToken = sessionToken
	v.ProjectSlug = projectSlug
	v.ApikeyToken = apikeyToken

	return v
}
