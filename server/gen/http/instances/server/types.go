// Code generated by goa v3.20.1, DO NOT EDIT.
//
// instances HTTP server types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package server

import (
	instances "github.com/speakeasy-api/gram/gen/instances"
)

// LoadInstanceResponseBody is the type of the "instances" service
// "loadInstance" endpoint HTTP response body.
type LoadInstanceResponseBody struct {
	// The name of the toolset
	Name string `form:"name" json:"name" xml:"name"`
	// The description of the toolset
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The list of tools
	Tools []*HTTPToolDefinitionResponseBody `form:"tools" json:"tools" xml:"tools"`
	// The environment variables that are relevant to the toolset
	RelevantEnvironmentVariables []string `form:"relevant_environment_variables,omitempty" json:"relevant_environment_variables,omitempty" xml:"relevant_environment_variables,omitempty"`
	// The environment
	Environment *EnvironmentResponseBody `form:"environment" json:"environment" xml:"environment"`
}

// HTTPToolDefinitionResponseBody is used to define fields on response body
// types.
type HTTPToolDefinitionResponseBody struct {
	// The ID of the HTTP tool
	ID string `form:"id" json:"id" xml:"id"`
	// The ID of the project
	ProjectID string `form:"project_id" json:"project_id" xml:"project_id"`
	// The ID of the deployment
	DeploymentID string `form:"deployment_id" json:"deployment_id" xml:"deployment_id"`
	// The ID of the OpenAPI v3 document
	Openapiv3DocumentID *string `form:"openapiv3_document_id,omitempty" json:"openapiv3_document_id,omitempty" xml:"openapiv3_document_id,omitempty"`
	// The name of the tool
	Name string `form:"name" json:"name" xml:"name"`
	// Summary of the tool
	Summary string `form:"summary" json:"summary" xml:"summary"`
	// Description of the tool
	Description string `form:"description" json:"description" xml:"description"`
	// OpenAPI v3 operation
	Openapiv3Operation *string `form:"openapiv3_operation,omitempty" json:"openapiv3_operation,omitempty" xml:"openapiv3_operation,omitempty"`
	// The tags list for this http tool
	Tags []string `form:"tags" json:"tags" xml:"tags"`
	// Environment variable for the server URL
	ServerEnvVar *string `form:"server_env_var,omitempty" json:"server_env_var,omitempty" xml:"server_env_var,omitempty"`
	// Security configuration in JSON format
	Security *string `form:"security,omitempty" json:"security,omitempty" xml:"security,omitempty"`
	// HTTP method for the request
	HTTPMethod string `form:"http_method" json:"http_method" xml:"http_method"`
	// Path for the request
	Path string `form:"path" json:"path" xml:"path"`
	// Version of the schema
	SchemaVersion *string `form:"schema_version,omitempty" json:"schema_version,omitempty" xml:"schema_version,omitempty"`
	// JSON schema for the request
	Schema string `form:"schema" json:"schema" xml:"schema"`
	// The creation date of the tool.
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// The last update date of the tool.
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// EnvironmentResponseBody is used to define fields on response body types.
type EnvironmentResponseBody struct {
	// The ID of the environment
	ID string `form:"id" json:"id" xml:"id"`
	// The organization ID this environment belongs to
	OrganizationID string `form:"organization_id" json:"organization_id" xml:"organization_id"`
	// The project ID this environment belongs to
	ProjectID string `form:"project_id" json:"project_id" xml:"project_id"`
	// The name of the environment
	Name string `form:"name" json:"name" xml:"name"`
	// The slug identifier for the environment
	Slug string `form:"slug" json:"slug" xml:"slug"`
	// The description of the environment
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// List of environment entries
	Entries []*EnvironmentEntryResponseBody `form:"entries" json:"entries" xml:"entries"`
	// The creation date of the environment
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// When the environment was last updated
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// EnvironmentEntryResponseBody is used to define fields on response body types.
type EnvironmentEntryResponseBody struct {
	// The name of the environment variable
	Name string `form:"name" json:"name" xml:"name"`
	// The value of the environment variable
	Value string `form:"value" json:"value" xml:"value"`
	// The creation date of the environment entry
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// When the environment entry was last updated
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// NewLoadInstanceResponseBody builds the HTTP response body from the result of
// the "loadInstance" endpoint of the "instances" service.
func NewLoadInstanceResponseBody(res *instances.InstanceResult) *LoadInstanceResponseBody {
	body := &LoadInstanceResponseBody{
		Name:        res.Name,
		Description: res.Description,
	}
	if res.Tools != nil {
		body.Tools = make([]*HTTPToolDefinitionResponseBody, len(res.Tools))
		for i, val := range res.Tools {
			body.Tools[i] = marshalInstancesHTTPToolDefinitionToHTTPToolDefinitionResponseBody(val)
		}
	} else {
		body.Tools = []*HTTPToolDefinitionResponseBody{}
	}
	if res.RelevantEnvironmentVariables != nil {
		body.RelevantEnvironmentVariables = make([]string, len(res.RelevantEnvironmentVariables))
		for i, val := range res.RelevantEnvironmentVariables {
			body.RelevantEnvironmentVariables[i] = val
		}
	}
	if res.Environment != nil {
		body.Environment = marshalInstancesEnvironmentToEnvironmentResponseBody(res.Environment)
	}
	return body
}

// NewLoadInstancePayload builds a instances service loadInstance endpoint
// payload.
func NewLoadInstancePayload(toolsetSlug string, environmentSlug *string, sessionToken *string, projectSlug *string, apikeyToken *string) *instances.LoadInstancePayload {
	v := &instances.LoadInstancePayload{}
	v.ToolsetSlug = toolsetSlug
	v.EnvironmentSlug = environmentSlug
	v.SessionToken = sessionToken
	v.ProjectSlug = projectSlug
	v.ApikeyToken = apikeyToken

	return v
}
