// Code generated by goa v3.20.1, DO NOT EDIT.
//
// instances HTTP client types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package client

import (
	instances "github.com/speakeasy-api/gram/gen/instances"
	goa "goa.design/goa/v3/pkg"
)

// LoadInstanceResponseBody is the type of the "instances" service
// "loadInstance" endpoint HTTP response body.
type LoadInstanceResponseBody struct {
	// The list of tools
	Tools []*HTTPToolDefinitionResponseBody `form:"tools,omitempty" json:"tools,omitempty" xml:"tools,omitempty"`
	// The environment
	Environment *EnvironmentResponseBody `form:"environment,omitempty" json:"environment,omitempty" xml:"environment,omitempty"`
}

// HTTPToolDefinitionResponseBody is used to define fields on response body
// types.
type HTTPToolDefinitionResponseBody struct {
	// The ID of the HTTP tool
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The name of the tool
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the tool
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The tags list for this http tool
	Tags []string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
	// Environment variable for the server URL
	ServerEnvVar *string `form:"server_env_var,omitempty" json:"server_env_var,omitempty" xml:"server_env_var,omitempty"`
	// Type of security (http:bearer, http:basic, apikey)
	SecurityType *string `form:"security_type,omitempty" json:"security_type,omitempty" xml:"security_type,omitempty"`
	// Environment variable for bearer token
	BearerEnvVar *string `form:"bearer_env_var,omitempty" json:"bearer_env_var,omitempty" xml:"bearer_env_var,omitempty"`
	// Environment variable for API key
	ApikeyEnvVar *string `form:"apikey_env_var,omitempty" json:"apikey_env_var,omitempty" xml:"apikey_env_var,omitempty"`
	// Environment variable for username
	UsernameEnvVar *string `form:"username_env_var,omitempty" json:"username_env_var,omitempty" xml:"username_env_var,omitempty"`
	// Environment variable for password
	PasswordEnvVar *string `form:"password_env_var,omitempty" json:"password_env_var,omitempty" xml:"password_env_var,omitempty"`
	// HTTP method for the request
	HTTPMethod *string `form:"http_method,omitempty" json:"http_method,omitempty" xml:"http_method,omitempty"`
	// Path for the request
	Path *string `form:"path,omitempty" json:"path,omitempty" xml:"path,omitempty"`
	// JSON schema for the request
	Schema *string `form:"schema,omitempty" json:"schema,omitempty" xml:"schema,omitempty"`
	// The creation date of the tool.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The last update date of the tool.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// EnvironmentResponseBody is used to define fields on response body types.
type EnvironmentResponseBody struct {
	// The ID of the environment
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The organization ID this environment belongs to
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// The project ID this environment belongs to
	ProjectID *string `form:"project_id,omitempty" json:"project_id,omitempty" xml:"project_id,omitempty"`
	// The name of the environment
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The slug identifier for the environment
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	// The description of the environment
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// List of environment entries
	Entries []*EnvironmentEntryResponseBody `form:"entries,omitempty" json:"entries,omitempty" xml:"entries,omitempty"`
	// The creation date of the environment
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// When the environment was last updated
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// EnvironmentEntryResponseBody is used to define fields on response body types.
type EnvironmentEntryResponseBody struct {
	// The name of the environment variable
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The value of the environment variable
	Value *string `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
	// The creation date of the environment entry
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// When the environment entry was last updated
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// NewLoadInstanceInstanceResultOK builds a "instances" service "loadInstance"
// endpoint result from a HTTP "OK" response.
func NewLoadInstanceInstanceResultOK(body *LoadInstanceResponseBody) *instances.InstanceResult {
	v := &instances.InstanceResult{}
	v.Tools = make([]*instances.HTTPToolDefinition, len(body.Tools))
	for i, val := range body.Tools {
		v.Tools[i] = unmarshalHTTPToolDefinitionResponseBodyToInstancesHTTPToolDefinition(val)
	}
	v.Environment = unmarshalEnvironmentResponseBodyToInstancesEnvironment(body.Environment)

	return v
}

// ValidateLoadInstanceResponseBody runs the validations defined on
// LoadInstanceResponseBody
func ValidateLoadInstanceResponseBody(body *LoadInstanceResponseBody) (err error) {
	if body.Tools == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tools", "body"))
	}
	if body.Environment == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("environment", "body"))
	}
	for _, e := range body.Tools {
		if e != nil {
			if err2 := ValidateHTTPToolDefinitionResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Environment != nil {
		if err2 := ValidateEnvironmentResponseBody(body.Environment); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateHTTPToolDefinitionResponseBody runs the validations defined on
// HTTPToolDefinitionResponseBody
func ValidateHTTPToolDefinitionResponseBody(body *HTTPToolDefinitionResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Tags == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tags", "body"))
	}
	if body.HTTPMethod == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("http_method", "body"))
	}
	if body.Path == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("path", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateEnvironmentResponseBody runs the validations defined on
// EnvironmentResponseBody
func ValidateEnvironmentResponseBody(body *EnvironmentResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.OrganizationID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("organization_id", "body"))
	}
	if body.ProjectID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("project_id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slug", "body"))
	}
	if body.Entries == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("entries", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	for _, e := range body.Entries {
		if e != nil {
			if err2 := ValidateEnvironmentEntryResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateEnvironmentEntryResponseBody runs the validations defined on
// EnvironmentEntryResponseBody
func ValidateEnvironmentEntryResponseBody(body *EnvironmentEntryResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Value == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("value", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}
