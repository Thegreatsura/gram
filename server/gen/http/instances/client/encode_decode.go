// Code generated by goa v3.20.1, DO NOT EDIT.
//
// instances HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	instances "github.com/speakeasy-api/gram/gen/instances"
	goahttp "goa.design/goa/v3/http"
)

// BuildLoadInstanceRequest instantiates a HTTP request object with method and
// path set to call the "instances" service "loadInstance" endpoint
func (c *Client) BuildLoadInstanceRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: LoadInstanceInstancesPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("instances", "loadInstance", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeLoadInstanceRequest returns an encoder for requests sent to the
// instances loadInstance server.
func EncodeLoadInstanceRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*instances.LoadInstancePayload)
		if !ok {
			return goahttp.ErrInvalidType("instances", "loadInstance", "*instances.LoadInstancePayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		if p.ApikeyToken != nil {
			head := *p.ApikeyToken
			req.Header.Set("Gram-Key", head)
		}
		values := req.URL.Query()
		values.Add("toolset_slug", p.ToolsetSlug)
		if p.EnvironmentSlug != nil {
			values.Add("environment_slug", *p.EnvironmentSlug)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeLoadInstanceResponse returns a decoder for responses returned by the
// instances loadInstance endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeLoadInstanceResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body LoadInstanceResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("instances", "loadInstance", err)
			}
			err = ValidateLoadInstanceResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("instances", "loadInstance", err)
			}
			res := NewLoadInstanceInstanceResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("instances", "loadInstance", resp.StatusCode, string(body))
		}
	}
}

// unmarshalHTTPToolDefinitionResponseBodyToInstancesHTTPToolDefinition builds
// a value of type *instances.HTTPToolDefinition from a value of type
// *HTTPToolDefinitionResponseBody.
func unmarshalHTTPToolDefinitionResponseBodyToInstancesHTTPToolDefinition(v *HTTPToolDefinitionResponseBody) *instances.HTTPToolDefinition {
	res := &instances.HTTPToolDefinition{
		ID:                  *v.ID,
		ProjectID:           *v.ProjectID,
		DeploymentID:        *v.DeploymentID,
		Openapiv3DocumentID: v.Openapiv3DocumentID,
		Name:                *v.Name,
		Summary:             *v.Summary,
		Description:         *v.Description,
		Openapiv3Operation:  v.Openapiv3Operation,
		Security:            v.Security,
		HTTPMethod:          *v.HTTPMethod,
		Path:                *v.Path,
		SchemaVersion:       v.SchemaVersion,
		Schema:              *v.Schema,
		CreatedAt:           *v.CreatedAt,
		UpdatedAt:           *v.UpdatedAt,
	}
	res.Tags = make([]string, len(v.Tags))
	for i, val := range v.Tags {
		res.Tags[i] = val
	}

	return res
}

// unmarshalEnvironmentResponseBodyToInstancesEnvironment builds a value of
// type *instances.Environment from a value of type *EnvironmentResponseBody.
func unmarshalEnvironmentResponseBodyToInstancesEnvironment(v *EnvironmentResponseBody) *instances.Environment {
	res := &instances.Environment{
		ID:             *v.ID,
		OrganizationID: *v.OrganizationID,
		ProjectID:      *v.ProjectID,
		Name:           *v.Name,
		Slug:           *v.Slug,
		Description:    v.Description,
		CreatedAt:      *v.CreatedAt,
		UpdatedAt:      *v.UpdatedAt,
	}
	res.Entries = make([]*instances.EnvironmentEntry, len(v.Entries))
	for i, val := range v.Entries {
		res.Entries[i] = unmarshalEnvironmentEntryResponseBodyToInstancesEnvironmentEntry(val)
	}

	return res
}

// unmarshalEnvironmentEntryResponseBodyToInstancesEnvironmentEntry builds a
// value of type *instances.EnvironmentEntry from a value of type
// *EnvironmentEntryResponseBody.
func unmarshalEnvironmentEntryResponseBodyToInstancesEnvironmentEntry(v *EnvironmentEntryResponseBody) *instances.EnvironmentEntry {
	res := &instances.EnvironmentEntry{
		Name:      *v.Name,
		Value:     *v.Value,
		CreatedAt: *v.CreatedAt,
		UpdatedAt: *v.UpdatedAt,
	}

	return res
}
