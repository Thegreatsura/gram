// Code generated by goa v3.20.0, DO NOT EDIT.
//
// assets HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package server

import (
	"context"
	"net/http"
	"strconv"
	"strings"

	assets "github.com/speakeasy-api/gram/gen/assets"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeUploadOpenAPIv3Response returns an encoder for responses returned by
// the assets uploadOpenAPIv3 endpoint.
func EncodeUploadOpenAPIv3Response(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*assets.UploadOpenAPIv3Result)
		enc := encoder(ctx, w)
		body := NewUploadOpenAPIv3ResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUploadOpenAPIv3Request returns a decoder for requests sent to the
// assets uploadOpenAPIv3 endpoint.
func DecodeUploadOpenAPIv3Request(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			contentType      string
			contentLength    int64
			projectSlug      string
			gramSessionToken *string
			err              error
		)
		contentType = r.Header.Get("Content-Type")
		if contentType == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("content_type", "header"))
		}
		{
			contentLengthRaw := r.Header.Get("Content-Length")
			if contentLengthRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("content_length", "header"))
			}
			v, err2 := strconv.ParseInt(contentLengthRaw, 10, 64)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("content_length", contentLengthRaw, "integer"))
			}
			contentLength = v
		}
		projectSlug = r.Header.Get("Gram-Project")
		if projectSlug == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("project_slug", "header"))
		}
		gramSessionTokenRaw := r.Header.Get("Gram-Session")
		if gramSessionTokenRaw != "" {
			gramSessionToken = &gramSessionTokenRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewUploadOpenAPIv3Payload(contentType, contentLength, projectSlug, gramSessionToken)
		if payload.GramSessionToken != nil {
			if strings.Contains(*payload.GramSessionToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.GramSessionToken, " ", 2)[1]
				payload.GramSessionToken = &cred
			}
		}

		return payload, nil
	}
}

// marshalAssetsAssetToAssetResponseBody builds a value of type
// *AssetResponseBody from a value of type *assets.Asset.
func marshalAssetsAssetToAssetResponseBody(v *assets.Asset) *AssetResponseBody {
	res := &AssetResponseBody{
		ID:            v.ID,
		URL:           v.URL,
		Kind:          v.Kind,
		Sha256:        v.Sha256,
		ContentType:   v.ContentType,
		ContentLength: v.ContentLength,
		CreatedAt:     v.CreatedAt,
		UpdatedAt:     v.UpdatedAt,
	}

	return res
}
