// Code generated by goa v3.20.1, DO NOT EDIT.
//
// assets HTTP client types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package client

import (
	assets "github.com/speakeasy-api/gram/gen/assets"
	goa "goa.design/goa/v3/pkg"
)

// UploadOpenAPIv3ResponseBody is the type of the "assets" service
// "uploadOpenAPIv3" endpoint HTTP response body.
type UploadOpenAPIv3ResponseBody struct {
	// The URL to the uploaded OpenAPI document
	Asset *AssetResponseBody `form:"asset,omitempty" json:"asset,omitempty" xml:"asset,omitempty"`
}

// AssetResponseBody is used to define fields on response body types.
type AssetResponseBody struct {
	// The ID of the asset
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The URL to the uploaded asset
	URL  *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	Kind *string `form:"kind,omitempty" json:"kind,omitempty" xml:"kind,omitempty"`
	// The SHA256 hash of the asset
	Sha256 *string `form:"sha256,omitempty" json:"sha256,omitempty" xml:"sha256,omitempty"`
	// The content type of the asset
	ContentType *string `form:"content_type,omitempty" json:"content_type,omitempty" xml:"content_type,omitempty"`
	// The content length of the asset
	ContentLength *int64 `form:"content_length,omitempty" json:"content_length,omitempty" xml:"content_length,omitempty"`
	// The creation date of the asset.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The last update date of the asset.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// NewUploadOpenAPIv3ResultOK builds a "assets" service "uploadOpenAPIv3"
// endpoint result from a HTTP "OK" response.
func NewUploadOpenAPIv3ResultOK(body *UploadOpenAPIv3ResponseBody) *assets.UploadOpenAPIv3Result {
	v := &assets.UploadOpenAPIv3Result{}
	v.Asset = unmarshalAssetResponseBodyToAssetsAsset(body.Asset)

	return v
}

// ValidateUploadOpenAPIv3ResponseBody runs the validations defined on
// UploadOpenAPIv3ResponseBody
func ValidateUploadOpenAPIv3ResponseBody(body *UploadOpenAPIv3ResponseBody) (err error) {
	if body.Asset == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("asset", "body"))
	}
	if body.Asset != nil {
		if err2 := ValidateAssetResponseBody(body.Asset); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateAssetResponseBody runs the validations defined on AssetResponseBody
func ValidateAssetResponseBody(body *AssetResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "body"))
	}
	if body.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "body"))
	}
	if body.Sha256 == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sha256", "body"))
	}
	if body.ContentType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("content_type", "body"))
	}
	if body.ContentLength == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("content_length", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	if body.Kind != nil {
		if !(*body.Kind == "openapiv3" || *body.Kind == "unknown") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.kind", *body.Kind, []any{"openapiv3", "unknown"}))
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}
