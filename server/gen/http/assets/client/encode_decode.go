// Code generated by goa v3.20.0, DO NOT EDIT.
//
// assets HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"os"
	"strconv"

	assets "github.com/speakeasy-api/gram/gen/assets"
	goahttp "goa.design/goa/v3/http"
)

// BuildUploadOpenAPIv3Request instantiates a HTTP request object with method
// and path set to call the "assets" service "uploadOpenAPIv3" endpoint
func (c *Client) BuildUploadOpenAPIv3Request(ctx context.Context, v any) (*http.Request, error) {
	var (
		body io.Reader
	)
	rd, ok := v.(*assets.UploadOpenAPIv3RequestData)
	if !ok {
		return nil, goahttp.ErrInvalidType("assets", "uploadOpenAPIv3", "assets.UploadOpenAPIv3RequestData", v)
	}
	body = rd.Body
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UploadOpenAPIv3AssetsPath()}
	req, err := http.NewRequest("POST", u.String(), body)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("assets", "uploadOpenAPIv3", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUploadOpenAPIv3Request returns an encoder for requests sent to the
// assets uploadOpenAPIv3 server.
func EncodeUploadOpenAPIv3Request(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		data, ok := v.(*assets.UploadOpenAPIv3RequestData)
		if !ok {
			return goahttp.ErrInvalidType("assets", "uploadOpenAPIv3", "*assets.UploadOpenAPIv3RequestData", v)
		}
		p := data.Payload
		{
			head := p.ContentType
			req.Header.Set("Content-Type", head)
		}
		{
			head := p.ContentLength
			headStr := strconv.FormatInt(head, 10)
			req.Header.Set("Content-Length", headStr)
		}
		{
			head := p.ProjectSlug
			req.Header.Set("Gram-Project", head)
		}
		if p.GramSessionToken != nil {
			head := *p.GramSessionToken
			req.Header.Set("X-Gram-Session", head)
		}
		return nil
	}
}

// DecodeUploadOpenAPIv3Response returns a decoder for responses returned by
// the assets uploadOpenAPIv3 endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeUploadOpenAPIv3Response(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UploadOpenAPIv3ResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("assets", "uploadOpenAPIv3", err)
			}
			err = ValidateUploadOpenAPIv3ResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("assets", "uploadOpenAPIv3", err)
			}
			res := NewUploadOpenAPIv3ResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("assets", "uploadOpenAPIv3", resp.StatusCode, string(body))
		}
	}
}

// // BuildUploadOpenAPIv3StreamPayload creates a streaming endpoint request
// payload from the method payload and the path to the file to be streamed
func BuildUploadOpenAPIv3StreamPayload(payload any, fpath string) (*assets.UploadOpenAPIv3RequestData, error) {
	f, err := os.Open(fpath)
	if err != nil {
		return nil, err
	}
	return &assets.UploadOpenAPIv3RequestData{
		Payload: payload.(*assets.UploadOpenAPIv3Payload),
		Body:    f,
	}, nil
}

// unmarshalAssetResponseBodyToAssetsAsset builds a value of type *assets.Asset
// from a value of type *AssetResponseBody.
func unmarshalAssetResponseBodyToAssetsAsset(v *AssetResponseBody) *assets.Asset {
	res := &assets.Asset{
		ID:            *v.ID,
		URL:           *v.URL,
		Kind:          *v.Kind,
		Sha256:        *v.Sha256,
		ContentType:   *v.ContentType,
		ContentLength: *v.ContentLength,
		CreatedAt:     *v.CreatedAt,
		UpdatedAt:     *v.UpdatedAt,
	}

	return res
}
