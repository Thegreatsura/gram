// Code generated by goa v3.20.1, DO NOT EDIT.
//
// templates client HTTP transport
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the templates service endpoint HTTP clients.
type Client struct {
	// CreateTemplate Doer is the HTTP client used to make requests to the
	// createTemplate endpoint.
	CreateTemplateDoer goahttp.Doer

	// GetTemplate Doer is the HTTP client used to make requests to the getTemplate
	// endpoint.
	GetTemplateDoer goahttp.Doer

	// ListTemplates Doer is the HTTP client used to make requests to the
	// listTemplates endpoint.
	ListTemplatesDoer goahttp.Doer

	// DeleteTemplate Doer is the HTTP client used to make requests to the
	// deleteTemplate endpoint.
	DeleteTemplateDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the templates service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		CreateTemplateDoer:  doer,
		GetTemplateDoer:     doer,
		ListTemplatesDoer:   doer,
		DeleteTemplateDoer:  doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// CreateTemplate returns an endpoint that makes HTTP requests to the templates
// service createTemplate server.
func (c *Client) CreateTemplate() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateTemplateRequest(c.encoder)
		decodeResponse = DecodeCreateTemplateResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreateTemplateRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateTemplateDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("templates", "createTemplate", err)
		}
		return decodeResponse(resp)
	}
}

// GetTemplate returns an endpoint that makes HTTP requests to the templates
// service getTemplate server.
func (c *Client) GetTemplate() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetTemplateRequest(c.encoder)
		decodeResponse = DecodeGetTemplateResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetTemplateRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetTemplateDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("templates", "getTemplate", err)
		}
		return decodeResponse(resp)
	}
}

// ListTemplates returns an endpoint that makes HTTP requests to the templates
// service listTemplates server.
func (c *Client) ListTemplates() goa.Endpoint {
	var (
		encodeRequest  = EncodeListTemplatesRequest(c.encoder)
		decodeResponse = DecodeListTemplatesResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildListTemplatesRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListTemplatesDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("templates", "listTemplates", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteTemplate returns an endpoint that makes HTTP requests to the templates
// service deleteTemplate server.
func (c *Client) DeleteTemplate() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteTemplateRequest(c.encoder)
		decodeResponse = DecodeDeleteTemplateResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteTemplateRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteTemplateDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("templates", "deleteTemplate", err)
		}
		return decodeResponse(resp)
	}
}
