// Code generated by goa v3.20.1, DO NOT EDIT.
//
// templates HTTP client CLI support package
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package client

import (
	"encoding/json"
	"fmt"

	templates "github.com/speakeasy-api/gram/gen/templates"
	goa "goa.design/goa/v3/pkg"
)

// BuildCreateTemplatePayload builds the payload for the templates
// createTemplate endpoint from CLI flags.
func BuildCreateTemplatePayload(templatesCreateTemplateBody string, templatesCreateTemplateApikeyToken string, templatesCreateTemplateSessionToken string, templatesCreateTemplateProjectSlugInput string) (*templates.CreateTemplatePayload, error) {
	var err error
	var body CreateTemplateRequestBody
	{
		err = json.Unmarshal([]byte(templatesCreateTemplateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"arguments\": \"{\\\"name\\\":\\\"example\\\",\\\"email\\\":\\\"mail@example.com\\\"}\",\n      \"description\": \"Delectus saepe qui tempore.\",\n      \"engine\": \"mustache\",\n      \"kind\": \"higher_order_tool\",\n      \"name\": \"Natus culpa.\",\n      \"predecessor_id\": \"Et ut numquam sed.\",\n      \"prompt\": \"Ut inventore voluptates vitae ducimus.\",\n      \"tools_hint\": [\n         \"Itaque vel dolorum possimus.\",\n         \"Eaque aut deleniti earum.\",\n         \"Quis sunt eos et consequatur odit.\"\n      ]\n   }'")
		}
		if body.Arguments != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.arguments", *body.Arguments, goa.FormatJSON))
		}
		if !(body.Engine == "mustache") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.engine", body.Engine, []any{"mustache"}))
		}
		if !(body.Kind == "prompt" || body.Kind == "higher_order_tool") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.kind", body.Kind, []any{"prompt", "higher_order_tool"}))
		}
		if len(body.ToolsHint) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.tools_hint", body.ToolsHint, len(body.ToolsHint), 20, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var apikeyToken *string
	{
		if templatesCreateTemplateApikeyToken != "" {
			apikeyToken = &templatesCreateTemplateApikeyToken
		}
	}
	var sessionToken *string
	{
		if templatesCreateTemplateSessionToken != "" {
			sessionToken = &templatesCreateTemplateSessionToken
		}
	}
	var projectSlugInput *string
	{
		if templatesCreateTemplateProjectSlugInput != "" {
			projectSlugInput = &templatesCreateTemplateProjectSlugInput
		}
	}
	v := &templates.CreateTemplatePayload{
		Name:          body.Name,
		Prompt:        body.Prompt,
		Description:   body.Description,
		Arguments:     body.Arguments,
		Engine:        body.Engine,
		Kind:          body.Kind,
		PredecessorID: body.PredecessorID,
	}
	if body.ToolsHint != nil {
		v.ToolsHint = make([]string, len(body.ToolsHint))
		for i, val := range body.ToolsHint {
			v.ToolsHint[i] = val
		}
	}
	v.ApikeyToken = apikeyToken
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}

// BuildGetTemplatePayload builds the payload for the templates getTemplate
// endpoint from CLI flags.
func BuildGetTemplatePayload(templatesGetTemplateID string, templatesGetTemplateName string, templatesGetTemplateApikeyToken string, templatesGetTemplateSessionToken string, templatesGetTemplateProjectSlugInput string) (*templates.GetTemplatePayload, error) {
	var id *string
	{
		if templatesGetTemplateID != "" {
			id = &templatesGetTemplateID
		}
	}
	var name *string
	{
		if templatesGetTemplateName != "" {
			name = &templatesGetTemplateName
		}
	}
	var apikeyToken *string
	{
		if templatesGetTemplateApikeyToken != "" {
			apikeyToken = &templatesGetTemplateApikeyToken
		}
	}
	var sessionToken *string
	{
		if templatesGetTemplateSessionToken != "" {
			sessionToken = &templatesGetTemplateSessionToken
		}
	}
	var projectSlugInput *string
	{
		if templatesGetTemplateProjectSlugInput != "" {
			projectSlugInput = &templatesGetTemplateProjectSlugInput
		}
	}
	v := &templates.GetTemplatePayload{}
	v.ID = id
	v.Name = name
	v.ApikeyToken = apikeyToken
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}

// BuildListTemplatesPayload builds the payload for the templates listTemplates
// endpoint from CLI flags.
func BuildListTemplatesPayload(templatesListTemplatesApikeyToken string, templatesListTemplatesSessionToken string, templatesListTemplatesProjectSlugInput string) (*templates.ListTemplatesPayload, error) {
	var apikeyToken *string
	{
		if templatesListTemplatesApikeyToken != "" {
			apikeyToken = &templatesListTemplatesApikeyToken
		}
	}
	var sessionToken *string
	{
		if templatesListTemplatesSessionToken != "" {
			sessionToken = &templatesListTemplatesSessionToken
		}
	}
	var projectSlugInput *string
	{
		if templatesListTemplatesProjectSlugInput != "" {
			projectSlugInput = &templatesListTemplatesProjectSlugInput
		}
	}
	v := &templates.ListTemplatesPayload{}
	v.ApikeyToken = apikeyToken
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}

// BuildDeleteTemplatePayload builds the payload for the templates
// deleteTemplate endpoint from CLI flags.
func BuildDeleteTemplatePayload(templatesDeleteTemplateID string, templatesDeleteTemplateName string, templatesDeleteTemplateApikeyToken string, templatesDeleteTemplateSessionToken string, templatesDeleteTemplateProjectSlugInput string) (*templates.DeleteTemplatePayload, error) {
	var id *string
	{
		if templatesDeleteTemplateID != "" {
			id = &templatesDeleteTemplateID
		}
	}
	var name *string
	{
		if templatesDeleteTemplateName != "" {
			name = &templatesDeleteTemplateName
		}
	}
	var apikeyToken *string
	{
		if templatesDeleteTemplateApikeyToken != "" {
			apikeyToken = &templatesDeleteTemplateApikeyToken
		}
	}
	var sessionToken *string
	{
		if templatesDeleteTemplateSessionToken != "" {
			sessionToken = &templatesDeleteTemplateSessionToken
		}
	}
	var projectSlugInput *string
	{
		if templatesDeleteTemplateProjectSlugInput != "" {
			projectSlugInput = &templatesDeleteTemplateProjectSlugInput
		}
	}
	v := &templates.DeleteTemplatePayload{}
	v.ID = id
	v.Name = name
	v.ApikeyToken = apikeyToken
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}
