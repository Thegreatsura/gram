// Code generated by goa v3.20.1, DO NOT EDIT.
//
// deployments HTTP client CLI support package
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package client

import (
	"encoding/json"
	"fmt"

	deployments "github.com/speakeasy-api/gram/gen/deployments"
	goa "goa.design/goa/v3/pkg"
)

// BuildGetDeploymentPayload builds the payload for the deployments
// getDeployment endpoint from CLI flags.
func BuildGetDeploymentPayload(deploymentsGetDeploymentID string, deploymentsGetDeploymentSessionToken string, deploymentsGetDeploymentProjectSlugInput string) (*deployments.GetDeploymentPayload, error) {
	var id string
	{
		id = deploymentsGetDeploymentID
	}
	var sessionToken *string
	{
		if deploymentsGetDeploymentSessionToken != "" {
			sessionToken = &deploymentsGetDeploymentSessionToken
		}
	}
	var projectSlugInput *string
	{
		if deploymentsGetDeploymentProjectSlugInput != "" {
			projectSlugInput = &deploymentsGetDeploymentProjectSlugInput
		}
	}
	v := &deployments.GetDeploymentPayload{}
	v.ID = id
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}

// BuildGetLatestDeploymentPayload builds the payload for the deployments
// getLatestDeployment endpoint from CLI flags.
func BuildGetLatestDeploymentPayload(deploymentsGetLatestDeploymentSessionToken string, deploymentsGetLatestDeploymentProjectSlugInput string) (*deployments.GetLatestDeploymentPayload, error) {
	var sessionToken *string
	{
		if deploymentsGetLatestDeploymentSessionToken != "" {
			sessionToken = &deploymentsGetLatestDeploymentSessionToken
		}
	}
	var projectSlugInput *string
	{
		if deploymentsGetLatestDeploymentProjectSlugInput != "" {
			projectSlugInput = &deploymentsGetLatestDeploymentProjectSlugInput
		}
	}
	v := &deployments.GetLatestDeploymentPayload{}
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}

// BuildCreateDeploymentPayload builds the payload for the deployments
// createDeployment endpoint from CLI flags.
func BuildCreateDeploymentPayload(deploymentsCreateDeploymentBody string, deploymentsCreateDeploymentSessionToken string, deploymentsCreateDeploymentProjectSlugInput string, deploymentsCreateDeploymentIdempotencyKey string) (*deployments.CreateDeploymentPayload, error) {
	var err error
	var body CreateDeploymentRequestBody
	{
		err = json.Unmarshal([]byte(deploymentsCreateDeploymentBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"external_id\": \"bc5f4a555e933e6861d12edba4c2d87ef6caf8e6\",\n      \"external_url\": \"Quos voluptates autem nulla quo perferendis dolorum.\",\n      \"github_pr\": \"1234\",\n      \"github_repo\": \"speakeasyapi/gram\",\n      \"github_sha\": \"f33e693e9e12552043bc0ec5c37f1b8a9e076161\",\n      \"openapiv3_assets\": [\n         {\n            \"asset_id\": \"Perferendis hic expedita.\",\n            \"name\": \"Qui aliquid qui.\",\n            \"slug\": \"xgl\"\n         },\n         {\n            \"asset_id\": \"Perferendis hic expedita.\",\n            \"name\": \"Qui aliquid qui.\",\n            \"slug\": \"xgl\"\n         },\n         {\n            \"asset_id\": \"Perferendis hic expedita.\",\n            \"name\": \"Qui aliquid qui.\",\n            \"slug\": \"xgl\"\n         }\n      ],\n      \"packages\": [\n         {\n            \"name\": \"Nulla quis ut expedita ipsa.\",\n            \"version\": \"Doloribus facilis.\"\n         },\n         {\n            \"name\": \"Nulla quis ut expedita ipsa.\",\n            \"version\": \"Doloribus facilis.\"\n         },\n         {\n            \"name\": \"Nulla quis ut expedita ipsa.\",\n            \"version\": \"Doloribus facilis.\"\n         }\n      ]\n   }'")
		}
		for _, e := range body.Openapiv3Assets {
			if e != nil {
				if err2 := ValidateAddOpenAPIv3DeploymentAssetFormRequestBody(e); err2 != nil {
					err = goa.MergeErrors(err, err2)
				}
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var sessionToken *string
	{
		if deploymentsCreateDeploymentSessionToken != "" {
			sessionToken = &deploymentsCreateDeploymentSessionToken
		}
	}
	var projectSlugInput *string
	{
		if deploymentsCreateDeploymentProjectSlugInput != "" {
			projectSlugInput = &deploymentsCreateDeploymentProjectSlugInput
		}
	}
	var idempotencyKey string
	{
		idempotencyKey = deploymentsCreateDeploymentIdempotencyKey
	}
	v := &deployments.CreateDeploymentPayload{
		GithubRepo:  body.GithubRepo,
		GithubPr:    body.GithubPr,
		GithubSha:   body.GithubSha,
		ExternalID:  body.ExternalID,
		ExternalURL: body.ExternalURL,
	}
	if body.Openapiv3Assets != nil {
		v.Openapiv3Assets = make([]*deployments.AddOpenAPIv3DeploymentAssetForm, len(body.Openapiv3Assets))
		for i, val := range body.Openapiv3Assets {
			v.Openapiv3Assets[i] = marshalAddOpenAPIv3DeploymentAssetFormRequestBodyToDeploymentsAddOpenAPIv3DeploymentAssetForm(val)
		}
	}
	if body.Packages != nil {
		v.Packages = make([]*deployments.AddDeploymentPackageForm, len(body.Packages))
		for i, val := range body.Packages {
			v.Packages[i] = marshalAddDeploymentPackageFormRequestBodyToDeploymentsAddDeploymentPackageForm(val)
		}
	}
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput
	v.IdempotencyKey = idempotencyKey

	return v, nil
}

// BuildEvolvePayload builds the payload for the deployments evolve endpoint
// from CLI flags.
func BuildEvolvePayload(deploymentsEvolveBody string, deploymentsEvolveSessionToken string, deploymentsEvolveProjectSlugInput string) (*deployments.EvolvePayload, error) {
	var err error
	var body EvolveRequestBody
	{
		err = json.Unmarshal([]byte(deploymentsEvolveBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"deployment_id\": \"Vero suscipit excepturi.\",\n      \"exclude_openapiv3_assets\": [\n         \"Omnis repellat aut eligendi minus saepe.\",\n         \"Id qui iusto voluptate quam maiores qui.\",\n         \"Eos repellendus reprehenderit.\"\n      ],\n      \"exclude_packages\": [\n         \"Quo qui dolor.\",\n         \"Itaque fugit fugiat fuga quia fuga.\",\n         \"Nihil tempora aut nisi odio officiis.\"\n      ],\n      \"upsert_openapiv3_assets\": [\n         {\n            \"asset_id\": \"Perferendis hic expedita.\",\n            \"name\": \"Qui aliquid qui.\",\n            \"slug\": \"xgl\"\n         },\n         {\n            \"asset_id\": \"Perferendis hic expedita.\",\n            \"name\": \"Qui aliquid qui.\",\n            \"slug\": \"xgl\"\n         }\n      ],\n      \"upsert_packages\": [\n         {\n            \"name\": \"Velit vel dolor et id.\",\n            \"version\": \"Voluptas ullam eum vitae voluptatum sint.\"\n         },\n         {\n            \"name\": \"Velit vel dolor et id.\",\n            \"version\": \"Voluptas ullam eum vitae voluptatum sint.\"\n         }\n      ]\n   }'")
		}
	}
	var sessionToken *string
	{
		if deploymentsEvolveSessionToken != "" {
			sessionToken = &deploymentsEvolveSessionToken
		}
	}
	var projectSlugInput *string
	{
		if deploymentsEvolveProjectSlugInput != "" {
			projectSlugInput = &deploymentsEvolveProjectSlugInput
		}
	}
	v := &deployments.EvolvePayload{
		DeploymentID: body.DeploymentID,
	}
	if body.UpsertOpenapiv3Assets != nil {
		v.UpsertOpenapiv3Assets = make([]*deployments.AddOpenAPIv3DeploymentAssetForm, len(body.UpsertOpenapiv3Assets))
		for i, val := range body.UpsertOpenapiv3Assets {
			v.UpsertOpenapiv3Assets[i] = marshalAddOpenAPIv3DeploymentAssetFormRequestBodyToDeploymentsAddOpenAPIv3DeploymentAssetForm(val)
		}
	}
	if body.UpsertPackages != nil {
		v.UpsertPackages = make([]*deployments.AddPackageForm, len(body.UpsertPackages))
		for i, val := range body.UpsertPackages {
			v.UpsertPackages[i] = marshalAddPackageFormRequestBodyToDeploymentsAddPackageForm(val)
		}
	}
	if body.ExcludeOpenapiv3Assets != nil {
		v.ExcludeOpenapiv3Assets = make([]string, len(body.ExcludeOpenapiv3Assets))
		for i, val := range body.ExcludeOpenapiv3Assets {
			v.ExcludeOpenapiv3Assets[i] = val
		}
	}
	if body.ExcludePackages != nil {
		v.ExcludePackages = make([]string, len(body.ExcludePackages))
		for i, val := range body.ExcludePackages {
			v.ExcludePackages[i] = val
		}
	}
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}

// BuildListDeploymentsPayload builds the payload for the deployments
// listDeployments endpoint from CLI flags.
func BuildListDeploymentsPayload(deploymentsListDeploymentsCursor string, deploymentsListDeploymentsSessionToken string, deploymentsListDeploymentsProjectSlugInput string) (*deployments.ListDeploymentsPayload, error) {
	var cursor *string
	{
		if deploymentsListDeploymentsCursor != "" {
			cursor = &deploymentsListDeploymentsCursor
		}
	}
	var sessionToken *string
	{
		if deploymentsListDeploymentsSessionToken != "" {
			sessionToken = &deploymentsListDeploymentsSessionToken
		}
	}
	var projectSlugInput *string
	{
		if deploymentsListDeploymentsProjectSlugInput != "" {
			projectSlugInput = &deploymentsListDeploymentsProjectSlugInput
		}
	}
	v := &deployments.ListDeploymentsPayload{}
	v.Cursor = cursor
	v.SessionToken = sessionToken
	v.ProjectSlugInput = projectSlugInput

	return v, nil
}
