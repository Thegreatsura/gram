// Code generated by goa v3.20.0, DO NOT EDIT.
//
// deployments HTTP client CLI support package
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package client

import (
	"encoding/json"
	"fmt"
	"strconv"

	deployments "github.com/speakeasy-api/gram/gen/deployments"
	goa "goa.design/goa/v3/pkg"
)

// BuildGetDeploymentPayload builds the payload for the deployments
// getDeployment endpoint from CLI flags.
func BuildGetDeploymentPayload(deploymentsGetDeploymentID string, deploymentsGetDeploymentGramSessionToken string) (*deployments.GetDeploymentPayload, error) {
	var id string
	{
		id = deploymentsGetDeploymentID
	}
	var gramSessionToken *string
	{
		if deploymentsGetDeploymentGramSessionToken != "" {
			gramSessionToken = &deploymentsGetDeploymentGramSessionToken
		}
	}
	v := &deployments.GetDeploymentPayload{}
	v.ID = id
	v.GramSessionToken = gramSessionToken

	return v, nil
}

// BuildCreateDeploymentPayload builds the payload for the deployments
// createDeployment endpoint from CLI flags.
func BuildCreateDeploymentPayload(deploymentsCreateDeploymentBody string, deploymentsCreateDeploymentGramSessionToken string) (*deployments.CreateDeploymentPayload, error) {
	var err error
	var body CreateDeploymentRequestBody
	{
		err = json.Unmarshal([]byte(deploymentsCreateDeploymentBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"external_id\": \"bc5f4a555e933e6861d12edba4c2d87ef6caf8e6\",\n      \"external_url\": \"Beatae aut veniam voluptas at.\",\n      \"github_repo\": \"speakeasyapi/gram\",\n      \"github_sha\": \"f33e693e9e12552043bc0ec5c37f1b8a9e076161\",\n      \"idempotency_key\": \"01jqq0ajmb4qh9eppz48dejr2m\",\n      \"openapiv3_asset_ids\": [\n         \"Laborum quam.\",\n         \"Facere accusamus illum quibusdam deleniti.\"\n      ]\n   }'")
		}
	}
	var gramSessionToken *string
	{
		if deploymentsCreateDeploymentGramSessionToken != "" {
			gramSessionToken = &deploymentsCreateDeploymentGramSessionToken
		}
	}
	v := &deployments.CreateDeploymentPayload{
		IdempotencyKey: body.IdempotencyKey,
		GithubRepo:     body.GithubRepo,
		GithubSha:      body.GithubSha,
		ExternalID:     body.ExternalID,
		ExternalURL:    body.ExternalURL,
	}
	if body.Openapiv3AssetIds != nil {
		v.Openapiv3AssetIds = make([]string, len(body.Openapiv3AssetIds))
		for i, val := range body.Openapiv3AssetIds {
			v.Openapiv3AssetIds[i] = val
		}
	}
	v.GramSessionToken = gramSessionToken

	return v, nil
}

// BuildListDeploymentsPayload builds the payload for the deployments
// listDeployments endpoint from CLI flags.
func BuildListDeploymentsPayload(deploymentsListDeploymentsCursor string, deploymentsListDeploymentsLimit string, deploymentsListDeploymentsGramSessionToken string) (*deployments.ListDeploymentsPayload, error) {
	var err error
	var cursor *string
	{
		if deploymentsListDeploymentsCursor != "" {
			cursor = &deploymentsListDeploymentsCursor
		}
	}
	var limit int
	{
		if deploymentsListDeploymentsLimit != "" {
			var v int64
			v, err = strconv.ParseInt(deploymentsListDeploymentsLimit, 10, strconv.IntSize)
			limit = int(v)
			if err != nil {
				return nil, fmt.Errorf("invalid value for limit, must be INT")
			}
			if limit < 1 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("limit", limit, 1, true))
			}
			if limit > 100 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("limit", limit, 100, false))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var gramSessionToken *string
	{
		if deploymentsListDeploymentsGramSessionToken != "" {
			gramSessionToken = &deploymentsListDeploymentsGramSessionToken
		}
	}
	v := &deployments.ListDeploymentsPayload{}
	v.Cursor = cursor
	v.Limit = limit
	v.GramSessionToken = gramSessionToken

	return v, nil
}
