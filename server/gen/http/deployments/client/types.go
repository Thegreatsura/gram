// Code generated by goa v3.20.1, DO NOT EDIT.
//
// deployments HTTP client types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package client

import (
	"unicode/utf8"

	deployments "github.com/speakeasy-api/gram/gen/deployments"
	goa "goa.design/goa/v3/pkg"
)

// CreateDeploymentRequestBody is the type of the "deployments" service
// "createDeployment" endpoint HTTP request body.
type CreateDeploymentRequestBody struct {
	// The github repository in the form of "owner/repo".
	GithubRepo *string `form:"github_repo,omitempty" json:"github_repo,omitempty" xml:"github_repo,omitempty"`
	// The github pull request that resulted in the deployment.
	GithubPr *string `form:"github_pr,omitempty" json:"github_pr,omitempty" xml:"github_pr,omitempty"`
	// The commit hash that triggered the deployment.
	GithubSha *string `form:"github_sha,omitempty" json:"github_sha,omitempty" xml:"github_sha,omitempty"`
	// The external ID to refer to the deployment. This can be a git commit hash
	// for example.
	ExternalID *string `form:"external_id,omitempty" json:"external_id,omitempty" xml:"external_id,omitempty"`
	// The upstream URL a deployment can refer to. This can be a github url to a
	// commit hash or pull request.
	ExternalURL     *string                                       `form:"external_url,omitempty" json:"external_url,omitempty" xml:"external_url,omitempty"`
	Openapiv3Assets []*AddOpenAPIv3DeploymentAssetFormRequestBody `form:"openapiv3_assets,omitempty" json:"openapiv3_assets,omitempty" xml:"openapiv3_assets,omitempty"`
	Packages        []*AddDeploymentPackageFormRequestBody        `form:"packages,omitempty" json:"packages,omitempty" xml:"packages,omitempty"`
}

// EvolveRequestBody is the type of the "deployments" service "evolve" endpoint
// HTTP request body.
type EvolveRequestBody struct {
	// The ID of the deployment to evolve. If omitted, the latest deployment will
	// be used.
	DeploymentID *string `form:"deployment_id,omitempty" json:"deployment_id,omitempty" xml:"deployment_id,omitempty"`
	// The OpenAPI 3.x documents to add to the new deployment.
	AddOpenapiv3Assets []*AddOpenAPIv3DeploymentAssetFormRequestBody `form:"add_openapiv3_assets,omitempty" json:"add_openapiv3_assets,omitempty" xml:"add_openapiv3_assets,omitempty"`
	// The OpenAPI 3.x documents to add to the deployment.
	AddPackages []*AddPackageFormRequestBody `form:"add_packages,omitempty" json:"add_packages,omitempty" xml:"add_packages,omitempty"`
}

// GetDeploymentResponseBody is the type of the "deployments" service
// "getDeployment" endpoint HTTP response body.
type GetDeploymentResponseBody struct {
	// The ID to of the deployment.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The ID of the organization that the deployment belongs to.
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// The ID of the project that the deployment belongs to.
	ProjectID *string `form:"project_id,omitempty" json:"project_id,omitempty" xml:"project_id,omitempty"`
	// The ID of the user that created the deployment.
	UserID *string `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	// The creation date of the deployment.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The status of the deployment.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// A unique identifier that will mitigate against duplicate deployments.
	IdempotencyKey *string `form:"idempotency_key,omitempty" json:"idempotency_key,omitempty" xml:"idempotency_key,omitempty"`
	// The github repository in the form of "owner/repo".
	GithubRepo *string `form:"github_repo,omitempty" json:"github_repo,omitempty" xml:"github_repo,omitempty"`
	// The github pull request that resulted in the deployment.
	GithubPr *string `form:"github_pr,omitempty" json:"github_pr,omitempty" xml:"github_pr,omitempty"`
	// The commit hash that triggered the deployment.
	GithubSha *string `form:"github_sha,omitempty" json:"github_sha,omitempty" xml:"github_sha,omitempty"`
	// The external ID to refer to the deployment. This can be a git commit hash
	// for example.
	ExternalID *string `form:"external_id,omitempty" json:"external_id,omitempty" xml:"external_id,omitempty"`
	// The upstream URL a deployment can refer to. This can be a github url to a
	// commit hash or pull request.
	ExternalURL *string `form:"external_url,omitempty" json:"external_url,omitempty" xml:"external_url,omitempty"`
	// The IDs, as returned from the assets upload service, to uploaded OpenAPI 3.x
	// documents whose operations will become tool definitions.
	Openapiv3Assets []*OpenAPIv3DeploymentAssetResponseBody `form:"openapiv3_assets,omitempty" json:"openapiv3_assets,omitempty" xml:"openapiv3_assets,omitempty"`
	// The packages that were deployed.
	Packages []*DeploymentPackageResponseBody `form:"packages,omitempty" json:"packages,omitempty" xml:"packages,omitempty"`
}

// CreateDeploymentResponseBody is the type of the "deployments" service
// "createDeployment" endpoint HTTP response body.
type CreateDeploymentResponseBody struct {
	// A deployment that was successfully created.
	Deployment *DeploymentResponseBody `form:"deployment,omitempty" json:"deployment,omitempty" xml:"deployment,omitempty"`
}

// EvolveResponseBody is the type of the "deployments" service "evolve"
// endpoint HTTP response body.
type EvolveResponseBody struct {
	// A deployment that was successfully created.
	Deployment *DeploymentResponseBody `form:"deployment,omitempty" json:"deployment,omitempty" xml:"deployment,omitempty"`
}

// ListDeploymentsResponseBody is the type of the "deployments" service
// "listDeployments" endpoint HTTP response body.
type ListDeploymentsResponseBody struct {
	// The cursor to fetch results from
	NextCursor *string `form:"next_cursor,omitempty" json:"next_cursor,omitempty" xml:"next_cursor,omitempty"`
	// A list of deployments
	Items []*DeploymentSummaryResponseBody `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
}

// OpenAPIv3DeploymentAssetResponseBody is used to define fields on response
// body types.
type OpenAPIv3DeploymentAssetResponseBody struct {
	// The ID of the deployment asset.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The ID of the uploaded asset.
	AssetID *string `form:"asset_id,omitempty" json:"asset_id,omitempty" xml:"asset_id,omitempty"`
	// The name to give the document as it will be displayed in UIs.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The slug to give the document as it will be displayed in URLs.
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
}

// DeploymentPackageResponseBody is used to define fields on response body
// types.
type DeploymentPackageResponseBody struct {
	// The ID of the deployment package.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The name of the package.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The version of the package.
	Version *string `form:"version,omitempty" json:"version,omitempty" xml:"version,omitempty"`
}

// AddOpenAPIv3DeploymentAssetFormRequestBody is used to define fields on
// request body types.
type AddOpenAPIv3DeploymentAssetFormRequestBody struct {
	// The ID of the uploaded asset.
	AssetID string `form:"asset_id" json:"asset_id" xml:"asset_id"`
	// The name to give the document as it will be displayed in UIs.
	Name string `form:"name" json:"name" xml:"name"`
	// The slug to give the document as it will be displayed in URLs.
	Slug string `form:"slug" json:"slug" xml:"slug"`
}

// AddDeploymentPackageFormRequestBody is used to define fields on request body
// types.
type AddDeploymentPackageFormRequestBody struct {
	// The name of the package.
	Name string `form:"name" json:"name" xml:"name"`
	// The version of the package.
	Version *string `form:"version,omitempty" json:"version,omitempty" xml:"version,omitempty"`
}

// DeploymentResponseBody is used to define fields on response body types.
type DeploymentResponseBody struct {
	// The ID to of the deployment.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The ID of the organization that the deployment belongs to.
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// The ID of the project that the deployment belongs to.
	ProjectID *string `form:"project_id,omitempty" json:"project_id,omitempty" xml:"project_id,omitempty"`
	// The ID of the user that created the deployment.
	UserID *string `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	// The creation date of the deployment.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The status of the deployment.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// A unique identifier that will mitigate against duplicate deployments.
	IdempotencyKey *string `form:"idempotency_key,omitempty" json:"idempotency_key,omitempty" xml:"idempotency_key,omitempty"`
	// The github repository in the form of "owner/repo".
	GithubRepo *string `form:"github_repo,omitempty" json:"github_repo,omitempty" xml:"github_repo,omitempty"`
	// The github pull request that resulted in the deployment.
	GithubPr *string `form:"github_pr,omitempty" json:"github_pr,omitempty" xml:"github_pr,omitempty"`
	// The commit hash that triggered the deployment.
	GithubSha *string `form:"github_sha,omitempty" json:"github_sha,omitempty" xml:"github_sha,omitempty"`
	// The external ID to refer to the deployment. This can be a git commit hash
	// for example.
	ExternalID *string `form:"external_id,omitempty" json:"external_id,omitempty" xml:"external_id,omitempty"`
	// The upstream URL a deployment can refer to. This can be a github url to a
	// commit hash or pull request.
	ExternalURL *string `form:"external_url,omitempty" json:"external_url,omitempty" xml:"external_url,omitempty"`
	// The IDs, as returned from the assets upload service, to uploaded OpenAPI 3.x
	// documents whose operations will become tool definitions.
	Openapiv3Assets []*OpenAPIv3DeploymentAssetResponseBody `form:"openapiv3_assets,omitempty" json:"openapiv3_assets,omitempty" xml:"openapiv3_assets,omitempty"`
	// The packages that were deployed.
	Packages []*DeploymentPackageResponseBody `form:"packages,omitempty" json:"packages,omitempty" xml:"packages,omitempty"`
}

// AddPackageFormRequestBody is used to define fields on request body types.
type AddPackageFormRequestBody struct {
	// The name of the package to add.
	Name string `form:"name" json:"name" xml:"name"`
	// The version of the package to add. If omitted, the latest version will be
	// used.
	Version *string `form:"version,omitempty" json:"version,omitempty" xml:"version,omitempty"`
}

// DeploymentSummaryResponseBody is used to define fields on response body
// types.
type DeploymentSummaryResponseBody struct {
	// The ID to of the deployment.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The ID of the user that created the deployment.
	UserID *string `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	// The creation date of the deployment.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The number of upstream assets.
	AssetCount *int64 `form:"asset_count,omitempty" json:"asset_count,omitempty" xml:"asset_count,omitempty"`
}

// NewCreateDeploymentRequestBody builds the HTTP request body from the payload
// of the "createDeployment" endpoint of the "deployments" service.
func NewCreateDeploymentRequestBody(p *deployments.CreateDeploymentPayload) *CreateDeploymentRequestBody {
	body := &CreateDeploymentRequestBody{
		GithubRepo:  p.GithubRepo,
		GithubPr:    p.GithubPr,
		GithubSha:   p.GithubSha,
		ExternalID:  p.ExternalID,
		ExternalURL: p.ExternalURL,
	}
	if p.Openapiv3Assets != nil {
		body.Openapiv3Assets = make([]*AddOpenAPIv3DeploymentAssetFormRequestBody, len(p.Openapiv3Assets))
		for i, val := range p.Openapiv3Assets {
			body.Openapiv3Assets[i] = marshalDeploymentsAddOpenAPIv3DeploymentAssetFormToAddOpenAPIv3DeploymentAssetFormRequestBody(val)
		}
	}
	if p.Packages != nil {
		body.Packages = make([]*AddDeploymentPackageFormRequestBody, len(p.Packages))
		for i, val := range p.Packages {
			body.Packages[i] = marshalDeploymentsAddDeploymentPackageFormToAddDeploymentPackageFormRequestBody(val)
		}
	}
	return body
}

// NewEvolveRequestBody builds the HTTP request body from the payload of the
// "evolve" endpoint of the "deployments" service.
func NewEvolveRequestBody(p *deployments.EvolvePayload) *EvolveRequestBody {
	body := &EvolveRequestBody{
		DeploymentID: p.DeploymentID,
	}
	if p.AddOpenapiv3Assets != nil {
		body.AddOpenapiv3Assets = make([]*AddOpenAPIv3DeploymentAssetFormRequestBody, len(p.AddOpenapiv3Assets))
		for i, val := range p.AddOpenapiv3Assets {
			body.AddOpenapiv3Assets[i] = marshalDeploymentsAddOpenAPIv3DeploymentAssetFormToAddOpenAPIv3DeploymentAssetFormRequestBody(val)
		}
	}
	if p.AddPackages != nil {
		body.AddPackages = make([]*AddPackageFormRequestBody, len(p.AddPackages))
		for i, val := range p.AddPackages {
			body.AddPackages[i] = marshalDeploymentsAddPackageFormToAddPackageFormRequestBody(val)
		}
	}
	return body
}

// NewGetDeploymentResultOK builds a "deployments" service "getDeployment"
// endpoint result from a HTTP "OK" response.
func NewGetDeploymentResultOK(body *GetDeploymentResponseBody) *deployments.GetDeploymentResult {
	v := &deployments.GetDeploymentResult{
		ID:             *body.ID,
		OrganizationID: *body.OrganizationID,
		ProjectID:      *body.ProjectID,
		UserID:         *body.UserID,
		CreatedAt:      *body.CreatedAt,
		Status:         *body.Status,
		IdempotencyKey: body.IdempotencyKey,
		GithubRepo:     body.GithubRepo,
		GithubPr:       body.GithubPr,
		GithubSha:      body.GithubSha,
		ExternalID:     body.ExternalID,
		ExternalURL:    body.ExternalURL,
	}
	v.Openapiv3Assets = make([]*deployments.OpenAPIv3DeploymentAsset, len(body.Openapiv3Assets))
	for i, val := range body.Openapiv3Assets {
		v.Openapiv3Assets[i] = unmarshalOpenAPIv3DeploymentAssetResponseBodyToDeploymentsOpenAPIv3DeploymentAsset(val)
	}
	v.Packages = make([]*deployments.DeploymentPackage, len(body.Packages))
	for i, val := range body.Packages {
		v.Packages[i] = unmarshalDeploymentPackageResponseBodyToDeploymentsDeploymentPackage(val)
	}

	return v
}

// NewCreateDeploymentResultOK builds a "deployments" service
// "createDeployment" endpoint result from a HTTP "OK" response.
func NewCreateDeploymentResultOK(body *CreateDeploymentResponseBody) *deployments.CreateDeploymentResult {
	v := &deployments.CreateDeploymentResult{}
	if body.Deployment != nil {
		v.Deployment = unmarshalDeploymentResponseBodyToDeploymentsDeployment(body.Deployment)
	}

	return v
}

// NewEvolveResultOK builds a "deployments" service "evolve" endpoint result
// from a HTTP "OK" response.
func NewEvolveResultOK(body *EvolveResponseBody) *deployments.EvolveResult {
	v := &deployments.EvolveResult{}
	if body.Deployment != nil {
		v.Deployment = unmarshalDeploymentResponseBodyToDeploymentsDeployment(body.Deployment)
	}

	return v
}

// NewListDeploymentsListDeploymentResultOK builds a "deployments" service
// "listDeployments" endpoint result from a HTTP "OK" response.
func NewListDeploymentsListDeploymentResultOK(body *ListDeploymentsResponseBody) *deployments.ListDeploymentResult {
	v := &deployments.ListDeploymentResult{
		NextCursor: body.NextCursor,
	}
	v.Items = make([]*deployments.DeploymentSummary, len(body.Items))
	for i, val := range body.Items {
		v.Items[i] = unmarshalDeploymentSummaryResponseBodyToDeploymentsDeploymentSummary(val)
	}

	return v
}

// ValidateGetDeploymentResponseBody runs the validations defined on
// GetDeploymentResponseBody
func ValidateGetDeploymentResponseBody(body *GetDeploymentResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.OrganizationID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("organization_id", "body"))
	}
	if body.ProjectID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("project_id", "body"))
	}
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_id", "body"))
	}
	if body.Openapiv3Assets == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("openapiv3_assets", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.Packages == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("packages", "body"))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	for _, e := range body.Openapiv3Assets {
		if e != nil {
			if err2 := ValidateOpenAPIv3DeploymentAssetResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range body.Packages {
		if e != nil {
			if err2 := ValidateDeploymentPackageResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateCreateDeploymentResponseBody runs the validations defined on
// CreateDeploymentResponseBody
func ValidateCreateDeploymentResponseBody(body *CreateDeploymentResponseBody) (err error) {
	if body.Deployment != nil {
		if err2 := ValidateDeploymentResponseBody(body.Deployment); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateEvolveResponseBody runs the validations defined on EvolveResponseBody
func ValidateEvolveResponseBody(body *EvolveResponseBody) (err error) {
	if body.Deployment != nil {
		if err2 := ValidateDeploymentResponseBody(body.Deployment); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateListDeploymentsResponseBody runs the validations defined on
// ListDeploymentsResponseBody
func ValidateListDeploymentsResponseBody(body *ListDeploymentsResponseBody) (err error) {
	if body.Items == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("items", "body"))
	}
	for _, e := range body.Items {
		if e != nil {
			if err2 := ValidateDeploymentSummaryResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateOpenAPIv3DeploymentAssetResponseBody runs the validations defined on
// OpenAPIv3DeploymentAssetResponseBody
func ValidateOpenAPIv3DeploymentAssetResponseBody(body *OpenAPIv3DeploymentAssetResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.AssetID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("asset_id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slug", "body"))
	}
	if body.Slug != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.slug", *body.Slug, "^[a-z]+(?:[a-z0-9_-]*[a-z0-9])?$"))
	}
	if body.Slug != nil {
		if utf8.RuneCountInString(*body.Slug) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.slug", *body.Slug, utf8.RuneCountInString(*body.Slug), 40, false))
		}
	}
	return
}

// ValidateDeploymentPackageResponseBody runs the validations defined on
// DeploymentPackageResponseBody
func ValidateDeploymentPackageResponseBody(body *DeploymentPackageResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Version == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("version", "body"))
	}
	return
}

// ValidateAddOpenAPIv3DeploymentAssetFormRequestBody runs the validations
// defined on AddOpenAPIv3DeploymentAssetFormRequestBody
func ValidateAddOpenAPIv3DeploymentAssetFormRequestBody(body *AddOpenAPIv3DeploymentAssetFormRequestBody) (err error) {
	err = goa.MergeErrors(err, goa.ValidatePattern("body.slug", body.Slug, "^[a-z]+(?:[a-z0-9_-]*[a-z0-9])?$"))
	if utf8.RuneCountInString(body.Slug) > 40 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.slug", body.Slug, utf8.RuneCountInString(body.Slug), 40, false))
	}
	return
}

// ValidateDeploymentResponseBody runs the validations defined on
// DeploymentResponseBody
func ValidateDeploymentResponseBody(body *DeploymentResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.OrganizationID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("organization_id", "body"))
	}
	if body.ProjectID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("project_id", "body"))
	}
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_id", "body"))
	}
	if body.Openapiv3Assets == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("openapiv3_assets", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.Packages == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("packages", "body"))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	for _, e := range body.Openapiv3Assets {
		if e != nil {
			if err2 := ValidateOpenAPIv3DeploymentAssetResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range body.Packages {
		if e != nil {
			if err2 := ValidateDeploymentPackageResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateDeploymentSummaryResponseBody runs the validations defined on
// DeploymentSummaryResponseBody
func ValidateDeploymentSummaryResponseBody(body *DeploymentSummaryResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_id", "body"))
	}
	if body.AssetCount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("asset_count", "body"))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	return
}
