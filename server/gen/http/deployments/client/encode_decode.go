// Code generated by goa v3.20.0, DO NOT EDIT.
//
// deployments HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package client

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"

	deployments "github.com/speakeasy-api/gram/gen/deployments"
	goahttp "goa.design/goa/v3/http"
)

// BuildGetDeploymentRequest instantiates a HTTP request object with method and
// path set to call the "deployments" service "getDeployment" endpoint
func (c *Client) BuildGetDeploymentRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetDeploymentDeploymentsPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("deployments", "getDeployment", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetDeploymentRequest returns an encoder for requests sent to the
// deployments getDeployment server.
func EncodeGetDeploymentRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*deployments.GetDeploymentPayload)
		if !ok {
			return goahttp.ErrInvalidType("deployments", "getDeployment", "*deployments.GetDeploymentPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		values := req.URL.Query()
		values.Add("id", p.ID)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetDeploymentResponse returns a decoder for responses returned by the
// deployments getDeployment endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeGetDeploymentResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetDeploymentResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "getDeployment", err)
			}
			err = ValidateGetDeploymentResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "getDeployment", err)
			}
			res := NewGetDeploymentResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("deployments", "getDeployment", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateDeploymentRequest instantiates a HTTP request object with method
// and path set to call the "deployments" service "createDeployment" endpoint
func (c *Client) BuildCreateDeploymentRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateDeploymentDeploymentsPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("deployments", "createDeployment", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateDeploymentRequest returns an encoder for requests sent to the
// deployments createDeployment server.
func EncodeCreateDeploymentRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*deployments.CreateDeploymentPayload)
		if !ok {
			return goahttp.ErrInvalidType("deployments", "createDeployment", "*deployments.CreateDeploymentPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		body := NewCreateDeploymentRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("deployments", "createDeployment", err)
		}
		return nil
	}
}

// DecodeCreateDeploymentResponse returns a decoder for responses returned by
// the deployments createDeployment endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeCreateDeploymentResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CreateDeploymentResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "createDeployment", err)
			}
			err = ValidateCreateDeploymentResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "createDeployment", err)
			}
			res := NewCreateDeploymentResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("deployments", "createDeployment", resp.StatusCode, string(body))
		}
	}
}

// BuildListDeploymentsRequest instantiates a HTTP request object with method
// and path set to call the "deployments" service "listDeployments" endpoint
func (c *Client) BuildListDeploymentsRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListDeploymentsDeploymentsPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("deployments", "listDeployments", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListDeploymentsRequest returns an encoder for requests sent to the
// deployments listDeployments server.
func EncodeListDeploymentsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*deployments.ListDeploymentsPayload)
		if !ok {
			return goahttp.ErrInvalidType("deployments", "listDeployments", "*deployments.ListDeploymentsPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		values := req.URL.Query()
		if p.Cursor != nil {
			values.Add("cursor", *p.Cursor)
		}
		values.Add("limit", fmt.Sprintf("%v", p.Limit))
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeListDeploymentsResponse returns a decoder for responses returned by
// the deployments listDeployments endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeListDeploymentsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListDeploymentsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "listDeployments", err)
			}
			err = ValidateListDeploymentsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "listDeployments", err)
			}
			res := NewListDeploymentsListDeploymentResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("deployments", "listDeployments", resp.StatusCode, string(body))
		}
	}
}

// unmarshalDeploymentResponseBodyToDeploymentsDeployment builds a value of
// type *deployments.Deployment from a value of type *DeploymentResponseBody.
func unmarshalDeploymentResponseBodyToDeploymentsDeployment(v *DeploymentResponseBody) *deployments.Deployment {
	if v == nil {
		return nil
	}
	res := &deployments.Deployment{
		ID:             *v.ID,
		OrganizationID: *v.OrganizationID,
		ProjectID:      *v.ProjectID,
		UserID:         *v.UserID,
		CreatedAt:      *v.CreatedAt,
		IdempotencyKey: v.IdempotencyKey,
		GithubRepo:     v.GithubRepo,
		GithubSha:      v.GithubSha,
		ExternalID:     v.ExternalID,
		ExternalURL:    v.ExternalURL,
	}
	res.Openapiv3AssetIds = make([]string, len(v.Openapiv3AssetIds))
	for i, val := range v.Openapiv3AssetIds {
		res.Openapiv3AssetIds[i] = val
	}

	return res
}
