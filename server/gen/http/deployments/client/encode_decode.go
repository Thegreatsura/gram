// Code generated by goa v3.20.1, DO NOT EDIT.
//
// deployments HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	deployments "github.com/speakeasy-api/gram/gen/deployments"
	goahttp "goa.design/goa/v3/http"
)

// BuildGetDeploymentRequest instantiates a HTTP request object with method and
// path set to call the "deployments" service "getDeployment" endpoint
func (c *Client) BuildGetDeploymentRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetDeploymentDeploymentsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("deployments", "getDeployment", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetDeploymentRequest returns an encoder for requests sent to the
// deployments getDeployment server.
func EncodeGetDeploymentRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*deployments.GetDeploymentPayload)
		if !ok {
			return goahttp.ErrInvalidType("deployments", "getDeployment", "*deployments.GetDeploymentPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		values := req.URL.Query()
		values.Add("id", p.ID)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetDeploymentResponse returns a decoder for responses returned by the
// deployments getDeployment endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeGetDeploymentResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetDeploymentResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "getDeployment", err)
			}
			err = ValidateGetDeploymentResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "getDeployment", err)
			}
			res := NewGetDeploymentResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("deployments", "getDeployment", resp.StatusCode, string(body))
		}
	}
}

// BuildGetLatestDeploymentRequest instantiates a HTTP request object with
// method and path set to call the "deployments" service "getLatestDeployment"
// endpoint
func (c *Client) BuildGetLatestDeploymentRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetLatestDeploymentDeploymentsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("deployments", "getLatestDeployment", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetLatestDeploymentRequest returns an encoder for requests sent to the
// deployments getLatestDeployment server.
func EncodeGetLatestDeploymentRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*deployments.GetLatestDeploymentPayload)
		if !ok {
			return goahttp.ErrInvalidType("deployments", "getLatestDeployment", "*deployments.GetLatestDeploymentPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		return nil
	}
}

// DecodeGetLatestDeploymentResponse returns a decoder for responses returned
// by the deployments getLatestDeployment endpoint. restoreBody controls
// whether the response body should be restored after having been read.
func DecodeGetLatestDeploymentResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetLatestDeploymentResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "getLatestDeployment", err)
			}
			err = ValidateGetLatestDeploymentResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "getLatestDeployment", err)
			}
			res := NewGetLatestDeploymentResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("deployments", "getLatestDeployment", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateDeploymentRequest instantiates a HTTP request object with method
// and path set to call the "deployments" service "createDeployment" endpoint
func (c *Client) BuildCreateDeploymentRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateDeploymentDeploymentsPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("deployments", "createDeployment", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateDeploymentRequest returns an encoder for requests sent to the
// deployments createDeployment server.
func EncodeCreateDeploymentRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*deployments.CreateDeploymentPayload)
		if !ok {
			return goahttp.ErrInvalidType("deployments", "createDeployment", "*deployments.CreateDeploymentPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		{
			head := p.IdempotencyKey
			req.Header.Set("Idempotency-Key", head)
		}
		body := NewCreateDeploymentRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("deployments", "createDeployment", err)
		}
		return nil
	}
}

// DecodeCreateDeploymentResponse returns a decoder for responses returned by
// the deployments createDeployment endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeCreateDeploymentResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CreateDeploymentResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "createDeployment", err)
			}
			err = ValidateCreateDeploymentResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "createDeployment", err)
			}
			res := NewCreateDeploymentResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("deployments", "createDeployment", resp.StatusCode, string(body))
		}
	}
}

// BuildEvolveRequest instantiates a HTTP request object with method and path
// set to call the "deployments" service "evolve" endpoint
func (c *Client) BuildEvolveRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: EvolveDeploymentsPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("deployments", "evolve", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeEvolveRequest returns an encoder for requests sent to the deployments
// evolve server.
func EncodeEvolveRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*deployments.EvolvePayload)
		if !ok {
			return goahttp.ErrInvalidType("deployments", "evolve", "*deployments.EvolvePayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		body := NewEvolveRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("deployments", "evolve", err)
		}
		return nil
	}
}

// DecodeEvolveResponse returns a decoder for responses returned by the
// deployments evolve endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeEvolveResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body EvolveResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "evolve", err)
			}
			err = ValidateEvolveResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "evolve", err)
			}
			res := NewEvolveResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("deployments", "evolve", resp.StatusCode, string(body))
		}
	}
}

// BuildListDeploymentsRequest instantiates a HTTP request object with method
// and path set to call the "deployments" service "listDeployments" endpoint
func (c *Client) BuildListDeploymentsRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListDeploymentsDeploymentsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("deployments", "listDeployments", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListDeploymentsRequest returns an encoder for requests sent to the
// deployments listDeployments server.
func EncodeListDeploymentsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*deployments.ListDeploymentsPayload)
		if !ok {
			return goahttp.ErrInvalidType("deployments", "listDeployments", "*deployments.ListDeploymentsPayload", v)
		}
		if p.SessionToken != nil {
			head := *p.SessionToken
			req.Header.Set("Gram-Session", head)
		}
		if p.ProjectSlugInput != nil {
			head := *p.ProjectSlugInput
			req.Header.Set("Gram-Project", head)
		}
		values := req.URL.Query()
		if p.Cursor != nil {
			values.Add("cursor", *p.Cursor)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeListDeploymentsResponse returns a decoder for responses returned by
// the deployments listDeployments endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeListDeploymentsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListDeploymentsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("deployments", "listDeployments", err)
			}
			err = ValidateListDeploymentsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("deployments", "listDeployments", err)
			}
			res := NewListDeploymentsListDeploymentResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("deployments", "listDeployments", resp.StatusCode, string(body))
		}
	}
}

// unmarshalOpenAPIv3DeploymentAssetResponseBodyToDeploymentsOpenAPIv3DeploymentAsset
// builds a value of type *deployments.OpenAPIv3DeploymentAsset from a value of
// type *OpenAPIv3DeploymentAssetResponseBody.
func unmarshalOpenAPIv3DeploymentAssetResponseBodyToDeploymentsOpenAPIv3DeploymentAsset(v *OpenAPIv3DeploymentAssetResponseBody) *deployments.OpenAPIv3DeploymentAsset {
	res := &deployments.OpenAPIv3DeploymentAsset{
		ID:      *v.ID,
		AssetID: *v.AssetID,
		Name:    *v.Name,
		Slug:    deployments.Slug(*v.Slug),
	}

	return res
}

// unmarshalDeploymentPackageResponseBodyToDeploymentsDeploymentPackage builds
// a value of type *deployments.DeploymentPackage from a value of type
// *DeploymentPackageResponseBody.
func unmarshalDeploymentPackageResponseBodyToDeploymentsDeploymentPackage(v *DeploymentPackageResponseBody) *deployments.DeploymentPackage {
	res := &deployments.DeploymentPackage{
		ID:      *v.ID,
		Name:    *v.Name,
		Version: *v.Version,
	}

	return res
}

// unmarshalDeploymentResponseBodyToDeploymentsDeployment builds a value of
// type *deployments.Deployment from a value of type *DeploymentResponseBody.
func unmarshalDeploymentResponseBodyToDeploymentsDeployment(v *DeploymentResponseBody) *deployments.Deployment {
	if v == nil {
		return nil
	}
	res := &deployments.Deployment{
		ID:             *v.ID,
		OrganizationID: *v.OrganizationID,
		ProjectID:      *v.ProjectID,
		UserID:         *v.UserID,
		CreatedAt:      *v.CreatedAt,
		Status:         *v.Status,
		IdempotencyKey: v.IdempotencyKey,
		GithubRepo:     v.GithubRepo,
		GithubPr:       v.GithubPr,
		GithubSha:      v.GithubSha,
		ExternalID:     v.ExternalID,
		ExternalURL:    v.ExternalURL,
	}
	res.Openapiv3Assets = make([]*deployments.OpenAPIv3DeploymentAsset, len(v.Openapiv3Assets))
	for i, val := range v.Openapiv3Assets {
		res.Openapiv3Assets[i] = unmarshalOpenAPIv3DeploymentAssetResponseBodyToDeploymentsOpenAPIv3DeploymentAsset(val)
	}
	res.Packages = make([]*deployments.DeploymentPackage, len(v.Packages))
	for i, val := range v.Packages {
		res.Packages[i] = unmarshalDeploymentPackageResponseBodyToDeploymentsDeploymentPackage(val)
	}

	return res
}

// marshalDeploymentsAddOpenAPIv3DeploymentAssetFormToAddOpenAPIv3DeploymentAssetFormRequestBody
// builds a value of type *AddOpenAPIv3DeploymentAssetFormRequestBody from a
// value of type *deployments.AddOpenAPIv3DeploymentAssetForm.
func marshalDeploymentsAddOpenAPIv3DeploymentAssetFormToAddOpenAPIv3DeploymentAssetFormRequestBody(v *deployments.AddOpenAPIv3DeploymentAssetForm) *AddOpenAPIv3DeploymentAssetFormRequestBody {
	if v == nil {
		return nil
	}
	res := &AddOpenAPIv3DeploymentAssetFormRequestBody{
		AssetID: v.AssetID,
		Name:    v.Name,
		Slug:    string(v.Slug),
	}

	return res
}

// marshalDeploymentsAddDeploymentPackageFormToAddDeploymentPackageFormRequestBody
// builds a value of type *AddDeploymentPackageFormRequestBody from a value of
// type *deployments.AddDeploymentPackageForm.
func marshalDeploymentsAddDeploymentPackageFormToAddDeploymentPackageFormRequestBody(v *deployments.AddDeploymentPackageForm) *AddDeploymentPackageFormRequestBody {
	if v == nil {
		return nil
	}
	res := &AddDeploymentPackageFormRequestBody{
		Name:    v.Name,
		Version: v.Version,
	}

	return res
}

// marshalAddOpenAPIv3DeploymentAssetFormRequestBodyToDeploymentsAddOpenAPIv3DeploymentAssetForm
// builds a value of type *deployments.AddOpenAPIv3DeploymentAssetForm from a
// value of type *AddOpenAPIv3DeploymentAssetFormRequestBody.
func marshalAddOpenAPIv3DeploymentAssetFormRequestBodyToDeploymentsAddOpenAPIv3DeploymentAssetForm(v *AddOpenAPIv3DeploymentAssetFormRequestBody) *deployments.AddOpenAPIv3DeploymentAssetForm {
	if v == nil {
		return nil
	}
	res := &deployments.AddOpenAPIv3DeploymentAssetForm{
		AssetID: v.AssetID,
		Name:    v.Name,
		Slug:    deployments.Slug(v.Slug),
	}

	return res
}

// marshalAddDeploymentPackageFormRequestBodyToDeploymentsAddDeploymentPackageForm
// builds a value of type *deployments.AddDeploymentPackageForm from a value of
// type *AddDeploymentPackageFormRequestBody.
func marshalAddDeploymentPackageFormRequestBodyToDeploymentsAddDeploymentPackageForm(v *AddDeploymentPackageFormRequestBody) *deployments.AddDeploymentPackageForm {
	if v == nil {
		return nil
	}
	res := &deployments.AddDeploymentPackageForm{
		Name:    v.Name,
		Version: v.Version,
	}

	return res
}

// marshalDeploymentsAddPackageFormToAddPackageFormRequestBody builds a value
// of type *AddPackageFormRequestBody from a value of type
// *deployments.AddPackageForm.
func marshalDeploymentsAddPackageFormToAddPackageFormRequestBody(v *deployments.AddPackageForm) *AddPackageFormRequestBody {
	if v == nil {
		return nil
	}
	res := &AddPackageFormRequestBody{
		Name:    v.Name,
		Version: v.Version,
	}

	return res
}

// marshalAddPackageFormRequestBodyToDeploymentsAddPackageForm builds a value
// of type *deployments.AddPackageForm from a value of type
// *AddPackageFormRequestBody.
func marshalAddPackageFormRequestBodyToDeploymentsAddPackageForm(v *AddPackageFormRequestBody) *deployments.AddPackageForm {
	if v == nil {
		return nil
	}
	res := &deployments.AddPackageForm{
		Name:    v.Name,
		Version: v.Version,
	}

	return res
}

// unmarshalDeploymentSummaryResponseBodyToDeploymentsDeploymentSummary builds
// a value of type *deployments.DeploymentSummary from a value of type
// *DeploymentSummaryResponseBody.
func unmarshalDeploymentSummaryResponseBodyToDeploymentsDeploymentSummary(v *DeploymentSummaryResponseBody) *deployments.DeploymentSummary {
	res := &deployments.DeploymentSummary{
		ID:         *v.ID,
		UserID:     *v.UserID,
		CreatedAt:  *v.CreatedAt,
		AssetCount: *v.AssetCount,
	}

	return res
}
