// Code generated by goa v3.20.0, DO NOT EDIT.
//
// deployments HTTP server types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package server

import (
	deployments "github.com/speakeasy-api/gram/gen/deployments"
	goa "goa.design/goa/v3/pkg"
)

// CreateDeploymentRequestBody is the type of the "deployments" service
// "createDeployment" endpoint HTTP request body.
type CreateDeploymentRequestBody struct {
	// The github repository in the form of "owner/repo".
	GithubRepo *string `form:"github_repo,omitempty" json:"github_repo,omitempty" xml:"github_repo,omitempty"`
	// The github pull request that resulted in the deployment.
	GithubPr *string `form:"github_pr,omitempty" json:"github_pr,omitempty" xml:"github_pr,omitempty"`
	// The commit hash that triggered the deployment.
	GithubSha *string `form:"github_sha,omitempty" json:"github_sha,omitempty" xml:"github_sha,omitempty"`
	// The external ID to refer to the deployment. This can be a git commit hash
	// for example.
	ExternalID *string `form:"external_id,omitempty" json:"external_id,omitempty" xml:"external_id,omitempty"`
	// The upstream URL a deployment can refer to. This can be a github url to a
	// commit hash or pull request.
	ExternalURL     *string                                    `form:"external_url,omitempty" json:"external_url,omitempty" xml:"external_url,omitempty"`
	Openapiv3Assets []*OpenAPIv3DeploymentAssetFormRequestBody `form:"openapiv3_assets,omitempty" json:"openapiv3_assets,omitempty" xml:"openapiv3_assets,omitempty"`
}

// GetDeploymentResponseBody is the type of the "deployments" service
// "getDeployment" endpoint HTTP response body.
type GetDeploymentResponseBody struct {
	// The ID to of the deployment.
	ID string `form:"id" json:"id" xml:"id"`
	// The ID of the organization that the deployment belongs to.
	OrganizationID string `form:"organization_id" json:"organization_id" xml:"organization_id"`
	// The ID of the project that the deployment belongs to.
	ProjectID string `form:"project_id" json:"project_id" xml:"project_id"`
	// The ID of the user that created the deployment.
	UserID string `form:"user_id" json:"user_id" xml:"user_id"`
	// The creation date of the deployment.
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// A unique identifier that will mitigate against duplicate deployments.
	IdempotencyKey *string `form:"idempotency_key,omitempty" json:"idempotency_key,omitempty" xml:"idempotency_key,omitempty"`
	// The github repository in the form of "owner/repo".
	GithubRepo *string `form:"github_repo,omitempty" json:"github_repo,omitempty" xml:"github_repo,omitempty"`
	// The github pull request that resulted in the deployment.
	GithubPr *string `form:"github_pr,omitempty" json:"github_pr,omitempty" xml:"github_pr,omitempty"`
	// The commit hash that triggered the deployment.
	GithubSha *string `form:"github_sha,omitempty" json:"github_sha,omitempty" xml:"github_sha,omitempty"`
	// The external ID to refer to the deployment. This can be a git commit hash
	// for example.
	ExternalID *string `form:"external_id,omitempty" json:"external_id,omitempty" xml:"external_id,omitempty"`
	// The upstream URL a deployment can refer to. This can be a github url to a
	// commit hash or pull request.
	ExternalURL *string `form:"external_url,omitempty" json:"external_url,omitempty" xml:"external_url,omitempty"`
	// The IDs, as returned from the assets upload service, to uploaded OpenAPI 3.x
	// documents whose operations will become tool definitions.
	Openapiv3Assets []*OpenAPIv3DeploymentAssetResponseBody `form:"openapiv3_assets" json:"openapiv3_assets" xml:"openapiv3_assets"`
}

// CreateDeploymentResponseBody is the type of the "deployments" service
// "createDeployment" endpoint HTTP response body.
type CreateDeploymentResponseBody struct {
	// A deployment that was successfully created.
	Deployment *DeploymentResponseBody `form:"deployment,omitempty" json:"deployment,omitempty" xml:"deployment,omitempty"`
}

// ListDeploymentsResponseBody is the type of the "deployments" service
// "listDeployments" endpoint HTTP response body.
type ListDeploymentsResponseBody struct {
	// The cursor to fetch results from
	NextCursor *string `form:"next_cursor,omitempty" json:"next_cursor,omitempty" xml:"next_cursor,omitempty"`
	// A list of deployments
	Items []*DeploymentSummaryResponseBody `form:"items" json:"items" xml:"items"`
}

// OpenAPIv3DeploymentAssetResponseBody is used to define fields on response
// body types.
type OpenAPIv3DeploymentAssetResponseBody struct {
	// The ID of the deployment asset.
	ID string `form:"id" json:"id" xml:"id"`
	// The ID of the uploaded asset.
	AssetID string `form:"asset_id" json:"asset_id" xml:"asset_id"`
	// The name to give the document as it will be displayed in UIs.
	Name string `form:"name" json:"name" xml:"name"`
	// The slug to give the document as it will be displayed in URLs.
	Slug string `form:"slug" json:"slug" xml:"slug"`
}

// DeploymentResponseBody is used to define fields on response body types.
type DeploymentResponseBody struct {
	// The ID to of the deployment.
	ID string `form:"id" json:"id" xml:"id"`
	// The ID of the organization that the deployment belongs to.
	OrganizationID string `form:"organization_id" json:"organization_id" xml:"organization_id"`
	// The ID of the project that the deployment belongs to.
	ProjectID string `form:"project_id" json:"project_id" xml:"project_id"`
	// The ID of the user that created the deployment.
	UserID string `form:"user_id" json:"user_id" xml:"user_id"`
	// The creation date of the deployment.
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// A unique identifier that will mitigate against duplicate deployments.
	IdempotencyKey *string `form:"idempotency_key,omitempty" json:"idempotency_key,omitempty" xml:"idempotency_key,omitempty"`
	// The github repository in the form of "owner/repo".
	GithubRepo *string `form:"github_repo,omitempty" json:"github_repo,omitempty" xml:"github_repo,omitempty"`
	// The github pull request that resulted in the deployment.
	GithubPr *string `form:"github_pr,omitempty" json:"github_pr,omitempty" xml:"github_pr,omitempty"`
	// The commit hash that triggered the deployment.
	GithubSha *string `form:"github_sha,omitempty" json:"github_sha,omitempty" xml:"github_sha,omitempty"`
	// The external ID to refer to the deployment. This can be a git commit hash
	// for example.
	ExternalID *string `form:"external_id,omitempty" json:"external_id,omitempty" xml:"external_id,omitempty"`
	// The upstream URL a deployment can refer to. This can be a github url to a
	// commit hash or pull request.
	ExternalURL *string `form:"external_url,omitempty" json:"external_url,omitempty" xml:"external_url,omitempty"`
	// The IDs, as returned from the assets upload service, to uploaded OpenAPI 3.x
	// documents whose operations will become tool definitions.
	Openapiv3Assets []*OpenAPIv3DeploymentAssetResponseBody `form:"openapiv3_assets" json:"openapiv3_assets" xml:"openapiv3_assets"`
}

// DeploymentSummaryResponseBody is used to define fields on response body
// types.
type DeploymentSummaryResponseBody struct {
	// The ID to of the deployment.
	ID string `form:"id" json:"id" xml:"id"`
	// The ID of the user that created the deployment.
	UserID string `form:"user_id" json:"user_id" xml:"user_id"`
	// The creation date of the deployment.
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// The number of upstream assets.
	AssetCount int64 `form:"asset_count" json:"asset_count" xml:"asset_count"`
}

// OpenAPIv3DeploymentAssetFormRequestBody is used to define fields on request
// body types.
type OpenAPIv3DeploymentAssetFormRequestBody struct {
	// The ID of the uploaded asset.
	AssetID *string `form:"asset_id,omitempty" json:"asset_id,omitempty" xml:"asset_id,omitempty"`
	// The name to give the document as it will be displayed in UIs.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The slug to give the document as it will be displayed in URLs.
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
}

// NewGetDeploymentResponseBody builds the HTTP response body from the result
// of the "getDeployment" endpoint of the "deployments" service.
func NewGetDeploymentResponseBody(res *deployments.GetDeploymentResult) *GetDeploymentResponseBody {
	body := &GetDeploymentResponseBody{
		ID:             res.ID,
		OrganizationID: res.OrganizationID,
		ProjectID:      res.ProjectID,
		UserID:         res.UserID,
		CreatedAt:      res.CreatedAt,
		IdempotencyKey: res.IdempotencyKey,
		GithubRepo:     res.GithubRepo,
		GithubPr:       res.GithubPr,
		GithubSha:      res.GithubSha,
		ExternalID:     res.ExternalID,
		ExternalURL:    res.ExternalURL,
	}
	if res.Openapiv3Assets != nil {
		body.Openapiv3Assets = make([]*OpenAPIv3DeploymentAssetResponseBody, len(res.Openapiv3Assets))
		for i, val := range res.Openapiv3Assets {
			body.Openapiv3Assets[i] = marshalDeploymentsOpenAPIv3DeploymentAssetToOpenAPIv3DeploymentAssetResponseBody(val)
		}
	} else {
		body.Openapiv3Assets = []*OpenAPIv3DeploymentAssetResponseBody{}
	}
	return body
}

// NewCreateDeploymentResponseBody builds the HTTP response body from the
// result of the "createDeployment" endpoint of the "deployments" service.
func NewCreateDeploymentResponseBody(res *deployments.CreateDeploymentResult) *CreateDeploymentResponseBody {
	body := &CreateDeploymentResponseBody{}
	if res.Deployment != nil {
		body.Deployment = marshalDeploymentsDeploymentToDeploymentResponseBody(res.Deployment)
	}
	return body
}

// NewListDeploymentsResponseBody builds the HTTP response body from the result
// of the "listDeployments" endpoint of the "deployments" service.
func NewListDeploymentsResponseBody(res *deployments.ListDeploymentResult) *ListDeploymentsResponseBody {
	body := &ListDeploymentsResponseBody{
		NextCursor: res.NextCursor,
	}
	if res.Items != nil {
		body.Items = make([]*DeploymentSummaryResponseBody, len(res.Items))
		for i, val := range res.Items {
			body.Items[i] = marshalDeploymentsDeploymentSummaryToDeploymentSummaryResponseBody(val)
		}
	} else {
		body.Items = []*DeploymentSummaryResponseBody{}
	}
	return body
}

// NewGetDeploymentPayload builds a deployments service getDeployment endpoint
// payload.
func NewGetDeploymentPayload(id string, sessionToken *string, projectSlug string) *deployments.GetDeploymentPayload {
	v := &deployments.GetDeploymentPayload{}
	v.ID = id
	v.SessionToken = sessionToken
	v.ProjectSlug = projectSlug

	return v
}

// NewCreateDeploymentPayload builds a deployments service createDeployment
// endpoint payload.
func NewCreateDeploymentPayload(body *CreateDeploymentRequestBody, sessionToken *string, projectSlug string, idempotencyKey string) *deployments.CreateDeploymentPayload {
	v := &deployments.CreateDeploymentPayload{
		GithubRepo:  body.GithubRepo,
		GithubPr:    body.GithubPr,
		GithubSha:   body.GithubSha,
		ExternalID:  body.ExternalID,
		ExternalURL: body.ExternalURL,
	}
	if body.Openapiv3Assets != nil {
		v.Openapiv3Assets = make([]*deployments.OpenAPIv3DeploymentAssetForm, len(body.Openapiv3Assets))
		for i, val := range body.Openapiv3Assets {
			v.Openapiv3Assets[i] = unmarshalOpenAPIv3DeploymentAssetFormRequestBodyToDeploymentsOpenAPIv3DeploymentAssetForm(val)
		}
	}
	v.SessionToken = sessionToken
	v.ProjectSlug = projectSlug
	v.IdempotencyKey = idempotencyKey

	return v
}

// NewListDeploymentsPayload builds a deployments service listDeployments
// endpoint payload.
func NewListDeploymentsPayload(cursor *string, sessionToken *string, projectSlug string) *deployments.ListDeploymentsPayload {
	v := &deployments.ListDeploymentsPayload{}
	v.Cursor = cursor
	v.SessionToken = sessionToken
	v.ProjectSlug = projectSlug

	return v
}

// ValidateCreateDeploymentRequestBody runs the validations defined on
// CreateDeploymentRequestBody
func ValidateCreateDeploymentRequestBody(body *CreateDeploymentRequestBody) (err error) {
	for _, e := range body.Openapiv3Assets {
		if e != nil {
			if err2 := ValidateOpenAPIv3DeploymentAssetFormRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateOpenAPIv3DeploymentAssetFormRequestBody runs the validations defined
// on OpenAPIv3DeploymentAssetFormRequestBody
func ValidateOpenAPIv3DeploymentAssetFormRequestBody(body *OpenAPIv3DeploymentAssetFormRequestBody) (err error) {
	if body.AssetID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("asset_id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slug", "body"))
	}
	return
}
