// Code generated by goa v3.20.0, DO NOT EDIT.
//
// deployments HTTP server types
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package server

import (
	"unicode/utf8"

	deployments "github.com/speakeasy-api/gram/gen/deployments"
	goa "goa.design/goa/v3/pkg"
)

// CreateDeploymentRequestBody is the type of the "deployments" service
// "createDeployment" endpoint HTTP request body.
type CreateDeploymentRequestBody struct {
	// The external ID to refer to the deployment. This can be a git commit hash
	// for example.
	ExternalID *string `form:"external_id,omitempty" json:"external_id,omitempty" xml:"external_id,omitempty"`
	// The upstream URL a deployment can refer to. This can be a github url to a
	// commit hash or pull request.
	ExternalURL *string `form:"external_url,omitempty" json:"external_url,omitempty" xml:"external_url,omitempty"`
	// The HTTP tools available in the deployment.
	Openapi3p1Tools []*OpenAPI3P1ToolFormRequestBody `form:"openapi_3p1_tools,omitempty" json:"openapi_3p1_tools,omitempty" xml:"openapi_3p1_tools,omitempty"`
}

// GetDeploymentResponseBody is the type of the "deployments" service
// "getDeployment" endpoint HTTP response body.
type GetDeploymentResponseBody struct {
	// The ID to of the deployment.
	ID string `form:"id" json:"id" xml:"id"`
	// The ID of the organization that the deployment belongs to.
	OrganizationID string `form:"organization_id" json:"organization_id" xml:"organization_id"`
	// The ID of the project that the deployment belongs to.
	ProjectID string `form:"project_id" json:"project_id" xml:"project_id"`
	// The ID of the user that created the deployment.
	UserID string `form:"user_id" json:"user_id" xml:"user_id"`
	// The creation date of the deployment.
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// The external ID to refer to the deployment. This can be a git commit hash
	// for example.
	ExternalID *string `form:"external_id,omitempty" json:"external_id,omitempty" xml:"external_id,omitempty"`
	// The upstream URL a deployment can refer to. This can be a github url to a
	// commit hash or pull request.
	ExternalURL *string `form:"external_url,omitempty" json:"external_url,omitempty" xml:"external_url,omitempty"`
	// The HTTP tools available in the deployment.
	Openapi3p1Tools []*OpenAPI3P1ToolFormResponseBody `form:"openapi_3p1_tools,omitempty" json:"openapi_3p1_tools,omitempty" xml:"openapi_3p1_tools,omitempty"`
}

// CreateDeploymentResponseBody is the type of the "deployments" service
// "createDeployment" endpoint HTTP response body.
type CreateDeploymentResponseBody struct {
	// The ID to of the deployment.
	ID string `form:"id" json:"id" xml:"id"`
	// The ID of the organization that the deployment belongs to.
	OrganizationID string `form:"organization_id" json:"organization_id" xml:"organization_id"`
	// The ID of the project that the deployment belongs to.
	ProjectID string `form:"project_id" json:"project_id" xml:"project_id"`
	// The ID of the user that created the deployment.
	UserID string `form:"user_id" json:"user_id" xml:"user_id"`
	// The creation date of the deployment.
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// The external ID to refer to the deployment. This can be a git commit hash
	// for example.
	ExternalID *string `form:"external_id,omitempty" json:"external_id,omitempty" xml:"external_id,omitempty"`
	// The upstream URL a deployment can refer to. This can be a github url to a
	// commit hash or pull request.
	ExternalURL *string `form:"external_url,omitempty" json:"external_url,omitempty" xml:"external_url,omitempty"`
	// The HTTP tools available in the deployment.
	Openapi3p1Tools []*OpenAPI3P1ToolFormResponseBody `form:"openapi_3p1_tools,omitempty" json:"openapi_3p1_tools,omitempty" xml:"openapi_3p1_tools,omitempty"`
}

// ListDeploymentsResponseBody is the type of the "deployments" service
// "listDeployments" endpoint HTTP response body.
type ListDeploymentsResponseBody struct {
	// The cursor to fetch results from
	NextCursor *string `form:"next_cursor,omitempty" json:"next_cursor,omitempty" xml:"next_cursor,omitempty"`
	// A list of deployments
	Items []*DeploymentResponseBody `form:"items" json:"items" xml:"items"`
}

// OpenAPI3P1ToolFormResponseBody is used to define fields on response body
// types.
type OpenAPI3P1ToolFormResponseBody struct {
	Kind string `form:"kind" json:"kind" xml:"kind"`
	// The name of the tool.
	Name string `form:"name" json:"name" xml:"name"`
	// The description that is provided with the tool.
	Description string `form:"description" json:"description" xml:"description"`
	// The tags that are associated with the tool.
	Tags []string `form:"tags" json:"tags" xml:"tags"`
	// The path of the HTTP endpoint.
	Path string `form:"path" json:"path" xml:"path"`
	// The method to use for the HTTP request.
	Method string `form:"method" json:"method" xml:"method"`
	// A map of path parameters to interpolate into the path of the HTTP request.
	PathParameters map[string]*OpenAPI3P1ParameterSchemaResponseBody `form:"path_parameters" json:"path_parameters" xml:"path_parameters"`
	// A map of header schemas to send with the HTTP request.
	HeaderParameters map[string]*OpenAPI3P1ParameterSchemaResponseBody `form:"header_parameters" json:"header_parameters" xml:"header_parameters"`
	// A map of query parameters to send with the HTTP request.
	QueryParameters map[string]*OpenAPI3P1ParameterSchemaResponseBody `form:"query_parameters" json:"query_parameters" xml:"query_parameters"`
	// The JSON Schema describing the body of the HTTP request.
	Body string `form:"body" json:"body" xml:"body"`
}

// OpenAPI3P1ParameterSchemaResponseBody is used to define fields on response
// body types.
type OpenAPI3P1ParameterSchemaResponseBody struct {
	// The name of the parameter.
	Name string `form:"name" json:"name" xml:"name"`
	// A brief description of the parameter.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The location of the parameter in an HTTP request.
	In string `form:"in" json:"in" xml:"in"`
	// Whether the parameter is required.
	Required bool `form:"required" json:"required" xml:"required"`
	// The style of the parameter.
	Style *string `form:"style,omitempty" json:"style,omitempty" xml:"style,omitempty"`
	// Whether the parameter is exploded.
	Explode *bool `form:"explode,omitempty" json:"explode,omitempty" xml:"explode,omitempty"`
	// Whether the parameter is allowed to be reserved.
	AllowReserved *bool `form:"allowReserved,omitempty" json:"allowReserved,omitempty" xml:"allowReserved,omitempty"`
	// The JSON Schema describing the parameter.
	Schema *string `form:"schema,omitempty" json:"schema,omitempty" xml:"schema,omitempty"`
	// A brief description of the parameter.
	Deprecated bool `form:"deprecated" json:"deprecated" xml:"deprecated"`
	// An example value for the parameter.
	Example any `form:"example,omitempty" json:"example,omitempty" xml:"example,omitempty"`
	// Examples of the parameter.
	Examples map[string]any `form:"examples,omitempty" json:"examples,omitempty" xml:"examples,omitempty"`
}

// DeploymentResponseBody is used to define fields on response body types.
type DeploymentResponseBody struct {
	// The ID to of the deployment.
	ID string `form:"id" json:"id" xml:"id"`
	// The ID of the organization that the deployment belongs to.
	OrganizationID string `form:"organization_id" json:"organization_id" xml:"organization_id"`
	// The ID of the project that the deployment belongs to.
	ProjectID string `form:"project_id" json:"project_id" xml:"project_id"`
	// The ID of the user that created the deployment.
	UserID string `form:"user_id" json:"user_id" xml:"user_id"`
	// The creation date of the deployment.
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// The external ID to refer to the deployment. This can be a git commit hash
	// for example.
	ExternalID *string `form:"external_id,omitempty" json:"external_id,omitempty" xml:"external_id,omitempty"`
	// The upstream URL a deployment can refer to. This can be a github url to a
	// commit hash or pull request.
	ExternalURL *string `form:"external_url,omitempty" json:"external_url,omitempty" xml:"external_url,omitempty"`
	// The HTTP tools available in the deployment.
	Openapi3p1Tools []*OpenAPI3P1ToolFormResponseBody `form:"openapi_3p1_tools,omitempty" json:"openapi_3p1_tools,omitempty" xml:"openapi_3p1_tools,omitempty"`
}

// OpenAPI3P1ToolFormRequestBody is used to define fields on request body types.
type OpenAPI3P1ToolFormRequestBody struct {
	Kind *string `form:"kind,omitempty" json:"kind,omitempty" xml:"kind,omitempty"`
	// The name of the tool.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The description that is provided with the tool.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The tags that are associated with the tool.
	Tags []string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
	// The path of the HTTP endpoint.
	Path *string `form:"path,omitempty" json:"path,omitempty" xml:"path,omitempty"`
	// The method to use for the HTTP request.
	Method *string `form:"method,omitempty" json:"method,omitempty" xml:"method,omitempty"`
	// A map of path parameters to interpolate into the path of the HTTP request.
	PathParameters map[string]*OpenAPI3P1ParameterSchemaRequestBody `form:"path_parameters,omitempty" json:"path_parameters,omitempty" xml:"path_parameters,omitempty"`
	// A map of header schemas to send with the HTTP request.
	HeaderParameters map[string]*OpenAPI3P1ParameterSchemaRequestBody `form:"header_parameters,omitempty" json:"header_parameters,omitempty" xml:"header_parameters,omitempty"`
	// A map of query parameters to send with the HTTP request.
	QueryParameters map[string]*OpenAPI3P1ParameterSchemaRequestBody `form:"query_parameters,omitempty" json:"query_parameters,omitempty" xml:"query_parameters,omitempty"`
	// The JSON Schema describing the body of the HTTP request.
	Body *string `form:"body,omitempty" json:"body,omitempty" xml:"body,omitempty"`
}

// OpenAPI3P1ParameterSchemaRequestBody is used to define fields on request
// body types.
type OpenAPI3P1ParameterSchemaRequestBody struct {
	// The name of the parameter.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// A brief description of the parameter.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The location of the parameter in an HTTP request.
	In *string `form:"in,omitempty" json:"in,omitempty" xml:"in,omitempty"`
	// Whether the parameter is required.
	Required *bool `form:"required,omitempty" json:"required,omitempty" xml:"required,omitempty"`
	// The style of the parameter.
	Style *string `form:"style,omitempty" json:"style,omitempty" xml:"style,omitempty"`
	// Whether the parameter is exploded.
	Explode *bool `form:"explode,omitempty" json:"explode,omitempty" xml:"explode,omitempty"`
	// Whether the parameter is allowed to be reserved.
	AllowReserved *bool `form:"allowReserved,omitempty" json:"allowReserved,omitempty" xml:"allowReserved,omitempty"`
	// The JSON Schema describing the parameter.
	Schema *string `form:"schema,omitempty" json:"schema,omitempty" xml:"schema,omitempty"`
	// A brief description of the parameter.
	Deprecated *bool `form:"deprecated,omitempty" json:"deprecated,omitempty" xml:"deprecated,omitempty"`
	// An example value for the parameter.
	Example any `form:"example,omitempty" json:"example,omitempty" xml:"example,omitempty"`
	// Examples of the parameter.
	Examples map[string]any `form:"examples,omitempty" json:"examples,omitempty" xml:"examples,omitempty"`
}

// NewGetDeploymentResponseBody builds the HTTP response body from the result
// of the "getDeployment" endpoint of the "deployments" service.
func NewGetDeploymentResponseBody(res *deployments.DeploymentGetResult) *GetDeploymentResponseBody {
	body := &GetDeploymentResponseBody{
		ID:             res.ID,
		OrganizationID: res.OrganizationID,
		ProjectID:      res.ProjectID,
		UserID:         res.UserID,
		CreatedAt:      res.CreatedAt,
		ExternalID:     res.ExternalID,
		ExternalURL:    res.ExternalURL,
	}
	if res.Openapi3p1Tools != nil {
		body.Openapi3p1Tools = make([]*OpenAPI3P1ToolFormResponseBody, len(res.Openapi3p1Tools))
		for i, val := range res.Openapi3p1Tools {
			body.Openapi3p1Tools[i] = marshalDeploymentsOpenAPI3P1ToolFormToOpenAPI3P1ToolFormResponseBody(val)
		}
	}
	return body
}

// NewCreateDeploymentResponseBody builds the HTTP response body from the
// result of the "createDeployment" endpoint of the "deployments" service.
func NewCreateDeploymentResponseBody(res *deployments.DeploymentCreateResult) *CreateDeploymentResponseBody {
	body := &CreateDeploymentResponseBody{
		ID:             res.ID,
		OrganizationID: res.OrganizationID,
		ProjectID:      res.ProjectID,
		UserID:         res.UserID,
		CreatedAt:      res.CreatedAt,
		ExternalID:     res.ExternalID,
		ExternalURL:    res.ExternalURL,
	}
	if res.Openapi3p1Tools != nil {
		body.Openapi3p1Tools = make([]*OpenAPI3P1ToolFormResponseBody, len(res.Openapi3p1Tools))
		for i, val := range res.Openapi3p1Tools {
			body.Openapi3p1Tools[i] = marshalDeploymentsOpenAPI3P1ToolFormToOpenAPI3P1ToolFormResponseBody(val)
		}
	}
	return body
}

// NewListDeploymentsResponseBody builds the HTTP response body from the result
// of the "listDeployments" endpoint of the "deployments" service.
func NewListDeploymentsResponseBody(res *deployments.DeploymentListResult) *ListDeploymentsResponseBody {
	body := &ListDeploymentsResponseBody{
		NextCursor: res.NextCursor,
	}
	if res.Items != nil {
		body.Items = make([]*DeploymentResponseBody, len(res.Items))
		for i, val := range res.Items {
			body.Items[i] = marshalDeploymentsDeploymentToDeploymentResponseBody(val)
		}
	} else {
		body.Items = []*DeploymentResponseBody{}
	}
	return body
}

// NewGetDeploymentDeploymentGetForm builds a deployments service getDeployment
// endpoint payload.
func NewGetDeploymentDeploymentGetForm(id string) *deployments.DeploymentGetForm {
	v := &deployments.DeploymentGetForm{}
	v.ID = id

	return v
}

// NewCreateDeploymentDeploymentCreateForm builds a deployments service
// createDeployment endpoint payload.
func NewCreateDeploymentDeploymentCreateForm(body *CreateDeploymentRequestBody) *deployments.DeploymentCreateForm {
	v := &deployments.DeploymentCreateForm{
		ExternalID:  body.ExternalID,
		ExternalURL: body.ExternalURL,
	}
	if body.Openapi3p1Tools != nil {
		v.Openapi3p1Tools = make([]*deployments.OpenAPI3P1ToolForm, len(body.Openapi3p1Tools))
		for i, val := range body.Openapi3p1Tools {
			v.Openapi3p1Tools[i] = unmarshalOpenAPI3P1ToolFormRequestBodyToDeploymentsOpenAPI3P1ToolForm(val)
		}
	}

	return v
}

// NewListDeploymentsDeploymentListForm builds a deployments service
// listDeployments endpoint payload.
func NewListDeploymentsDeploymentListForm(cursor *string, limit int) *deployments.DeploymentListForm {
	v := &deployments.DeploymentListForm{}
	v.Cursor = cursor
	v.Limit = limit

	return v
}

// ValidateCreateDeploymentRequestBody runs the validations defined on
// CreateDeploymentRequestBody
func ValidateCreateDeploymentRequestBody(body *CreateDeploymentRequestBody) (err error) {
	for _, e := range body.Openapi3p1Tools {
		if e != nil {
			if err2 := ValidateOpenAPI3P1ToolFormRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateOpenAPI3P1ToolFormRequestBody runs the validations defined on
// OpenAPI3P1ToolFormRequestBody
func ValidateOpenAPI3P1ToolFormRequestBody(body *OpenAPI3P1ToolFormRequestBody) (err error) {
	if body.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Method == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("method", "body"))
	}
	if body.Path == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("path", "body"))
	}
	if body.PathParameters == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("path_parameters", "body"))
	}
	if body.HeaderParameters == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("header_parameters", "body"))
	}
	if body.QueryParameters == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("query_parameters", "body"))
	}
	if body.Body == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("body", "body"))
	}
	if body.Kind != nil {
		if !(*body.Kind == "oas3p1_operation") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.kind", *body.Kind, []any{"oas3p1_operation"}))
		}
	}
	if body.Name != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.name", *body.Name, "^[a-zA-Z](?:[a-zA-Z0-9_-]*[a-zA-Z0-9])?$"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 1, true))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 50, false))
		}
	}
	if len(body.Tags) > 10 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.tags", body.Tags, len(body.Tags), 10, false))
	}
	for _, e := range body.Tags {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.tags[*]", e, "^[a-z](?:[a-z0-9_-]*[a-z0-9])?$"))
	}
	if body.Method != nil {
		if !(*body.Method == "GET" || *body.Method == "POST" || *body.Method == "PUT" || *body.Method == "DELETE" || *body.Method == "HEAD" || *body.Method == "QUERY" || *body.Method == "SEARCH") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.method", *body.Method, []any{"GET", "POST", "PUT", "DELETE", "HEAD", "QUERY", "SEARCH"}))
		}
	}
	for _, v := range body.PathParameters {
		if v != nil {
			if err2 := ValidateOpenAPI3P1ParameterSchemaRequestBody(v); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, v := range body.HeaderParameters {
		if v != nil {
			if err2 := ValidateOpenAPI3P1ParameterSchemaRequestBody(v); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, v := range body.QueryParameters {
		if v != nil {
			if err2 := ValidateOpenAPI3P1ParameterSchemaRequestBody(v); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Body != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.body", *body.Body, goa.FormatJSON))
	}
	return
}

// ValidateOpenAPI3P1ParameterSchemaRequestBody runs the validations defined on
// OpenAPI3P1ParameterSchemaRequestBody
func ValidateOpenAPI3P1ParameterSchemaRequestBody(body *OpenAPI3P1ParameterSchemaRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.In == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("in", "body"))
	}
	if body.Required == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("required", "body"))
	}
	if body.In != nil {
		if !(*body.In == "query" || *body.In == "header" || *body.In == "path" || *body.In == "cookie") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.in", *body.In, []any{"query", "header", "path", "cookie"}))
		}
	}
	if body.Style != nil {
		if !(*body.Style == "form" || *body.Style == "simple" || *body.Style == "spaceDelimited" || *body.Style == "pipeDelimited" || *body.Style == "deepObject") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.style", *body.Style, []any{"form", "simple", "spaceDelimited", "pipeDelimited", "deepObject"}))
		}
	}
	if body.Schema != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.schema", *body.Schema, goa.FormatJSON))
	}
	return
}
