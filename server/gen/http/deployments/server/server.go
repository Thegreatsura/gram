// Code generated by goa v3.20.1, DO NOT EDIT.
//
// deployments HTTP server
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package server

import (
	"context"
	"net/http"

	deployments "github.com/speakeasy-api/gram/gen/deployments"
	otelhttp "go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the deployments service endpoint HTTP handlers.
type Server struct {
	Mounts             []*MountPoint
	GetDeployment      http.Handler
	CreateDeployment   http.Handler
	AddOpenAPIv3Source http.Handler
	ListDeployments    http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the deployments service endpoints
// using the provided encoder and decoder. The handlers are mounted on the
// given mux using the HTTP verb and path defined in the design. errhandler is
// called whenever a response fails to be encoded. formatter is used to format
// errors returned by the service methods prior to encoding. Both errhandler
// and formatter are optional and can be nil.
func New(
	e *deployments.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"GetDeployment", "GET", "/rpc/deployments.get"},
			{"CreateDeployment", "POST", "/rpc/deployments.create"},
			{"AddOpenAPIv3Source", "POST", "/rpc/deployments.addOpenAPIv3Source"},
			{"ListDeployments", "GET", "/rpc/deployments.list"},
		},
		GetDeployment:      NewGetDeploymentHandler(e.GetDeployment, mux, decoder, encoder, errhandler, formatter),
		CreateDeployment:   NewCreateDeploymentHandler(e.CreateDeployment, mux, decoder, encoder, errhandler, formatter),
		AddOpenAPIv3Source: NewAddOpenAPIv3SourceHandler(e.AddOpenAPIv3Source, mux, decoder, encoder, errhandler, formatter),
		ListDeployments:    NewListDeploymentsHandler(e.ListDeployments, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "deployments" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.GetDeployment = m(s.GetDeployment)
	s.CreateDeployment = m(s.CreateDeployment)
	s.AddOpenAPIv3Source = m(s.AddOpenAPIv3Source)
	s.ListDeployments = m(s.ListDeployments)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return deployments.MethodNames[:] }

// Mount configures the mux to serve the deployments endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountGetDeploymentHandler(mux, h.GetDeployment)
	MountCreateDeploymentHandler(mux, h.CreateDeployment)
	MountAddOpenAPIv3SourceHandler(mux, h.AddOpenAPIv3Source)
	MountListDeploymentsHandler(mux, h.ListDeployments)
}

// Mount configures the mux to serve the deployments endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountGetDeploymentHandler configures the mux to serve the "deployments"
// service "getDeployment" endpoint.
func MountGetDeploymentHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/rpc/deployments.get", otelhttp.WithRouteTag("/rpc/deployments.get", f).ServeHTTP)
}

// NewGetDeploymentHandler creates a HTTP handler which loads the HTTP request
// and calls the "deployments" service "getDeployment" endpoint.
func NewGetDeploymentHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetDeploymentRequest(mux, decoder)
		encodeResponse = EncodeGetDeploymentResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getDeployment")
		ctx = context.WithValue(ctx, goa.ServiceKey, "deployments")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreateDeploymentHandler configures the mux to serve the "deployments"
// service "createDeployment" endpoint.
func MountCreateDeploymentHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/rpc/deployments.create", otelhttp.WithRouteTag("/rpc/deployments.create", f).ServeHTTP)
}

// NewCreateDeploymentHandler creates a HTTP handler which loads the HTTP
// request and calls the "deployments" service "createDeployment" endpoint.
func NewCreateDeploymentHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateDeploymentRequest(mux, decoder)
		encodeResponse = EncodeCreateDeploymentResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "createDeployment")
		ctx = context.WithValue(ctx, goa.ServiceKey, "deployments")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountAddOpenAPIv3SourceHandler configures the mux to serve the "deployments"
// service "addOpenAPIv3Source" endpoint.
func MountAddOpenAPIv3SourceHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/rpc/deployments.addOpenAPIv3Source", otelhttp.WithRouteTag("/rpc/deployments.addOpenAPIv3Source", f).ServeHTTP)
}

// NewAddOpenAPIv3SourceHandler creates a HTTP handler which loads the HTTP
// request and calls the "deployments" service "addOpenAPIv3Source" endpoint.
func NewAddOpenAPIv3SourceHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeAddOpenAPIv3SourceRequest(mux, decoder)
		encodeResponse = EncodeAddOpenAPIv3SourceResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "addOpenAPIv3Source")
		ctx = context.WithValue(ctx, goa.ServiceKey, "deployments")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountListDeploymentsHandler configures the mux to serve the "deployments"
// service "listDeployments" endpoint.
func MountListDeploymentsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/rpc/deployments.list", otelhttp.WithRouteTag("/rpc/deployments.list", f).ServeHTTP)
}

// NewListDeploymentsHandler creates a HTTP handler which loads the HTTP
// request and calls the "deployments" service "listDeployments" endpoint.
func NewListDeploymentsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeListDeploymentsRequest(mux, decoder)
		encodeResponse = EncodeListDeploymentsResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "listDeployments")
		ctx = context.WithValue(ctx, goa.ServiceKey, "deployments")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}
