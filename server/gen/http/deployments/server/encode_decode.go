// Code generated by goa v3.20.0, DO NOT EDIT.
//
// deployments HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package server

import (
	"context"
	"errors"
	"io"
	"net/http"
	"strconv"
	"strings"

	deployments "github.com/speakeasy-api/gram/gen/deployments"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeGetDeploymentResponse returns an encoder for responses returned by the
// deployments getDeployment endpoint.
func EncodeGetDeploymentResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*deployments.GetDeploymentResult)
		enc := encoder(ctx, w)
		body := NewGetDeploymentResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetDeploymentRequest returns a decoder for requests sent to the
// deployments getDeployment endpoint.
func DecodeGetDeploymentRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			id               string
			gramSessionToken *string
			err              error
		)
		id = r.URL.Query().Get("id")
		if id == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("id", "query string"))
		}
		gramSessionTokenRaw := r.Header.Get("X-Gram-Session")
		if gramSessionTokenRaw != "" {
			gramSessionToken = &gramSessionTokenRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetDeploymentPayload(id, gramSessionToken)
		if payload.GramSessionToken != nil {
			if strings.Contains(*payload.GramSessionToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.GramSessionToken, " ", 2)[1]
				payload.GramSessionToken = &cred
			}
		}

		return payload, nil
	}
}

// EncodeCreateDeploymentResponse returns an encoder for responses returned by
// the deployments createDeployment endpoint.
func EncodeCreateDeploymentResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*deployments.CreateDeploymentResult)
		enc := encoder(ctx, w)
		body := NewCreateDeploymentResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeCreateDeploymentRequest returns a decoder for requests sent to the
// deployments createDeployment endpoint.
func DecodeCreateDeploymentRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body CreateDeploymentRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateDeploymentRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			gramSessionToken *string
		)
		gramSessionTokenRaw := r.Header.Get("X-Gram-Session")
		if gramSessionTokenRaw != "" {
			gramSessionToken = &gramSessionTokenRaw
		}
		payload := NewCreateDeploymentPayload(&body, gramSessionToken)
		if payload.GramSessionToken != nil {
			if strings.Contains(*payload.GramSessionToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.GramSessionToken, " ", 2)[1]
				payload.GramSessionToken = &cred
			}
		}

		return payload, nil
	}
}

// EncodeListDeploymentsResponse returns an encoder for responses returned by
// the deployments listDeployments endpoint.
func EncodeListDeploymentsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*deployments.ListDeploymentResult)
		enc := encoder(ctx, w)
		body := NewListDeploymentsResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListDeploymentsRequest returns a decoder for requests sent to the
// deployments listDeployments endpoint.
func DecodeListDeploymentsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			cursor           *string
			limit            int
			gramSessionToken *string
			err              error
		)
		qp := r.URL.Query()
		cursorRaw := qp.Get("cursor")
		if cursorRaw != "" {
			cursor = &cursorRaw
		}
		{
			limitRaw := qp.Get("limit")
			if limitRaw == "" {
				limit = 10
			} else {
				v, err2 := strconv.ParseInt(limitRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("limit", limitRaw, "integer"))
				}
				limit = int(v)
			}
		}
		if limit < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("limit", limit, 1, true))
		}
		if limit > 100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("limit", limit, 100, false))
		}
		gramSessionTokenRaw := r.Header.Get("X-Gram-Session")
		if gramSessionTokenRaw != "" {
			gramSessionToken = &gramSessionTokenRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewListDeploymentsPayload(cursor, limit, gramSessionToken)
		if payload.GramSessionToken != nil {
			if strings.Contains(*payload.GramSessionToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.GramSessionToken, " ", 2)[1]
				payload.GramSessionToken = &cred
			}
		}

		return payload, nil
	}
}

// marshalDeploymentsDeploymentToDeploymentResponseBody builds a value of type
// *DeploymentResponseBody from a value of type *deployments.Deployment.
func marshalDeploymentsDeploymentToDeploymentResponseBody(v *deployments.Deployment) *DeploymentResponseBody {
	if v == nil {
		return nil
	}
	res := &DeploymentResponseBody{
		ID:             v.ID,
		OrganizationID: v.OrganizationID,
		ProjectID:      v.ProjectID,
		UserID:         v.UserID,
		CreatedAt:      v.CreatedAt,
		IdempotencyKey: v.IdempotencyKey,
		GithubRepo:     v.GithubRepo,
		GithubSha:      v.GithubSha,
		ExternalID:     v.ExternalID,
		ExternalURL:    v.ExternalURL,
	}
	if v.Openapiv3AssetIds != nil {
		res.Openapiv3AssetIds = make([]string, len(v.Openapiv3AssetIds))
		for i, val := range v.Openapiv3AssetIds {
			res.Openapiv3AssetIds[i] = val
		}
	} else {
		res.Openapiv3AssetIds = []string{}
	}

	return res
}
