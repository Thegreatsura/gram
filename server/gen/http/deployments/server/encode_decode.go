// Code generated by goa v3.20.0, DO NOT EDIT.
//
// deployments HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package server

import (
	"context"
	"errors"
	"io"
	"net/http"
	"strconv"

	deployments "github.com/speakeasy-api/gram/gen/deployments"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeGetDeploymentResponse returns an encoder for responses returned by the
// deployments getDeployment endpoint.
func EncodeGetDeploymentResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*deployments.DeploymentGetResult)
		enc := encoder(ctx, w)
		body := NewGetDeploymentResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetDeploymentRequest returns a decoder for requests sent to the
// deployments getDeployment endpoint.
func DecodeGetDeploymentRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			id  string
			err error
		)
		id = r.URL.Query().Get("id")
		if id == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("id", "query string"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetDeploymentDeploymentGetForm(id)

		return payload, nil
	}
}

// EncodeCreateDeploymentResponse returns an encoder for responses returned by
// the deployments createDeployment endpoint.
func EncodeCreateDeploymentResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*deployments.DeploymentCreateResult)
		enc := encoder(ctx, w)
		body := NewCreateDeploymentResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeCreateDeploymentRequest returns a decoder for requests sent to the
// deployments createDeployment endpoint.
func DecodeCreateDeploymentRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body CreateDeploymentRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateDeploymentRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCreateDeploymentDeploymentCreateForm(&body)

		return payload, nil
	}
}

// EncodeListDeploymentsResponse returns an encoder for responses returned by
// the deployments listDeployments endpoint.
func EncodeListDeploymentsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*deployments.DeploymentListResult)
		enc := encoder(ctx, w)
		body := NewListDeploymentsResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListDeploymentsRequest returns a decoder for requests sent to the
// deployments listDeployments endpoint.
func DecodeListDeploymentsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			cursor *string
			limit  int
			err    error
		)
		qp := r.URL.Query()
		cursorRaw := qp.Get("cursor")
		if cursorRaw != "" {
			cursor = &cursorRaw
		}
		{
			limitRaw := qp.Get("limit")
			if limitRaw == "" {
				limit = 10
			} else {
				v, err2 := strconv.ParseInt(limitRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("limit", limitRaw, "integer"))
				}
				limit = int(v)
			}
		}
		if limit < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("limit", limit, 1, true))
		}
		if limit > 100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("limit", limit, 100, false))
		}
		if err != nil {
			return nil, err
		}
		payload := NewListDeploymentsDeploymentListForm(cursor, limit)

		return payload, nil
	}
}

// marshalDeploymentsOpenAPI3P1ToolFormToOpenAPI3P1ToolFormResponseBody builds
// a value of type *OpenAPI3P1ToolFormResponseBody from a value of type
// *deployments.OpenAPI3P1ToolForm.
func marshalDeploymentsOpenAPI3P1ToolFormToOpenAPI3P1ToolFormResponseBody(v *deployments.OpenAPI3P1ToolForm) *OpenAPI3P1ToolFormResponseBody {
	if v == nil {
		return nil
	}
	res := &OpenAPI3P1ToolFormResponseBody{
		Kind:        v.Kind,
		Name:        v.Name,
		Description: v.Description,
		Path:        v.Path,
		Method:      v.Method,
		Body:        string(v.Body),
	}
	if v.Tags != nil {
		res.Tags = make([]string, len(v.Tags))
		for i, val := range v.Tags {
			res.Tags[i] = val
		}
	}
	if v.Tags == nil {
		res.Tags = []string{}
	}
	if v.PathParameters != nil {
		res.PathParameters = make(map[string]*OpenAPI3P1ParameterSchemaResponseBody, len(v.PathParameters))
		for key, val := range v.PathParameters {
			tk := key
			if val == nil {
				res.PathParameters[tk] = nil
				continue
			}
			res.PathParameters[tk] = marshalDeploymentsOpenAPI3P1ParameterSchemaToOpenAPI3P1ParameterSchemaResponseBody(val)
		}
	}
	if v.HeaderParameters != nil {
		res.HeaderParameters = make(map[string]*OpenAPI3P1ParameterSchemaResponseBody, len(v.HeaderParameters))
		for key, val := range v.HeaderParameters {
			tk := key
			if val == nil {
				res.HeaderParameters[tk] = nil
				continue
			}
			res.HeaderParameters[tk] = marshalDeploymentsOpenAPI3P1ParameterSchemaToOpenAPI3P1ParameterSchemaResponseBody(val)
		}
	}
	if v.QueryParameters != nil {
		res.QueryParameters = make(map[string]*OpenAPI3P1ParameterSchemaResponseBody, len(v.QueryParameters))
		for key, val := range v.QueryParameters {
			tk := key
			if val == nil {
				res.QueryParameters[tk] = nil
				continue
			}
			res.QueryParameters[tk] = marshalDeploymentsOpenAPI3P1ParameterSchemaToOpenAPI3P1ParameterSchemaResponseBody(val)
		}
	}

	return res
}

// marshalDeploymentsOpenAPI3P1ParameterSchemaToOpenAPI3P1ParameterSchemaResponseBody
// builds a value of type *OpenAPI3P1ParameterSchemaResponseBody from a value
// of type *deployments.OpenAPI3P1ParameterSchema.
func marshalDeploymentsOpenAPI3P1ParameterSchemaToOpenAPI3P1ParameterSchemaResponseBody(v *deployments.OpenAPI3P1ParameterSchema) *OpenAPI3P1ParameterSchemaResponseBody {
	res := &OpenAPI3P1ParameterSchemaResponseBody{
		Name:          v.Name,
		Description:   v.Description,
		In:            v.In,
		Required:      v.Required,
		Style:         v.Style,
		Explode:       v.Explode,
		AllowReserved: v.AllowReserved,
		Deprecated:    v.Deprecated,
		Example:       v.Example,
	}
	if v.Schema != nil {
		schema := string(*v.Schema)
		res.Schema = &schema
	}
	{
		var zero bool
		if res.Deprecated == zero {
			res.Deprecated = false
		}
	}
	if v.Examples != nil {
		res.Examples = make(map[string]any, len(v.Examples))
		for key, val := range v.Examples {
			tk := key
			tv := val
			res.Examples[tk] = tv
		}
	}

	return res
}

// unmarshalOpenAPI3P1ToolFormRequestBodyToDeploymentsOpenAPI3P1ToolForm builds
// a value of type *deployments.OpenAPI3P1ToolForm from a value of type
// *OpenAPI3P1ToolFormRequestBody.
func unmarshalOpenAPI3P1ToolFormRequestBodyToDeploymentsOpenAPI3P1ToolForm(v *OpenAPI3P1ToolFormRequestBody) *deployments.OpenAPI3P1ToolForm {
	if v == nil {
		return nil
	}
	res := &deployments.OpenAPI3P1ToolForm{
		Kind:        *v.Kind,
		Name:        *v.Name,
		Description: *v.Description,
		Path:        *v.Path,
		Method:      *v.Method,
		Body:        deployments.JSONSchema(*v.Body),
	}
	if v.Tags != nil {
		res.Tags = make([]string, len(v.Tags))
		for i, val := range v.Tags {
			res.Tags[i] = val
		}
	}
	if v.Tags == nil {
		res.Tags = []string{}
	}
	res.PathParameters = make(map[string]*deployments.OpenAPI3P1ParameterSchema, len(v.PathParameters))
	for key, val := range v.PathParameters {
		tk := key
		if val == nil {
			res.PathParameters[tk] = nil
			continue
		}
		res.PathParameters[tk] = unmarshalOpenAPI3P1ParameterSchemaRequestBodyToDeploymentsOpenAPI3P1ParameterSchema(val)
	}
	res.HeaderParameters = make(map[string]*deployments.OpenAPI3P1ParameterSchema, len(v.HeaderParameters))
	for key, val := range v.HeaderParameters {
		tk := key
		if val == nil {
			res.HeaderParameters[tk] = nil
			continue
		}
		res.HeaderParameters[tk] = unmarshalOpenAPI3P1ParameterSchemaRequestBodyToDeploymentsOpenAPI3P1ParameterSchema(val)
	}
	res.QueryParameters = make(map[string]*deployments.OpenAPI3P1ParameterSchema, len(v.QueryParameters))
	for key, val := range v.QueryParameters {
		tk := key
		if val == nil {
			res.QueryParameters[tk] = nil
			continue
		}
		res.QueryParameters[tk] = unmarshalOpenAPI3P1ParameterSchemaRequestBodyToDeploymentsOpenAPI3P1ParameterSchema(val)
	}

	return res
}

// unmarshalOpenAPI3P1ParameterSchemaRequestBodyToDeploymentsOpenAPI3P1ParameterSchema
// builds a value of type *deployments.OpenAPI3P1ParameterSchema from a value
// of type *OpenAPI3P1ParameterSchemaRequestBody.
func unmarshalOpenAPI3P1ParameterSchemaRequestBodyToDeploymentsOpenAPI3P1ParameterSchema(v *OpenAPI3P1ParameterSchemaRequestBody) *deployments.OpenAPI3P1ParameterSchema {
	res := &deployments.OpenAPI3P1ParameterSchema{
		Name:          *v.Name,
		Description:   v.Description,
		In:            *v.In,
		Required:      *v.Required,
		Style:         v.Style,
		Explode:       v.Explode,
		AllowReserved: v.AllowReserved,
		Example:       v.Example,
	}
	if v.Schema != nil {
		schema := deployments.JSONSchema(*v.Schema)
		res.Schema = &schema
	}
	if v.Deprecated != nil {
		res.Deprecated = *v.Deprecated
	}
	if v.Deprecated == nil {
		res.Deprecated = false
	}
	if v.Examples != nil {
		res.Examples = make(map[string]any, len(v.Examples))
		for key, val := range v.Examples {
			tk := key
			tv := val
			res.Examples[tk] = tv
		}
	}

	return res
}

// marshalDeploymentsDeploymentToDeploymentResponseBody builds a value of type
// *DeploymentResponseBody from a value of type *deployments.Deployment.
func marshalDeploymentsDeploymentToDeploymentResponseBody(v *deployments.Deployment) *DeploymentResponseBody {
	res := &DeploymentResponseBody{
		ID:             v.ID,
		OrganizationID: v.OrganizationID,
		ProjectID:      v.ProjectID,
		UserID:         v.UserID,
		CreatedAt:      v.CreatedAt,
		ExternalID:     v.ExternalID,
		ExternalURL:    v.ExternalURL,
	}
	if v.Openapi3p1Tools != nil {
		res.Openapi3p1Tools = make([]*OpenAPI3P1ToolFormResponseBody, len(v.Openapi3p1Tools))
		for i, val := range v.Openapi3p1Tools {
			res.Openapi3p1Tools[i] = marshalDeploymentsOpenAPI3P1ToolFormToOpenAPI3P1ToolFormResponseBody(val)
		}
	}

	return res
}
