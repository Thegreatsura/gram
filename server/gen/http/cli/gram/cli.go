// Code generated by goa v3.20.0, DO NOT EDIT.
//
// gram HTTP client CLI support package
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	deploymentsc "github.com/speakeasy-api/gram/gen/http/deployments/client"
	systemc "github.com/speakeasy-api/gram/gen/http/system/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `deployments (get-deployment|create-deployment|list-deployments)
system health-check
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` deployments get-deployment --id "Adipisci id consequuntur totam eum."` + "\n" +
		os.Args[0] + ` system health-check` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		deploymentsFlags = flag.NewFlagSet("deployments", flag.ContinueOnError)

		deploymentsGetDeploymentFlags  = flag.NewFlagSet("get-deployment", flag.ExitOnError)
		deploymentsGetDeploymentIDFlag = deploymentsGetDeploymentFlags.String("id", "", "")

		deploymentsCreateDeploymentFlags    = flag.NewFlagSet("create-deployment", flag.ExitOnError)
		deploymentsCreateDeploymentBodyFlag = deploymentsCreateDeploymentFlags.String("body", "REQUIRED", "")

		deploymentsListDeploymentsFlags      = flag.NewFlagSet("list-deployments", flag.ExitOnError)
		deploymentsListDeploymentsCursorFlag = deploymentsListDeploymentsFlags.String("cursor", "", "")
		deploymentsListDeploymentsLimitFlag  = deploymentsListDeploymentsFlags.String("limit", "10", "")

		systemFlags = flag.NewFlagSet("system", flag.ContinueOnError)

		systemHealthCheckFlags = flag.NewFlagSet("health-check", flag.ExitOnError)
	)
	deploymentsFlags.Usage = deploymentsUsage
	deploymentsGetDeploymentFlags.Usage = deploymentsGetDeploymentUsage
	deploymentsCreateDeploymentFlags.Usage = deploymentsCreateDeploymentUsage
	deploymentsListDeploymentsFlags.Usage = deploymentsListDeploymentsUsage

	systemFlags.Usage = systemUsage
	systemHealthCheckFlags.Usage = systemHealthCheckUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "deployments":
			svcf = deploymentsFlags
		case "system":
			svcf = systemFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "deployments":
			switch epn {
			case "get-deployment":
				epf = deploymentsGetDeploymentFlags

			case "create-deployment":
				epf = deploymentsCreateDeploymentFlags

			case "list-deployments":
				epf = deploymentsListDeploymentsFlags

			}

		case "system":
			switch epn {
			case "health-check":
				epf = systemHealthCheckFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "deployments":
			c := deploymentsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get-deployment":
				endpoint = c.GetDeployment()
				data, err = deploymentsc.BuildGetDeploymentPayload(*deploymentsGetDeploymentIDFlag)
			case "create-deployment":
				endpoint = c.CreateDeployment()
				data, err = deploymentsc.BuildCreateDeploymentPayload(*deploymentsCreateDeploymentBodyFlag)
			case "list-deployments":
				endpoint = c.ListDeployments()
				data, err = deploymentsc.BuildListDeploymentsPayload(*deploymentsListDeploymentsCursorFlag, *deploymentsListDeploymentsLimitFlag)
			}
		case "system":
			c := systemc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "health-check":
				endpoint = c.HealthCheck()
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// deploymentsUsage displays the usage of the deployments command and its
// subcommands.
func deploymentsUsage() {
	fmt.Fprintf(os.Stderr, `Manages deployments of tools from upstream sources.
Usage:
    %[1]s [globalflags] deployments COMMAND [flags]

COMMAND:
    get-deployment: Create a deployment to load tool definitions.
    create-deployment: Create a deployment to load tool definitions.
    list-deployments: List all deployments in descending order of creation.

Additional help:
    %[1]s deployments COMMAND --help
`, os.Args[0])
}
func deploymentsGetDeploymentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] deployments get-deployment -id STRING

Create a deployment to load tool definitions.
    -id STRING: 

Example:
    %[1]s deployments get-deployment --id "Adipisci id consequuntur totam eum."
`, os.Args[0])
}

func deploymentsCreateDeploymentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] deployments create-deployment -body JSON

Create a deployment to load tool definitions.
    -body JSON: 

Example:
    %[1]s deployments create-deployment --body '{
      "external_id": "bc5f4a555e933e6861d12edba4c2d87ef6caf8e6",
      "external_url": "https://github.com/golang/go/commit/bc5f4a555e933e6861d12edba4c2d87ef6caf8e6"
   }'
`, os.Args[0])
}

func deploymentsListDeploymentsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] deployments list-deployments -cursor STRING -limit INT

List all deployments in descending order of creation.
    -cursor STRING: 
    -limit INT: 

Example:
    %[1]s deployments list-deployments --cursor "Blanditiis aut porro nam vel." --limit 6
`, os.Args[0])
}

// systemUsage displays the usage of the system command and its subcommands.
func systemUsage() {
	fmt.Fprintf(os.Stderr, `Exposes service health and status information.
Usage:
    %[1]s [globalflags] system COMMAND [flags]

COMMAND:
    health-check: Check the health of the service.

Additional help:
    %[1]s system COMMAND --help
`, os.Args[0])
}
func systemHealthCheckUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] system health-check

Check the health of the service.

Example:
    %[1]s system health-check
`, os.Args[0])
}
