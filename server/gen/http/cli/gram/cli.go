// Code generated by goa v3.20.1, DO NOT EDIT.
//
// gram HTTP client CLI support package
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	assetsc "github.com/speakeasy-api/gram/gen/http/assets/client"
	authc "github.com/speakeasy-api/gram/gen/http/auth/client"
	deploymentsc "github.com/speakeasy-api/gram/gen/http/deployments/client"
	environmentsc "github.com/speakeasy-api/gram/gen/http/environments/client"
	instancesc "github.com/speakeasy-api/gram/gen/http/instances/client"
	keysc "github.com/speakeasy-api/gram/gen/http/keys/client"
	toolsc "github.com/speakeasy-api/gram/gen/http/tools/client"
	toolsetsc "github.com/speakeasy-api/gram/gen/http/toolsets/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `assets upload-open-ap-iv3
auth (callback|login|switch-scopes|logout|info)
deployments (get-deployment|create-deployment|evolve|list-deployments)
environments (create-environment|list-environments|update-environment|delete-environment)
keys (create-key|list-keys|revoke-key)
tools list-tools
instances get-instance
toolsets (create-toolset|list-toolsets|update-toolset|delete-toolset|get-toolset)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` assets upload-open-ap-iv3 --content-type "Corporis labore." --content-length 3082955658720080765 --project-slug-input "Dolor deleniti porro." --session-token "Rerum ut reiciendis nisi et totam saepe." --stream "goa.png"` + "\n" +
		os.Args[0] + ` auth callback --id-token "Illo nobis enim quas dolorem et inventore."` + "\n" +
		os.Args[0] + ` deployments get-deployment --id "Adipisci sint eaque dolorum numquam molestias voluptatem." --session-token "Cumque voluptas odio impedit aut aut atque." --project-slug-input "Quaerat mollitia reiciendis magnam omnis."` + "\n" +
		os.Args[0] + ` environments create-environment --body '{
      "description": "Et a sit voluptas ut.",
      "entries": [
         {
            "name": "Est alias adipisci deserunt ad vel.",
            "value": "Laudantium vel sit odit."
         },
         {
            "name": "Est alias adipisci deserunt ad vel.",
            "value": "Laudantium vel sit odit."
         }
      ],
      "name": "Laborum at.",
      "organization_id": "Sit enim fugiat reiciendis nisi ad excepturi."
   }' --session-token "Voluptatem quia." --project-slug-input "Nisi aliquid minima omnis sint eius."` + "\n" +
		os.Args[0] + ` keys create-key --body '{
      "name": "Iusto ut."
   }' --session-token "Qui occaecati optio ea qui."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		assetsFlags = flag.NewFlagSet("assets", flag.ContinueOnError)

		assetsUploadOpenAPIv3Flags                = flag.NewFlagSet("upload-open-ap-iv3", flag.ExitOnError)
		assetsUploadOpenAPIv3ContentTypeFlag      = assetsUploadOpenAPIv3Flags.String("content-type", "REQUIRED", "")
		assetsUploadOpenAPIv3ContentLengthFlag    = assetsUploadOpenAPIv3Flags.String("content-length", "REQUIRED", "")
		assetsUploadOpenAPIv3ProjectSlugInputFlag = assetsUploadOpenAPIv3Flags.String("project-slug-input", "", "")
		assetsUploadOpenAPIv3SessionTokenFlag     = assetsUploadOpenAPIv3Flags.String("session-token", "", "")
		assetsUploadOpenAPIv3StreamFlag           = assetsUploadOpenAPIv3Flags.String("stream", "REQUIRED", "path to file containing the streamed request body")

		authFlags = flag.NewFlagSet("auth", flag.ContinueOnError)

		authCallbackFlags       = flag.NewFlagSet("callback", flag.ExitOnError)
		authCallbackIDTokenFlag = authCallbackFlags.String("id-token", "REQUIRED", "")

		authLoginFlags = flag.NewFlagSet("login", flag.ExitOnError)

		authSwitchScopesFlags              = flag.NewFlagSet("switch-scopes", flag.ExitOnError)
		authSwitchScopesOrganizationIDFlag = authSwitchScopesFlags.String("organization-id", "", "")
		authSwitchScopesProjectIDFlag      = authSwitchScopesFlags.String("project-id", "", "")
		authSwitchScopesSessionTokenFlag   = authSwitchScopesFlags.String("session-token", "", "")

		authLogoutFlags            = flag.NewFlagSet("logout", flag.ExitOnError)
		authLogoutSessionTokenFlag = authLogoutFlags.String("session-token", "", "")

		authInfoFlags            = flag.NewFlagSet("info", flag.ExitOnError)
		authInfoSessionTokenFlag = authInfoFlags.String("session-token", "", "")

		deploymentsFlags = flag.NewFlagSet("deployments", flag.ContinueOnError)

		deploymentsGetDeploymentFlags                = flag.NewFlagSet("get-deployment", flag.ExitOnError)
		deploymentsGetDeploymentIDFlag               = deploymentsGetDeploymentFlags.String("id", "REQUIRED", "")
		deploymentsGetDeploymentSessionTokenFlag     = deploymentsGetDeploymentFlags.String("session-token", "", "")
		deploymentsGetDeploymentProjectSlugInputFlag = deploymentsGetDeploymentFlags.String("project-slug-input", "", "")

		deploymentsCreateDeploymentFlags                = flag.NewFlagSet("create-deployment", flag.ExitOnError)
		deploymentsCreateDeploymentBodyFlag             = deploymentsCreateDeploymentFlags.String("body", "REQUIRED", "")
		deploymentsCreateDeploymentSessionTokenFlag     = deploymentsCreateDeploymentFlags.String("session-token", "", "")
		deploymentsCreateDeploymentProjectSlugInputFlag = deploymentsCreateDeploymentFlags.String("project-slug-input", "", "")
		deploymentsCreateDeploymentIdempotencyKeyFlag   = deploymentsCreateDeploymentFlags.String("idempotency-key", "REQUIRED", "")

		deploymentsEvolveFlags                = flag.NewFlagSet("evolve", flag.ExitOnError)
		deploymentsEvolveBodyFlag             = deploymentsEvolveFlags.String("body", "REQUIRED", "")
		deploymentsEvolveSessionTokenFlag     = deploymentsEvolveFlags.String("session-token", "", "")
		deploymentsEvolveProjectSlugInputFlag = deploymentsEvolveFlags.String("project-slug-input", "", "")

		deploymentsListDeploymentsFlags                = flag.NewFlagSet("list-deployments", flag.ExitOnError)
		deploymentsListDeploymentsCursorFlag           = deploymentsListDeploymentsFlags.String("cursor", "", "")
		deploymentsListDeploymentsSessionTokenFlag     = deploymentsListDeploymentsFlags.String("session-token", "", "")
		deploymentsListDeploymentsProjectSlugInputFlag = deploymentsListDeploymentsFlags.String("project-slug-input", "", "")

		environmentsFlags = flag.NewFlagSet("environments", flag.ContinueOnError)

		environmentsCreateEnvironmentFlags                = flag.NewFlagSet("create-environment", flag.ExitOnError)
		environmentsCreateEnvironmentBodyFlag             = environmentsCreateEnvironmentFlags.String("body", "REQUIRED", "")
		environmentsCreateEnvironmentSessionTokenFlag     = environmentsCreateEnvironmentFlags.String("session-token", "", "")
		environmentsCreateEnvironmentProjectSlugInputFlag = environmentsCreateEnvironmentFlags.String("project-slug-input", "", "")

		environmentsListEnvironmentsFlags                = flag.NewFlagSet("list-environments", flag.ExitOnError)
		environmentsListEnvironmentsSessionTokenFlag     = environmentsListEnvironmentsFlags.String("session-token", "", "")
		environmentsListEnvironmentsProjectSlugInputFlag = environmentsListEnvironmentsFlags.String("project-slug-input", "", "")

		environmentsUpdateEnvironmentFlags                = flag.NewFlagSet("update-environment", flag.ExitOnError)
		environmentsUpdateEnvironmentBodyFlag             = environmentsUpdateEnvironmentFlags.String("body", "REQUIRED", "")
		environmentsUpdateEnvironmentSlugFlag             = environmentsUpdateEnvironmentFlags.String("slug", "REQUIRED", "")
		environmentsUpdateEnvironmentSessionTokenFlag     = environmentsUpdateEnvironmentFlags.String("session-token", "", "")
		environmentsUpdateEnvironmentProjectSlugInputFlag = environmentsUpdateEnvironmentFlags.String("project-slug-input", "", "")

		environmentsDeleteEnvironmentFlags                = flag.NewFlagSet("delete-environment", flag.ExitOnError)
		environmentsDeleteEnvironmentSlugFlag             = environmentsDeleteEnvironmentFlags.String("slug", "REQUIRED", "")
		environmentsDeleteEnvironmentSessionTokenFlag     = environmentsDeleteEnvironmentFlags.String("session-token", "", "")
		environmentsDeleteEnvironmentProjectSlugInputFlag = environmentsDeleteEnvironmentFlags.String("project-slug-input", "", "")

		keysFlags = flag.NewFlagSet("keys", flag.ContinueOnError)

		keysCreateKeyFlags            = flag.NewFlagSet("create-key", flag.ExitOnError)
		keysCreateKeyBodyFlag         = keysCreateKeyFlags.String("body", "REQUIRED", "")
		keysCreateKeySessionTokenFlag = keysCreateKeyFlags.String("session-token", "", "")

		keysListKeysFlags            = flag.NewFlagSet("list-keys", flag.ExitOnError)
		keysListKeysSessionTokenFlag = keysListKeysFlags.String("session-token", "", "")

		keysRevokeKeyFlags            = flag.NewFlagSet("revoke-key", flag.ExitOnError)
		keysRevokeKeyIDFlag           = keysRevokeKeyFlags.String("id", "REQUIRED", "")
		keysRevokeKeySessionTokenFlag = keysRevokeKeyFlags.String("session-token", "", "")

		toolsFlags = flag.NewFlagSet("tools", flag.ContinueOnError)

		toolsListToolsFlags                = flag.NewFlagSet("list-tools", flag.ExitOnError)
		toolsListToolsCursorFlag           = toolsListToolsFlags.String("cursor", "", "")
		toolsListToolsSessionTokenFlag     = toolsListToolsFlags.String("session-token", "", "")
		toolsListToolsProjectSlugInputFlag = toolsListToolsFlags.String("project-slug-input", "", "")

		instancesFlags = flag.NewFlagSet("instances", flag.ContinueOnError)

		instancesGetInstanceFlags                = flag.NewFlagSet("get-instance", flag.ExitOnError)
		instancesGetInstanceToolsetSlugFlag      = instancesGetInstanceFlags.String("toolset-slug", "REQUIRED", "")
		instancesGetInstanceEnvironmentSlugFlag  = instancesGetInstanceFlags.String("environment-slug", "", "")
		instancesGetInstanceSessionTokenFlag     = instancesGetInstanceFlags.String("session-token", "", "")
		instancesGetInstanceProjectSlugInputFlag = instancesGetInstanceFlags.String("project-slug-input", "", "")
		instancesGetInstanceApikeyTokenFlag      = instancesGetInstanceFlags.String("apikey-token", "", "")

		toolsetsFlags = flag.NewFlagSet("toolsets", flag.ContinueOnError)

		toolsetsCreateToolsetFlags                = flag.NewFlagSet("create-toolset", flag.ExitOnError)
		toolsetsCreateToolsetBodyFlag             = toolsetsCreateToolsetFlags.String("body", "REQUIRED", "")
		toolsetsCreateToolsetSessionTokenFlag     = toolsetsCreateToolsetFlags.String("session-token", "", "")
		toolsetsCreateToolsetProjectSlugInputFlag = toolsetsCreateToolsetFlags.String("project-slug-input", "", "")

		toolsetsListToolsetsFlags                = flag.NewFlagSet("list-toolsets", flag.ExitOnError)
		toolsetsListToolsetsSessionTokenFlag     = toolsetsListToolsetsFlags.String("session-token", "", "")
		toolsetsListToolsetsProjectSlugInputFlag = toolsetsListToolsetsFlags.String("project-slug-input", "", "")

		toolsetsUpdateToolsetFlags                = flag.NewFlagSet("update-toolset", flag.ExitOnError)
		toolsetsUpdateToolsetBodyFlag             = toolsetsUpdateToolsetFlags.String("body", "REQUIRED", "")
		toolsetsUpdateToolsetSlugFlag             = toolsetsUpdateToolsetFlags.String("slug", "REQUIRED", "")
		toolsetsUpdateToolsetSessionTokenFlag     = toolsetsUpdateToolsetFlags.String("session-token", "", "")
		toolsetsUpdateToolsetProjectSlugInputFlag = toolsetsUpdateToolsetFlags.String("project-slug-input", "", "")

		toolsetsDeleteToolsetFlags                = flag.NewFlagSet("delete-toolset", flag.ExitOnError)
		toolsetsDeleteToolsetSlugFlag             = toolsetsDeleteToolsetFlags.String("slug", "REQUIRED", "")
		toolsetsDeleteToolsetSessionTokenFlag     = toolsetsDeleteToolsetFlags.String("session-token", "", "")
		toolsetsDeleteToolsetProjectSlugInputFlag = toolsetsDeleteToolsetFlags.String("project-slug-input", "", "")

		toolsetsGetToolsetFlags                = flag.NewFlagSet("get-toolset", flag.ExitOnError)
		toolsetsGetToolsetSlugFlag             = toolsetsGetToolsetFlags.String("slug", "REQUIRED", "")
		toolsetsGetToolsetSessionTokenFlag     = toolsetsGetToolsetFlags.String("session-token", "", "")
		toolsetsGetToolsetProjectSlugInputFlag = toolsetsGetToolsetFlags.String("project-slug-input", "", "")
	)
	assetsFlags.Usage = assetsUsage
	assetsUploadOpenAPIv3Flags.Usage = assetsUploadOpenAPIv3Usage

	authFlags.Usage = authUsage
	authCallbackFlags.Usage = authCallbackUsage
	authLoginFlags.Usage = authLoginUsage
	authSwitchScopesFlags.Usage = authSwitchScopesUsage
	authLogoutFlags.Usage = authLogoutUsage
	authInfoFlags.Usage = authInfoUsage

	deploymentsFlags.Usage = deploymentsUsage
	deploymentsGetDeploymentFlags.Usage = deploymentsGetDeploymentUsage
	deploymentsCreateDeploymentFlags.Usage = deploymentsCreateDeploymentUsage
	deploymentsEvolveFlags.Usage = deploymentsEvolveUsage
	deploymentsListDeploymentsFlags.Usage = deploymentsListDeploymentsUsage

	environmentsFlags.Usage = environmentsUsage
	environmentsCreateEnvironmentFlags.Usage = environmentsCreateEnvironmentUsage
	environmentsListEnvironmentsFlags.Usage = environmentsListEnvironmentsUsage
	environmentsUpdateEnvironmentFlags.Usage = environmentsUpdateEnvironmentUsage
	environmentsDeleteEnvironmentFlags.Usage = environmentsDeleteEnvironmentUsage

	keysFlags.Usage = keysUsage
	keysCreateKeyFlags.Usage = keysCreateKeyUsage
	keysListKeysFlags.Usage = keysListKeysUsage
	keysRevokeKeyFlags.Usage = keysRevokeKeyUsage

	toolsFlags.Usage = toolsUsage
	toolsListToolsFlags.Usage = toolsListToolsUsage

	instancesFlags.Usage = instancesUsage
	instancesGetInstanceFlags.Usage = instancesGetInstanceUsage

	toolsetsFlags.Usage = toolsetsUsage
	toolsetsCreateToolsetFlags.Usage = toolsetsCreateToolsetUsage
	toolsetsListToolsetsFlags.Usage = toolsetsListToolsetsUsage
	toolsetsUpdateToolsetFlags.Usage = toolsetsUpdateToolsetUsage
	toolsetsDeleteToolsetFlags.Usage = toolsetsDeleteToolsetUsage
	toolsetsGetToolsetFlags.Usage = toolsetsGetToolsetUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "assets":
			svcf = assetsFlags
		case "auth":
			svcf = authFlags
		case "deployments":
			svcf = deploymentsFlags
		case "environments":
			svcf = environmentsFlags
		case "keys":
			svcf = keysFlags
		case "tools":
			svcf = toolsFlags
		case "instances":
			svcf = instancesFlags
		case "toolsets":
			svcf = toolsetsFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "assets":
			switch epn {
			case "upload-open-ap-iv3":
				epf = assetsUploadOpenAPIv3Flags

			}

		case "auth":
			switch epn {
			case "callback":
				epf = authCallbackFlags

			case "login":
				epf = authLoginFlags

			case "switch-scopes":
				epf = authSwitchScopesFlags

			case "logout":
				epf = authLogoutFlags

			case "info":
				epf = authInfoFlags

			}

		case "deployments":
			switch epn {
			case "get-deployment":
				epf = deploymentsGetDeploymentFlags

			case "create-deployment":
				epf = deploymentsCreateDeploymentFlags

			case "evolve":
				epf = deploymentsEvolveFlags

			case "list-deployments":
				epf = deploymentsListDeploymentsFlags

			}

		case "environments":
			switch epn {
			case "create-environment":
				epf = environmentsCreateEnvironmentFlags

			case "list-environments":
				epf = environmentsListEnvironmentsFlags

			case "update-environment":
				epf = environmentsUpdateEnvironmentFlags

			case "delete-environment":
				epf = environmentsDeleteEnvironmentFlags

			}

		case "keys":
			switch epn {
			case "create-key":
				epf = keysCreateKeyFlags

			case "list-keys":
				epf = keysListKeysFlags

			case "revoke-key":
				epf = keysRevokeKeyFlags

			}

		case "tools":
			switch epn {
			case "list-tools":
				epf = toolsListToolsFlags

			}

		case "instances":
			switch epn {
			case "get-instance":
				epf = instancesGetInstanceFlags

			}

		case "toolsets":
			switch epn {
			case "create-toolset":
				epf = toolsetsCreateToolsetFlags

			case "list-toolsets":
				epf = toolsetsListToolsetsFlags

			case "update-toolset":
				epf = toolsetsUpdateToolsetFlags

			case "delete-toolset":
				epf = toolsetsDeleteToolsetFlags

			case "get-toolset":
				epf = toolsetsGetToolsetFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "assets":
			c := assetsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "upload-open-ap-iv3":
				endpoint = c.UploadOpenAPIv3()
				data, err = assetsc.BuildUploadOpenAPIv3Payload(*assetsUploadOpenAPIv3ContentTypeFlag, *assetsUploadOpenAPIv3ContentLengthFlag, *assetsUploadOpenAPIv3ProjectSlugInputFlag, *assetsUploadOpenAPIv3SessionTokenFlag)
				if err == nil {
					data, err = assetsc.BuildUploadOpenAPIv3StreamPayload(data, *assetsUploadOpenAPIv3StreamFlag)
				}
			}
		case "auth":
			c := authc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "callback":
				endpoint = c.Callback()
				data, err = authc.BuildCallbackPayload(*authCallbackIDTokenFlag)
			case "login":
				endpoint = c.Login()
			case "switch-scopes":
				endpoint = c.SwitchScopes()
				data, err = authc.BuildSwitchScopesPayload(*authSwitchScopesOrganizationIDFlag, *authSwitchScopesProjectIDFlag, *authSwitchScopesSessionTokenFlag)
			case "logout":
				endpoint = c.Logout()
				data, err = authc.BuildLogoutPayload(*authLogoutSessionTokenFlag)
			case "info":
				endpoint = c.Info()
				data, err = authc.BuildInfoPayload(*authInfoSessionTokenFlag)
			}
		case "deployments":
			c := deploymentsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get-deployment":
				endpoint = c.GetDeployment()
				data, err = deploymentsc.BuildGetDeploymentPayload(*deploymentsGetDeploymentIDFlag, *deploymentsGetDeploymentSessionTokenFlag, *deploymentsGetDeploymentProjectSlugInputFlag)
			case "create-deployment":
				endpoint = c.CreateDeployment()
				data, err = deploymentsc.BuildCreateDeploymentPayload(*deploymentsCreateDeploymentBodyFlag, *deploymentsCreateDeploymentSessionTokenFlag, *deploymentsCreateDeploymentProjectSlugInputFlag, *deploymentsCreateDeploymentIdempotencyKeyFlag)
			case "evolve":
				endpoint = c.Evolve()
				data, err = deploymentsc.BuildEvolvePayload(*deploymentsEvolveBodyFlag, *deploymentsEvolveSessionTokenFlag, *deploymentsEvolveProjectSlugInputFlag)
			case "list-deployments":
				endpoint = c.ListDeployments()
				data, err = deploymentsc.BuildListDeploymentsPayload(*deploymentsListDeploymentsCursorFlag, *deploymentsListDeploymentsSessionTokenFlag, *deploymentsListDeploymentsProjectSlugInputFlag)
			}
		case "environments":
			c := environmentsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create-environment":
				endpoint = c.CreateEnvironment()
				data, err = environmentsc.BuildCreateEnvironmentPayload(*environmentsCreateEnvironmentBodyFlag, *environmentsCreateEnvironmentSessionTokenFlag, *environmentsCreateEnvironmentProjectSlugInputFlag)
			case "list-environments":
				endpoint = c.ListEnvironments()
				data, err = environmentsc.BuildListEnvironmentsPayload(*environmentsListEnvironmentsSessionTokenFlag, *environmentsListEnvironmentsProjectSlugInputFlag)
			case "update-environment":
				endpoint = c.UpdateEnvironment()
				data, err = environmentsc.BuildUpdateEnvironmentPayload(*environmentsUpdateEnvironmentBodyFlag, *environmentsUpdateEnvironmentSlugFlag, *environmentsUpdateEnvironmentSessionTokenFlag, *environmentsUpdateEnvironmentProjectSlugInputFlag)
			case "delete-environment":
				endpoint = c.DeleteEnvironment()
				data, err = environmentsc.BuildDeleteEnvironmentPayload(*environmentsDeleteEnvironmentSlugFlag, *environmentsDeleteEnvironmentSessionTokenFlag, *environmentsDeleteEnvironmentProjectSlugInputFlag)
			}
		case "keys":
			c := keysc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create-key":
				endpoint = c.CreateKey()
				data, err = keysc.BuildCreateKeyPayload(*keysCreateKeyBodyFlag, *keysCreateKeySessionTokenFlag)
			case "list-keys":
				endpoint = c.ListKeys()
				data, err = keysc.BuildListKeysPayload(*keysListKeysSessionTokenFlag)
			case "revoke-key":
				endpoint = c.RevokeKey()
				data, err = keysc.BuildRevokeKeyPayload(*keysRevokeKeyIDFlag, *keysRevokeKeySessionTokenFlag)
			}
		case "tools":
			c := toolsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list-tools":
				endpoint = c.ListTools()
				data, err = toolsc.BuildListToolsPayload(*toolsListToolsCursorFlag, *toolsListToolsSessionTokenFlag, *toolsListToolsProjectSlugInputFlag)
			}
		case "instances":
			c := instancesc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get-instance":
				endpoint = c.GetInstance()
				data, err = instancesc.BuildGetInstancePayload(*instancesGetInstanceToolsetSlugFlag, *instancesGetInstanceEnvironmentSlugFlag, *instancesGetInstanceSessionTokenFlag, *instancesGetInstanceProjectSlugInputFlag, *instancesGetInstanceApikeyTokenFlag)
			}
		case "toolsets":
			c := toolsetsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create-toolset":
				endpoint = c.CreateToolset()
				data, err = toolsetsc.BuildCreateToolsetPayload(*toolsetsCreateToolsetBodyFlag, *toolsetsCreateToolsetSessionTokenFlag, *toolsetsCreateToolsetProjectSlugInputFlag)
			case "list-toolsets":
				endpoint = c.ListToolsets()
				data, err = toolsetsc.BuildListToolsetsPayload(*toolsetsListToolsetsSessionTokenFlag, *toolsetsListToolsetsProjectSlugInputFlag)
			case "update-toolset":
				endpoint = c.UpdateToolset()
				data, err = toolsetsc.BuildUpdateToolsetPayload(*toolsetsUpdateToolsetBodyFlag, *toolsetsUpdateToolsetSlugFlag, *toolsetsUpdateToolsetSessionTokenFlag, *toolsetsUpdateToolsetProjectSlugInputFlag)
			case "delete-toolset":
				endpoint = c.DeleteToolset()
				data, err = toolsetsc.BuildDeleteToolsetPayload(*toolsetsDeleteToolsetSlugFlag, *toolsetsDeleteToolsetSessionTokenFlag, *toolsetsDeleteToolsetProjectSlugInputFlag)
			case "get-toolset":
				endpoint = c.GetToolset()
				data, err = toolsetsc.BuildGetToolsetPayload(*toolsetsGetToolsetSlugFlag, *toolsetsGetToolsetSessionTokenFlag, *toolsetsGetToolsetProjectSlugInputFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// assetsUsage displays the usage of the assets command and its subcommands.
func assetsUsage() {
	fmt.Fprintf(os.Stderr, `Manages assets used by Gram projects.
Usage:
    %[1]s [globalflags] assets COMMAND [flags]

COMMAND:
    upload-open-ap-iv3: Upload an OpenAPI v3 document to Gram.

Additional help:
    %[1]s assets COMMAND --help
`, os.Args[0])
}
func assetsUploadOpenAPIv3Usage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] assets upload-open-ap-iv3 -content-type STRING -content-length INT64 -project-slug-input STRING -session-token STRING -stream STRING

Upload an OpenAPI v3 document to Gram.
    -content-type STRING: 
    -content-length INT64: 
    -project-slug-input STRING: 
    -session-token STRING: 
    -stream STRING: path to file containing the streamed request body

Example:
    %[1]s assets upload-open-ap-iv3 --content-type "Corporis labore." --content-length 3082955658720080765 --project-slug-input "Dolor deleniti porro." --session-token "Rerum ut reiciendis nisi et totam saepe." --stream "goa.png"
`, os.Args[0])
}

// authUsage displays the usage of the auth command and its subcommands.
func authUsage() {
	fmt.Fprintf(os.Stderr, `Managed auth for gram producers and dashboard.
Usage:
    %[1]s [globalflags] auth COMMAND [flags]

COMMAND:
    callback: Handles the authentication callback.
    login: Proxies to auth login through speakeasy oidc.
    switch-scopes: Switches the authentication scope to a different organization.
    logout: Logs out the current user by clearing their session.
    info: Provides information about the current authentication status.

Additional help:
    %[1]s auth COMMAND --help
`, os.Args[0])
}
func authCallbackUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth callback -id-token STRING

Handles the authentication callback.
    -id-token STRING: 

Example:
    %[1]s auth callback --id-token "Illo nobis enim quas dolorem et inventore."
`, os.Args[0])
}

func authLoginUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth login

Proxies to auth login through speakeasy oidc.

Example:
    %[1]s auth login
`, os.Args[0])
}

func authSwitchScopesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth switch-scopes -organization-id STRING -project-id STRING -session-token STRING

Switches the authentication scope to a different organization.
    -organization-id STRING: 
    -project-id STRING: 
    -session-token STRING: 

Example:
    %[1]s auth switch-scopes --organization-id "Voluptates dolore ut." --project-id "Culpa repellat nihil harum sit est libero." --session-token "Consequatur beatae sint aspernatur nesciunt similique."
`, os.Args[0])
}

func authLogoutUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth logout -session-token STRING

Logs out the current user by clearing their session.
    -session-token STRING: 

Example:
    %[1]s auth logout --session-token "Rerum eveniet dignissimos ut quo."
`, os.Args[0])
}

func authInfoUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth info -session-token STRING

Provides information about the current authentication status.
    -session-token STRING: 

Example:
    %[1]s auth info --session-token "Qui et autem vel eos."
`, os.Args[0])
}

// deploymentsUsage displays the usage of the deployments command and its
// subcommands.
func deploymentsUsage() {
	fmt.Fprintf(os.Stderr, `Manages deployments of tools from upstream sources.
Usage:
    %[1]s [globalflags] deployments COMMAND [flags]

COMMAND:
    get-deployment: Create a deployment to load tool definitions.
    create-deployment: Create a deployment to load tool definitions.
    evolve: Create a new deployment with an additional tool sources.
    list-deployments: List all deployments in descending order of creation.

Additional help:
    %[1]s deployments COMMAND --help
`, os.Args[0])
}
func deploymentsGetDeploymentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] deployments get-deployment -id STRING -session-token STRING -project-slug-input STRING

Create a deployment to load tool definitions.
    -id STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s deployments get-deployment --id "Adipisci sint eaque dolorum numquam molestias voluptatem." --session-token "Cumque voluptas odio impedit aut aut atque." --project-slug-input "Quaerat mollitia reiciendis magnam omnis."
`, os.Args[0])
}

func deploymentsCreateDeploymentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] deployments create-deployment -body JSON -session-token STRING -project-slug-input STRING -idempotency-key STRING

Create a deployment to load tool definitions.
    -body JSON: 
    -session-token STRING: 
    -project-slug-input STRING: 
    -idempotency-key STRING: 

Example:
    %[1]s deployments create-deployment --body '{
      "external_id": "bc5f4a555e933e6861d12edba4c2d87ef6caf8e6",
      "external_url": "Odio consequuntur enim molestiae et blanditiis fugit.",
      "github_pr": "1234",
      "github_repo": "speakeasyapi/gram",
      "github_sha": "f33e693e9e12552043bc0ec5c37f1b8a9e076161",
      "openapiv3_assets": [
         {
            "asset_id": "Voluptatem molestias aperiam molestias voluptatibus.",
            "name": "Soluta voluptatibus corrupti perferendis voluptatem maxime illo.",
            "slug": "krv"
         },
         {
            "asset_id": "Voluptatem molestias aperiam molestias voluptatibus.",
            "name": "Soluta voluptatibus corrupti perferendis voluptatem maxime illo.",
            "slug": "krv"
         },
         {
            "asset_id": "Voluptatem molestias aperiam molestias voluptatibus.",
            "name": "Soluta voluptatibus corrupti perferendis voluptatem maxime illo.",
            "slug": "krv"
         },
         {
            "asset_id": "Voluptatem molestias aperiam molestias voluptatibus.",
            "name": "Soluta voluptatibus corrupti perferendis voluptatem maxime illo.",
            "slug": "krv"
         }
      ],
      "packages": [
         {
            "name": "Eaque ex perferendis assumenda.",
            "version": "Delectus ex consequuntur est sit dolores non."
         },
         {
            "name": "Eaque ex perferendis assumenda.",
            "version": "Delectus ex consequuntur est sit dolores non."
         },
         {
            "name": "Eaque ex perferendis assumenda.",
            "version": "Delectus ex consequuntur est sit dolores non."
         }
      ]
   }' --session-token "Ipsum nesciunt natus amet est optio est." --project-slug-input "Blanditiis qui mollitia molestias iste mollitia consequatur." --idempotency-key "01jqq0ajmb4qh9eppz48dejr2m"
`, os.Args[0])
}

func deploymentsEvolveUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] deployments evolve -body JSON -session-token STRING -project-slug-input STRING

Create a new deployment with an additional tool sources.
    -body JSON: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s deployments evolve --body '{
      "add_openapiv3_assets": [
         {
            "asset_id": "Voluptatem molestias aperiam molestias voluptatibus.",
            "name": "Soluta voluptatibus corrupti perferendis voluptatem maxime illo.",
            "slug": "krv"
         },
         {
            "asset_id": "Voluptatem molestias aperiam molestias voluptatibus.",
            "name": "Soluta voluptatibus corrupti perferendis voluptatem maxime illo.",
            "slug": "krv"
         },
         {
            "asset_id": "Voluptatem molestias aperiam molestias voluptatibus.",
            "name": "Soluta voluptatibus corrupti perferendis voluptatem maxime illo.",
            "slug": "krv"
         },
         {
            "asset_id": "Voluptatem molestias aperiam molestias voluptatibus.",
            "name": "Soluta voluptatibus corrupti perferendis voluptatem maxime illo.",
            "slug": "krv"
         }
      ],
      "add_packages": [
         {
            "name": "Esse rerum iusto eos consequatur et.",
            "version": "Veniam sint eum porro et."
         },
         {
            "name": "Esse rerum iusto eos consequatur et.",
            "version": "Veniam sint eum porro et."
         },
         {
            "name": "Esse rerum iusto eos consequatur et.",
            "version": "Veniam sint eum porro et."
         }
      ],
      "deployment_id": "Quae ut fuga earum animi."
   }' --session-token "Laudantium laboriosam ut tempora qui." --project-slug-input "Voluptatem minima quia rerum."
`, os.Args[0])
}

func deploymentsListDeploymentsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] deployments list-deployments -cursor STRING -session-token STRING -project-slug-input STRING

List all deployments in descending order of creation.
    -cursor STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s deployments list-deployments --cursor "Itaque totam quae asperiores modi nobis dicta." --session-token "Voluptas eos." --project-slug-input "Necessitatibus qui repudiandae magni ea consequatur est."
`, os.Args[0])
}

// environmentsUsage displays the usage of the environments command and its
// subcommands.
func environmentsUsage() {
	fmt.Fprintf(os.Stderr, `Managing toolset environments.
Usage:
    %[1]s [globalflags] environments COMMAND [flags]

COMMAND:
    create-environment: Create a new environment
    list-environments: List all environments for an organization
    update-environment: Update an environment
    delete-environment: Delete an environment

Additional help:
    %[1]s environments COMMAND --help
`, os.Args[0])
}
func environmentsCreateEnvironmentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] environments create-environment -body JSON -session-token STRING -project-slug-input STRING

Create a new environment
    -body JSON: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s environments create-environment --body '{
      "description": "Et a sit voluptas ut.",
      "entries": [
         {
            "name": "Est alias adipisci deserunt ad vel.",
            "value": "Laudantium vel sit odit."
         },
         {
            "name": "Est alias adipisci deserunt ad vel.",
            "value": "Laudantium vel sit odit."
         }
      ],
      "name": "Laborum at.",
      "organization_id": "Sit enim fugiat reiciendis nisi ad excepturi."
   }' --session-token "Voluptatem quia." --project-slug-input "Nisi aliquid minima omnis sint eius."
`, os.Args[0])
}

func environmentsListEnvironmentsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] environments list-environments -session-token STRING -project-slug-input STRING

List all environments for an organization
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s environments list-environments --session-token "Sunt est qui officiis." --project-slug-input "Soluta nisi voluptatum modi."
`, os.Args[0])
}

func environmentsUpdateEnvironmentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] environments update-environment -body JSON -slug STRING -session-token STRING -project-slug-input STRING

Update an environment
    -body JSON: 
    -slug STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s environments update-environment --body '{
      "description": "Voluptatum sint animi eos omnis repellat aut.",
      "entries_to_remove": [
         "Qui harum eos repellendus.",
         "Est est quo qui dolor omnis.",
         "Fugit fugiat fuga quia fuga ipsa nihil.",
         "Aut nisi odio officiis."
      ],
      "entries_to_update": [
         {
            "name": "Est alias adipisci deserunt ad vel.",
            "value": "Laudantium vel sit odit."
         },
         {
            "name": "Est alias adipisci deserunt ad vel.",
            "value": "Laudantium vel sit odit."
         }
      ],
      "name": "Minus saepe qui id qui iusto."
   }' --slug "3eg" --session-token "Velit ab sit." --project-slug-input "Iste eum atque a accusamus."
`, os.Args[0])
}

func environmentsDeleteEnvironmentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] environments delete-environment -slug STRING -session-token STRING -project-slug-input STRING

Delete an environment
    -slug STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s environments delete-environment --slug "ic7" --session-token "Maiores aut similique qui consequatur est numquam." --project-slug-input "Quia quia voluptatum sed in et."
`, os.Args[0])
}

// keysUsage displays the usage of the keys command and its subcommands.
func keysUsage() {
	fmt.Fprintf(os.Stderr, `Managing system api keys.
Usage:
    %[1]s [globalflags] keys COMMAND [flags]

COMMAND:
    create-key: Create a new api key
    list-keys: List all api keys for an organization
    revoke-key: Revoke a api key

Additional help:
    %[1]s keys COMMAND --help
`, os.Args[0])
}
func keysCreateKeyUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] keys create-key -body JSON -session-token STRING

Create a new api key
    -body JSON: 
    -session-token STRING: 

Example:
    %[1]s keys create-key --body '{
      "name": "Iusto ut."
   }' --session-token "Qui occaecati optio ea qui."
`, os.Args[0])
}

func keysListKeysUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] keys list-keys -session-token STRING

List all api keys for an organization
    -session-token STRING: 

Example:
    %[1]s keys list-keys --session-token "Similique nulla reiciendis eaque veniam ducimus."
`, os.Args[0])
}

func keysRevokeKeyUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] keys revoke-key -id STRING -session-token STRING

Revoke a api key
    -id STRING: 
    -session-token STRING: 

Example:
    %[1]s keys revoke-key --id "Et accusantium soluta incidunt veniam sunt." --session-token "Et qui in illum dolor quia."
`, os.Args[0])
}

// toolsUsage displays the usage of the tools command and its subcommands.
func toolsUsage() {
	fmt.Fprintf(os.Stderr, `Dashboard API for interacting with tools.
Usage:
    %[1]s [globalflags] tools COMMAND [flags]

COMMAND:
    list-tools: List all tools for a project

Additional help:
    %[1]s tools COMMAND --help
`, os.Args[0])
}
func toolsListToolsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] tools list-tools -cursor STRING -session-token STRING -project-slug-input STRING

List all tools for a project
    -cursor STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s tools list-tools --cursor "Et neque expedita mollitia est quasi." --session-token "Voluptatem aut nemo quisquam officia ut." --project-slug-input "Aut inventore vero vero enim incidunt."
`, os.Args[0])
}

// instancesUsage displays the usage of the instances command and its
// subcommands.
func instancesUsage() {
	fmt.Fprintf(os.Stderr, `Consumer APIs for interacting with all relevant data for an instance of a toolset and environment.
Usage:
    %[1]s [globalflags] instances COMMAND [flags]

COMMAND:
    get-instance: Load all relevant data for an instance of a toolset and environment

Additional help:
    %[1]s instances COMMAND --help
`, os.Args[0])
}
func instancesGetInstanceUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] instances get-instance -toolset-slug STRING -environment-slug STRING -session-token STRING -project-slug-input STRING -apikey-token STRING

Load all relevant data for an instance of a toolset and environment
    -toolset-slug STRING: 
    -environment-slug STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 
    -apikey-token STRING: 

Example:
    %[1]s instances get-instance --toolset-slug "or3" --environment-slug "hl6" --session-token "Harum possimus voluptatem unde voluptates." --project-slug-input "Qui adipisci odit." --apikey-token "Ut quas nesciunt."
`, os.Args[0])
}

// toolsetsUsage displays the usage of the toolsets command and its subcommands.
func toolsetsUsage() {
	fmt.Fprintf(os.Stderr, `Managed toolsets for gram AI consumers.
Usage:
    %[1]s [globalflags] toolsets COMMAND [flags]

COMMAND:
    create-toolset: Create a new toolset with associated tools
    list-toolsets: List all toolsets for a project
    update-toolset: Update a toolset's properties including name, description, and HTTP tools
    delete-toolset: Delete a toolset by its ID
    get-toolset: Get detailed information about a toolset including full HTTP tool definitions

Additional help:
    %[1]s toolsets COMMAND --help
`, os.Args[0])
}
func toolsetsCreateToolsetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] toolsets create-toolset -body JSON -session-token STRING -project-slug-input STRING

Create a new toolset with associated tools
    -body JSON: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s toolsets create-toolset --body '{
      "default_environment_slug": "zwd",
      "description": "Rerum facilis esse ut.",
      "http_tool_names": [
         "Saepe delectus vel suscipit mollitia voluptatem dolorem.",
         "Deleniti iste aliquid commodi dolorem.",
         "Aut natus porro.",
         "Rerum eum."
      ],
      "name": "Molestiae sunt qui consequatur assumenda aut quia."
   }' --session-token "Quas ipsa consequatur velit in." --project-slug-input "Quos rerum aut ut ipsum atque."
`, os.Args[0])
}

func toolsetsListToolsetsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] toolsets list-toolsets -session-token STRING -project-slug-input STRING

List all toolsets for a project
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s toolsets list-toolsets --session-token "Ipsa voluptatum consequatur atque dolor odit." --project-slug-input "Facilis voluptatum rerum."
`, os.Args[0])
}

func toolsetsUpdateToolsetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] toolsets update-toolset -body JSON -slug STRING -session-token STRING -project-slug-input STRING

Update a toolset's properties including name, description, and HTTP tools
    -body JSON: 
    -slug STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s toolsets update-toolset --body '{
      "default_environment_slug": "o6f",
      "description": "Laudantium inventore laboriosam nulla repellendus quia pariatur.",
      "http_tool_names": [
         "Quibusdam non enim doloremque nulla omnis est.",
         "Quis dignissimos molestias quo quia dolorem."
      ],
      "name": "Similique veniam qui eaque et."
   }' --slug "gsj" --session-token "Et pariatur." --project-slug-input "Dolores non."
`, os.Args[0])
}

func toolsetsDeleteToolsetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] toolsets delete-toolset -slug STRING -session-token STRING -project-slug-input STRING

Delete a toolset by its ID
    -slug STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s toolsets delete-toolset --slug "e9d" --session-token "Non impedit amet id." --project-slug-input "Dolores sed quasi aut quo."
`, os.Args[0])
}

func toolsetsGetToolsetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] toolsets get-toolset -slug STRING -session-token STRING -project-slug-input STRING

Get detailed information about a toolset including full HTTP tool definitions
    -slug STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s toolsets get-toolset --slug "ydc" --session-token "Et aut ut." --project-slug-input "Nihil repellat ut sed expedita qui voluptatem."
`, os.Args[0])
}
