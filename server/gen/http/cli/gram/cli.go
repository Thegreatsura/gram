// Code generated by goa v3.20.0, DO NOT EDIT.
//
// gram HTTP client CLI support package
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	authc "github.com/speakeasy-api/gram/gen/http/auth/client"
	deploymentsc "github.com/speakeasy-api/gram/gen/http/deployments/client"
	systemc "github.com/speakeasy-api/gram/gen/http/system/client"
	toolsetsc "github.com/speakeasy-api/gram/gen/http/toolsets/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `auth (callback|switch-scopes|logout|info)
deployments (get-deployment|create-deployment|list-deployments)
system health-check
toolsets (create-toolset|list-toolsets|update-toolset|get-toolset-details)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` auth callback --shared-token "Quae et consequatur deleniti similique."` + "\n" +
		os.Args[0] + ` deployments get-deployment --id "Aut impedit recusandae facilis." --gram-session-token "Et eaque magni."` + "\n" +
		os.Args[0] + ` system health-check` + "\n" +
		os.Args[0] + ` toolsets create-toolset --body '{
      "description": "Officia voluptas aspernatur quibusdam.",
      "http_tool_ids": [
         "Consequatur itaque.",
         "Modi aliquam aut provident incidunt suscipit."
      ],
      "name": "Rerum animi expedita."
   }' --gram-session-token "Minus ea est."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		authFlags = flag.NewFlagSet("auth", flag.ContinueOnError)

		authCallbackFlags           = flag.NewFlagSet("callback", flag.ExitOnError)
		authCallbackSharedTokenFlag = authCallbackFlags.String("shared-token", "REQUIRED", "")

		authSwitchScopesFlags                = flag.NewFlagSet("switch-scopes", flag.ExitOnError)
		authSwitchScopesOrganizationIDFlag   = authSwitchScopesFlags.String("organization-id", "", "")
		authSwitchScopesProjectIDFlag        = authSwitchScopesFlags.String("project-id", "", "")
		authSwitchScopesGramSessionTokenFlag = authSwitchScopesFlags.String("gram-session-token", "", "")

		authLogoutFlags                = flag.NewFlagSet("logout", flag.ExitOnError)
		authLogoutGramSessionTokenFlag = authLogoutFlags.String("gram-session-token", "", "")

		authInfoFlags                = flag.NewFlagSet("info", flag.ExitOnError)
		authInfoGramSessionTokenFlag = authInfoFlags.String("gram-session-token", "", "")

		deploymentsFlags = flag.NewFlagSet("deployments", flag.ContinueOnError)

		deploymentsGetDeploymentFlags                = flag.NewFlagSet("get-deployment", flag.ExitOnError)
		deploymentsGetDeploymentIDFlag               = deploymentsGetDeploymentFlags.String("id", "REQUIRED", "")
		deploymentsGetDeploymentGramSessionTokenFlag = deploymentsGetDeploymentFlags.String("gram-session-token", "", "")

		deploymentsCreateDeploymentFlags                = flag.NewFlagSet("create-deployment", flag.ExitOnError)
		deploymentsCreateDeploymentBodyFlag             = deploymentsCreateDeploymentFlags.String("body", "REQUIRED", "")
		deploymentsCreateDeploymentGramSessionTokenFlag = deploymentsCreateDeploymentFlags.String("gram-session-token", "", "")

		deploymentsListDeploymentsFlags                = flag.NewFlagSet("list-deployments", flag.ExitOnError)
		deploymentsListDeploymentsCursorFlag           = deploymentsListDeploymentsFlags.String("cursor", "", "")
		deploymentsListDeploymentsLimitFlag            = deploymentsListDeploymentsFlags.String("limit", "10", "")
		deploymentsListDeploymentsGramSessionTokenFlag = deploymentsListDeploymentsFlags.String("gram-session-token", "", "")

		systemFlags = flag.NewFlagSet("system", flag.ContinueOnError)

		systemHealthCheckFlags = flag.NewFlagSet("health-check", flag.ExitOnError)

		toolsetsFlags = flag.NewFlagSet("toolsets", flag.ContinueOnError)

		toolsetsCreateToolsetFlags                = flag.NewFlagSet("create-toolset", flag.ExitOnError)
		toolsetsCreateToolsetBodyFlag             = toolsetsCreateToolsetFlags.String("body", "REQUIRED", "")
		toolsetsCreateToolsetGramSessionTokenFlag = toolsetsCreateToolsetFlags.String("gram-session-token", "", "")

		toolsetsListToolsetsFlags                = flag.NewFlagSet("list-toolsets", flag.ExitOnError)
		toolsetsListToolsetsGramSessionTokenFlag = toolsetsListToolsetsFlags.String("gram-session-token", "", "")

		toolsetsUpdateToolsetFlags                = flag.NewFlagSet("update-toolset", flag.ExitOnError)
		toolsetsUpdateToolsetBodyFlag             = toolsetsUpdateToolsetFlags.String("body", "REQUIRED", "")
		toolsetsUpdateToolsetIDFlag               = toolsetsUpdateToolsetFlags.String("id", "REQUIRED", "The ID of the toolset to update")
		toolsetsUpdateToolsetGramSessionTokenFlag = toolsetsUpdateToolsetFlags.String("gram-session-token", "", "")

		toolsetsGetToolsetDetailsFlags                = flag.NewFlagSet("get-toolset-details", flag.ExitOnError)
		toolsetsGetToolsetDetailsIDFlag               = toolsetsGetToolsetDetailsFlags.String("id", "REQUIRED", "The ID of the toolset")
		toolsetsGetToolsetDetailsGramSessionTokenFlag = toolsetsGetToolsetDetailsFlags.String("gram-session-token", "", "")
	)
	authFlags.Usage = authUsage
	authCallbackFlags.Usage = authCallbackUsage
	authSwitchScopesFlags.Usage = authSwitchScopesUsage
	authLogoutFlags.Usage = authLogoutUsage
	authInfoFlags.Usage = authInfoUsage

	deploymentsFlags.Usage = deploymentsUsage
	deploymentsGetDeploymentFlags.Usage = deploymentsGetDeploymentUsage
	deploymentsCreateDeploymentFlags.Usage = deploymentsCreateDeploymentUsage
	deploymentsListDeploymentsFlags.Usage = deploymentsListDeploymentsUsage

	systemFlags.Usage = systemUsage
	systemHealthCheckFlags.Usage = systemHealthCheckUsage

	toolsetsFlags.Usage = toolsetsUsage
	toolsetsCreateToolsetFlags.Usage = toolsetsCreateToolsetUsage
	toolsetsListToolsetsFlags.Usage = toolsetsListToolsetsUsage
	toolsetsUpdateToolsetFlags.Usage = toolsetsUpdateToolsetUsage
	toolsetsGetToolsetDetailsFlags.Usage = toolsetsGetToolsetDetailsUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "auth":
			svcf = authFlags
		case "deployments":
			svcf = deploymentsFlags
		case "system":
			svcf = systemFlags
		case "toolsets":
			svcf = toolsetsFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "auth":
			switch epn {
			case "callback":
				epf = authCallbackFlags

			case "switch-scopes":
				epf = authSwitchScopesFlags

			case "logout":
				epf = authLogoutFlags

			case "info":
				epf = authInfoFlags

			}

		case "deployments":
			switch epn {
			case "get-deployment":
				epf = deploymentsGetDeploymentFlags

			case "create-deployment":
				epf = deploymentsCreateDeploymentFlags

			case "list-deployments":
				epf = deploymentsListDeploymentsFlags

			}

		case "system":
			switch epn {
			case "health-check":
				epf = systemHealthCheckFlags

			}

		case "toolsets":
			switch epn {
			case "create-toolset":
				epf = toolsetsCreateToolsetFlags

			case "list-toolsets":
				epf = toolsetsListToolsetsFlags

			case "update-toolset":
				epf = toolsetsUpdateToolsetFlags

			case "get-toolset-details":
				epf = toolsetsGetToolsetDetailsFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "auth":
			c := authc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "callback":
				endpoint = c.Callback()
				data, err = authc.BuildCallbackPayload(*authCallbackSharedTokenFlag)
			case "switch-scopes":
				endpoint = c.SwitchScopes()
				data, err = authc.BuildSwitchScopesPayload(*authSwitchScopesOrganizationIDFlag, *authSwitchScopesProjectIDFlag, *authSwitchScopesGramSessionTokenFlag)
			case "logout":
				endpoint = c.Logout()
				data, err = authc.BuildLogoutPayload(*authLogoutGramSessionTokenFlag)
			case "info":
				endpoint = c.Info()
				data, err = authc.BuildInfoPayload(*authInfoGramSessionTokenFlag)
			}
		case "deployments":
			c := deploymentsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get-deployment":
				endpoint = c.GetDeployment()
				data, err = deploymentsc.BuildGetDeploymentPayload(*deploymentsGetDeploymentIDFlag, *deploymentsGetDeploymentGramSessionTokenFlag)
			case "create-deployment":
				endpoint = c.CreateDeployment()
				data, err = deploymentsc.BuildCreateDeploymentPayload(*deploymentsCreateDeploymentBodyFlag, *deploymentsCreateDeploymentGramSessionTokenFlag)
			case "list-deployments":
				endpoint = c.ListDeployments()
				data, err = deploymentsc.BuildListDeploymentsPayload(*deploymentsListDeploymentsCursorFlag, *deploymentsListDeploymentsLimitFlag, *deploymentsListDeploymentsGramSessionTokenFlag)
			}
		case "system":
			c := systemc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "health-check":
				endpoint = c.HealthCheck()
			}
		case "toolsets":
			c := toolsetsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create-toolset":
				endpoint = c.CreateToolset()
				data, err = toolsetsc.BuildCreateToolsetPayload(*toolsetsCreateToolsetBodyFlag, *toolsetsCreateToolsetGramSessionTokenFlag)
			case "list-toolsets":
				endpoint = c.ListToolsets()
				data, err = toolsetsc.BuildListToolsetsPayload(*toolsetsListToolsetsGramSessionTokenFlag)
			case "update-toolset":
				endpoint = c.UpdateToolset()
				data, err = toolsetsc.BuildUpdateToolsetPayload(*toolsetsUpdateToolsetBodyFlag, *toolsetsUpdateToolsetIDFlag, *toolsetsUpdateToolsetGramSessionTokenFlag)
			case "get-toolset-details":
				endpoint = c.GetToolsetDetails()
				data, err = toolsetsc.BuildGetToolsetDetailsPayload(*toolsetsGetToolsetDetailsIDFlag, *toolsetsGetToolsetDetailsGramSessionTokenFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// authUsage displays the usage of the auth command and its subcommands.
func authUsage() {
	fmt.Fprintf(os.Stderr, `Managed auth for gram producers and dashboard.
Usage:
    %[1]s [globalflags] auth COMMAND [flags]

COMMAND:
    callback: Handles the authentication callback.
    switch-scopes: Switches the authentication scope to a different organization.
    logout: Logs out the current user by clearing their session.
    info: Provides information about the current authentication status.

Additional help:
    %[1]s auth COMMAND --help
`, os.Args[0])
}
func authCallbackUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth callback -shared-token STRING

Handles the authentication callback.
    -shared-token STRING: 

Example:
    %[1]s auth callback --shared-token "Quae et consequatur deleniti similique."
`, os.Args[0])
}

func authSwitchScopesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth switch-scopes -organization-id STRING -project-id STRING -gram-session-token STRING

Switches the authentication scope to a different organization.
    -organization-id STRING: 
    -project-id STRING: 
    -gram-session-token STRING: 

Example:
    %[1]s auth switch-scopes --organization-id "Maxime eos." --project-id "Non quisquam sunt dolores." --gram-session-token "Vel odio ipsam voluptatum omnis."
`, os.Args[0])
}

func authLogoutUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth logout -gram-session-token STRING

Logs out the current user by clearing their session.
    -gram-session-token STRING: 

Example:
    %[1]s auth logout --gram-session-token "Voluptate deserunt id perferendis voluptatum error excepturi."
`, os.Args[0])
}

func authInfoUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth info -gram-session-token STRING

Provides information about the current authentication status.
    -gram-session-token STRING: 

Example:
    %[1]s auth info --gram-session-token "Quis enim atque consequatur."
`, os.Args[0])
}

// deploymentsUsage displays the usage of the deployments command and its
// subcommands.
func deploymentsUsage() {
	fmt.Fprintf(os.Stderr, `Manages deployments of tools from upstream sources.
Usage:
    %[1]s [globalflags] deployments COMMAND [flags]

COMMAND:
    get-deployment: Create a deployment to load tool definitions.
    create-deployment: Create a deployment to load tool definitions.
    list-deployments: List all deployments in descending order of creation.

Additional help:
    %[1]s deployments COMMAND --help
`, os.Args[0])
}
func deploymentsGetDeploymentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] deployments get-deployment -id STRING -gram-session-token STRING

Create a deployment to load tool definitions.
    -id STRING: 
    -gram-session-token STRING: 

Example:
    %[1]s deployments get-deployment --id "Aut impedit recusandae facilis." --gram-session-token "Et eaque magni."
`, os.Args[0])
}

func deploymentsCreateDeploymentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] deployments create-deployment -body JSON -gram-session-token STRING

Create a deployment to load tool definitions.
    -body JSON: 
    -gram-session-token STRING: 

Example:
    %[1]s deployments create-deployment --body '{
      "external_id": "bc5f4a555e933e6861d12edba4c2d87ef6caf8e6",
      "external_url": "https://github.com/golang/go/commit/bc5f4a555e933e6861d12edba4c2d87ef6caf8e6"
   }' --gram-session-token "Et ipsum repellendus."
`, os.Args[0])
}

func deploymentsListDeploymentsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] deployments list-deployments -cursor STRING -limit INT -gram-session-token STRING

List all deployments in descending order of creation.
    -cursor STRING: 
    -limit INT: 
    -gram-session-token STRING: 

Example:
    %[1]s deployments list-deployments --cursor "Esse voluptas modi laudantium." --limit 52 --gram-session-token "Ex ipsum saepe quis et."
`, os.Args[0])
}

// systemUsage displays the usage of the system command and its subcommands.
func systemUsage() {
	fmt.Fprintf(os.Stderr, `Exposes service health and status information.
Usage:
    %[1]s [globalflags] system COMMAND [flags]

COMMAND:
    health-check: Check the health of the service.

Additional help:
    %[1]s system COMMAND --help
`, os.Args[0])
}
func systemHealthCheckUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] system health-check

Check the health of the service.

Example:
    %[1]s system health-check
`, os.Args[0])
}

// toolsetsUsage displays the usage of the toolsets command and its subcommands.
func toolsetsUsage() {
	fmt.Fprintf(os.Stderr, `Managed toolsets for gram AI consumers.
Usage:
    %[1]s [globalflags] toolsets COMMAND [flags]

COMMAND:
    create-toolset: Create a new toolset with associated tools
    list-toolsets: List all toolsets for a project
    update-toolset: Update a toolset's properties including name, description, and HTTP tools
    get-toolset-details: Get detailed information about a toolset including full HTTP tool definitions

Additional help:
    %[1]s toolsets COMMAND --help
`, os.Args[0])
}
func toolsetsCreateToolsetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] toolsets create-toolset -body JSON -gram-session-token STRING

Create a new toolset with associated tools
    -body JSON: 
    -gram-session-token STRING: 

Example:
    %[1]s toolsets create-toolset --body '{
      "description": "Officia voluptas aspernatur quibusdam.",
      "http_tool_ids": [
         "Consequatur itaque.",
         "Modi aliquam aut provident incidunt suscipit."
      ],
      "name": "Rerum animi expedita."
   }' --gram-session-token "Minus ea est."
`, os.Args[0])
}

func toolsetsListToolsetsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] toolsets list-toolsets -gram-session-token STRING

List all toolsets for a project
    -gram-session-token STRING: 

Example:
    %[1]s toolsets list-toolsets --gram-session-token "Reprehenderit quia doloribus pariatur minus laudantium."
`, os.Args[0])
}

func toolsetsUpdateToolsetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] toolsets update-toolset -body JSON -id STRING -gram-session-token STRING

Update a toolset's properties including name, description, and HTTP tools
    -body JSON: 
    -id STRING: The ID of the toolset to update
    -gram-session-token STRING: 

Example:
    %[1]s toolsets update-toolset --body '{
      "description": "Quaerat illo qui et.",
      "http_tool_ids_to_add": [
         "Dolores ipsum amet perspiciatis.",
         "Et dignissimos veniam vel.",
         "Iste id suscipit corrupti ea et quaerat."
      ],
      "http_tool_ids_to_remove": [
         "Molestias corrupti voluptas.",
         "Dolor nisi nesciunt et dolores.",
         "Aut ipsam voluptate non iusto et ut."
      ],
      "name": "Quos quis fugit."
   }' --id "Et voluptatum." --gram-session-token "Autem quasi vel."
`, os.Args[0])
}

func toolsetsGetToolsetDetailsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] toolsets get-toolset-details -id STRING -gram-session-token STRING

Get detailed information about a toolset including full HTTP tool definitions
    -id STRING: The ID of the toolset
    -gram-session-token STRING: 

Example:
    %[1]s toolsets get-toolset-details --id "Fugit perferendis libero sint ut." --gram-session-token "Aut saepe vel voluptatum nisi dolorem."
`, os.Args[0])
}
