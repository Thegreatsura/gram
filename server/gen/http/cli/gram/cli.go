// Code generated by goa v3.21.1, DO NOT EDIT.
//
// gram HTTP client CLI support package
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	assetsc "github.com/speakeasy-api/gram/gen/http/assets/client"
	authc "github.com/speakeasy-api/gram/gen/http/auth/client"
	chatc "github.com/speakeasy-api/gram/gen/http/chat/client"
	deploymentsc "github.com/speakeasy-api/gram/gen/http/deployments/client"
	domainsc "github.com/speakeasy-api/gram/gen/http/domains/client"
	environmentsc "github.com/speakeasy-api/gram/gen/http/environments/client"
	instancesc "github.com/speakeasy-api/gram/gen/http/instances/client"
	integrationsc "github.com/speakeasy-api/gram/gen/http/integrations/client"
	keysc "github.com/speakeasy-api/gram/gen/http/keys/client"
	packagesc "github.com/speakeasy-api/gram/gen/http/packages/client"
	projectsc "github.com/speakeasy-api/gram/gen/http/projects/client"
	slackc "github.com/speakeasy-api/gram/gen/http/slack/client"
	templatesc "github.com/speakeasy-api/gram/gen/http/templates/client"
	toolsc "github.com/speakeasy-api/gram/gen/http/tools/client"
	toolsetsc "github.com/speakeasy-api/gram/gen/http/toolsets/client"
	variationsc "github.com/speakeasy-api/gram/gen/http/variations/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `assets (serve-image|upload-image|upload-open-ap-iv3)
auth (callback|login|switch-scopes|logout|register|info)
chat (list-chats|load-chat)
deployments (get-deployment|get-latest-deployment|create-deployment|evolve|list-deployments|get-deployment-logs)
domains (get-domain|create-domain|delete-domain)
environments (create-environment|list-environments|update-environment|delete-environment)
instances get-instance
integrations (get|list)
keys (create-key|list-keys|revoke-key)
packages (create-package|update-package|list-packages|list-versions|publish)
projects (create-project|list-projects)
slack (callback|login|get-slack-connection|update-slack-connection|delete-slack-connection)
templates (create-template|update-template|get-template|list-templates|delete-template|render-template)
tools list-tools
toolsets (create-toolset|list-toolsets|update-toolset|delete-toolset|get-toolset|check-mcp-slug-availability)
variations (upsert-global|delete-global|list-global)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` assets serve-image --id "Ullam expedita totam quos fugit sed consequatur." --session-token "Officia error distinctio quia commodi ad."` + "\n" +
		os.Args[0] + ` auth callback --id-token "Iste ex incidunt et deleniti qui quasi."` + "\n" +
		os.Args[0] + ` chat list-chats --session-token "A dolores labore accusamus non qui optio." --project-slug-input "Earum dolorum ipsam enim temporibus aut omnis."` + "\n" +
		os.Args[0] + ` deployments get-deployment --id "Molestiae impedit voluptas veritatis minima dicta." --apikey-token "Quaerat voluptas mollitia hic repellendus in enim." --session-token "Ea provident ut id hic quas aperiam." --project-slug-input "Exercitationem eaque harum asperiores qui."` + "\n" +
		os.Args[0] + ` domains get-domain --session-token "Iste est saepe." --project-slug-input "Reiciendis ut alias a at."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		assetsFlags = flag.NewFlagSet("assets", flag.ContinueOnError)

		assetsServeImageFlags            = flag.NewFlagSet("serve-image", flag.ExitOnError)
		assetsServeImageIDFlag           = assetsServeImageFlags.String("id", "REQUIRED", "")
		assetsServeImageSessionTokenFlag = assetsServeImageFlags.String("session-token", "", "")

		assetsUploadImageFlags                = flag.NewFlagSet("upload-image", flag.ExitOnError)
		assetsUploadImageContentTypeFlag      = assetsUploadImageFlags.String("content-type", "REQUIRED", "")
		assetsUploadImageContentLengthFlag    = assetsUploadImageFlags.String("content-length", "REQUIRED", "")
		assetsUploadImageApikeyTokenFlag      = assetsUploadImageFlags.String("apikey-token", "", "")
		assetsUploadImageProjectSlugInputFlag = assetsUploadImageFlags.String("project-slug-input", "", "")
		assetsUploadImageSessionTokenFlag     = assetsUploadImageFlags.String("session-token", "", "")
		assetsUploadImageStreamFlag           = assetsUploadImageFlags.String("stream", "REQUIRED", "path to file containing the streamed request body")

		assetsUploadOpenAPIv3Flags                = flag.NewFlagSet("upload-open-ap-iv3", flag.ExitOnError)
		assetsUploadOpenAPIv3ContentTypeFlag      = assetsUploadOpenAPIv3Flags.String("content-type", "REQUIRED", "")
		assetsUploadOpenAPIv3ContentLengthFlag    = assetsUploadOpenAPIv3Flags.String("content-length", "REQUIRED", "")
		assetsUploadOpenAPIv3ApikeyTokenFlag      = assetsUploadOpenAPIv3Flags.String("apikey-token", "", "")
		assetsUploadOpenAPIv3ProjectSlugInputFlag = assetsUploadOpenAPIv3Flags.String("project-slug-input", "", "")
		assetsUploadOpenAPIv3SessionTokenFlag     = assetsUploadOpenAPIv3Flags.String("session-token", "", "")
		assetsUploadOpenAPIv3StreamFlag           = assetsUploadOpenAPIv3Flags.String("stream", "REQUIRED", "path to file containing the streamed request body")

		authFlags = flag.NewFlagSet("auth", flag.ContinueOnError)

		authCallbackFlags       = flag.NewFlagSet("callback", flag.ExitOnError)
		authCallbackIDTokenFlag = authCallbackFlags.String("id-token", "REQUIRED", "")

		authLoginFlags = flag.NewFlagSet("login", flag.ExitOnError)

		authSwitchScopesFlags              = flag.NewFlagSet("switch-scopes", flag.ExitOnError)
		authSwitchScopesOrganizationIDFlag = authSwitchScopesFlags.String("organization-id", "", "")
		authSwitchScopesProjectIDFlag      = authSwitchScopesFlags.String("project-id", "", "")
		authSwitchScopesSessionTokenFlag   = authSwitchScopesFlags.String("session-token", "", "")

		authLogoutFlags            = flag.NewFlagSet("logout", flag.ExitOnError)
		authLogoutSessionTokenFlag = authLogoutFlags.String("session-token", "", "")

		authRegisterFlags            = flag.NewFlagSet("register", flag.ExitOnError)
		authRegisterBodyFlag         = authRegisterFlags.String("body", "REQUIRED", "")
		authRegisterSessionTokenFlag = authRegisterFlags.String("session-token", "", "")

		authInfoFlags            = flag.NewFlagSet("info", flag.ExitOnError)
		authInfoSessionTokenFlag = authInfoFlags.String("session-token", "", "")

		chatFlags = flag.NewFlagSet("chat", flag.ContinueOnError)

		chatListChatsFlags                = flag.NewFlagSet("list-chats", flag.ExitOnError)
		chatListChatsSessionTokenFlag     = chatListChatsFlags.String("session-token", "", "")
		chatListChatsProjectSlugInputFlag = chatListChatsFlags.String("project-slug-input", "", "")

		chatLoadChatFlags                = flag.NewFlagSet("load-chat", flag.ExitOnError)
		chatLoadChatIDFlag               = chatLoadChatFlags.String("id", "REQUIRED", "")
		chatLoadChatSessionTokenFlag     = chatLoadChatFlags.String("session-token", "", "")
		chatLoadChatProjectSlugInputFlag = chatLoadChatFlags.String("project-slug-input", "", "")

		deploymentsFlags = flag.NewFlagSet("deployments", flag.ContinueOnError)

		deploymentsGetDeploymentFlags                = flag.NewFlagSet("get-deployment", flag.ExitOnError)
		deploymentsGetDeploymentIDFlag               = deploymentsGetDeploymentFlags.String("id", "REQUIRED", "")
		deploymentsGetDeploymentApikeyTokenFlag      = deploymentsGetDeploymentFlags.String("apikey-token", "", "")
		deploymentsGetDeploymentSessionTokenFlag     = deploymentsGetDeploymentFlags.String("session-token", "", "")
		deploymentsGetDeploymentProjectSlugInputFlag = deploymentsGetDeploymentFlags.String("project-slug-input", "", "")

		deploymentsGetLatestDeploymentFlags                = flag.NewFlagSet("get-latest-deployment", flag.ExitOnError)
		deploymentsGetLatestDeploymentApikeyTokenFlag      = deploymentsGetLatestDeploymentFlags.String("apikey-token", "", "")
		deploymentsGetLatestDeploymentSessionTokenFlag     = deploymentsGetLatestDeploymentFlags.String("session-token", "", "")
		deploymentsGetLatestDeploymentProjectSlugInputFlag = deploymentsGetLatestDeploymentFlags.String("project-slug-input", "", "")

		deploymentsCreateDeploymentFlags                = flag.NewFlagSet("create-deployment", flag.ExitOnError)
		deploymentsCreateDeploymentBodyFlag             = deploymentsCreateDeploymentFlags.String("body", "REQUIRED", "")
		deploymentsCreateDeploymentApikeyTokenFlag      = deploymentsCreateDeploymentFlags.String("apikey-token", "", "")
		deploymentsCreateDeploymentSessionTokenFlag     = deploymentsCreateDeploymentFlags.String("session-token", "", "")
		deploymentsCreateDeploymentProjectSlugInputFlag = deploymentsCreateDeploymentFlags.String("project-slug-input", "", "")
		deploymentsCreateDeploymentIdempotencyKeyFlag   = deploymentsCreateDeploymentFlags.String("idempotency-key", "REQUIRED", "")

		deploymentsEvolveFlags                = flag.NewFlagSet("evolve", flag.ExitOnError)
		deploymentsEvolveBodyFlag             = deploymentsEvolveFlags.String("body", "REQUIRED", "")
		deploymentsEvolveApikeyTokenFlag      = deploymentsEvolveFlags.String("apikey-token", "", "")
		deploymentsEvolveSessionTokenFlag     = deploymentsEvolveFlags.String("session-token", "", "")
		deploymentsEvolveProjectSlugInputFlag = deploymentsEvolveFlags.String("project-slug-input", "", "")

		deploymentsListDeploymentsFlags                = flag.NewFlagSet("list-deployments", flag.ExitOnError)
		deploymentsListDeploymentsCursorFlag           = deploymentsListDeploymentsFlags.String("cursor", "", "")
		deploymentsListDeploymentsApikeyTokenFlag      = deploymentsListDeploymentsFlags.String("apikey-token", "", "")
		deploymentsListDeploymentsSessionTokenFlag     = deploymentsListDeploymentsFlags.String("session-token", "", "")
		deploymentsListDeploymentsProjectSlugInputFlag = deploymentsListDeploymentsFlags.String("project-slug-input", "", "")

		deploymentsGetDeploymentLogsFlags                = flag.NewFlagSet("get-deployment-logs", flag.ExitOnError)
		deploymentsGetDeploymentLogsDeploymentIDFlag     = deploymentsGetDeploymentLogsFlags.String("deployment-id", "REQUIRED", "")
		deploymentsGetDeploymentLogsCursorFlag           = deploymentsGetDeploymentLogsFlags.String("cursor", "", "")
		deploymentsGetDeploymentLogsApikeyTokenFlag      = deploymentsGetDeploymentLogsFlags.String("apikey-token", "", "")
		deploymentsGetDeploymentLogsSessionTokenFlag     = deploymentsGetDeploymentLogsFlags.String("session-token", "", "")
		deploymentsGetDeploymentLogsProjectSlugInputFlag = deploymentsGetDeploymentLogsFlags.String("project-slug-input", "", "")

		domainsFlags = flag.NewFlagSet("domains", flag.ContinueOnError)

		domainsGetDomainFlags                = flag.NewFlagSet("get-domain", flag.ExitOnError)
		domainsGetDomainSessionTokenFlag     = domainsGetDomainFlags.String("session-token", "", "")
		domainsGetDomainProjectSlugInputFlag = domainsGetDomainFlags.String("project-slug-input", "", "")

		domainsCreateDomainFlags                = flag.NewFlagSet("create-domain", flag.ExitOnError)
		domainsCreateDomainBodyFlag             = domainsCreateDomainFlags.String("body", "REQUIRED", "")
		domainsCreateDomainSessionTokenFlag     = domainsCreateDomainFlags.String("session-token", "", "")
		domainsCreateDomainProjectSlugInputFlag = domainsCreateDomainFlags.String("project-slug-input", "", "")

		domainsDeleteDomainFlags                = flag.NewFlagSet("delete-domain", flag.ExitOnError)
		domainsDeleteDomainSessionTokenFlag     = domainsDeleteDomainFlags.String("session-token", "", "")
		domainsDeleteDomainProjectSlugInputFlag = domainsDeleteDomainFlags.String("project-slug-input", "", "")

		environmentsFlags = flag.NewFlagSet("environments", flag.ContinueOnError)

		environmentsCreateEnvironmentFlags                = flag.NewFlagSet("create-environment", flag.ExitOnError)
		environmentsCreateEnvironmentBodyFlag             = environmentsCreateEnvironmentFlags.String("body", "REQUIRED", "")
		environmentsCreateEnvironmentSessionTokenFlag     = environmentsCreateEnvironmentFlags.String("session-token", "", "")
		environmentsCreateEnvironmentProjectSlugInputFlag = environmentsCreateEnvironmentFlags.String("project-slug-input", "", "")

		environmentsListEnvironmentsFlags                = flag.NewFlagSet("list-environments", flag.ExitOnError)
		environmentsListEnvironmentsSessionTokenFlag     = environmentsListEnvironmentsFlags.String("session-token", "", "")
		environmentsListEnvironmentsProjectSlugInputFlag = environmentsListEnvironmentsFlags.String("project-slug-input", "", "")

		environmentsUpdateEnvironmentFlags                = flag.NewFlagSet("update-environment", flag.ExitOnError)
		environmentsUpdateEnvironmentBodyFlag             = environmentsUpdateEnvironmentFlags.String("body", "REQUIRED", "")
		environmentsUpdateEnvironmentSlugFlag             = environmentsUpdateEnvironmentFlags.String("slug", "REQUIRED", "")
		environmentsUpdateEnvironmentSessionTokenFlag     = environmentsUpdateEnvironmentFlags.String("session-token", "", "")
		environmentsUpdateEnvironmentProjectSlugInputFlag = environmentsUpdateEnvironmentFlags.String("project-slug-input", "", "")

		environmentsDeleteEnvironmentFlags                = flag.NewFlagSet("delete-environment", flag.ExitOnError)
		environmentsDeleteEnvironmentSlugFlag             = environmentsDeleteEnvironmentFlags.String("slug", "REQUIRED", "")
		environmentsDeleteEnvironmentSessionTokenFlag     = environmentsDeleteEnvironmentFlags.String("session-token", "", "")
		environmentsDeleteEnvironmentProjectSlugInputFlag = environmentsDeleteEnvironmentFlags.String("project-slug-input", "", "")

		instancesFlags = flag.NewFlagSet("instances", flag.ContinueOnError)

		instancesGetInstanceFlags                = flag.NewFlagSet("get-instance", flag.ExitOnError)
		instancesGetInstanceToolsetSlugFlag      = instancesGetInstanceFlags.String("toolset-slug", "REQUIRED", "")
		instancesGetInstanceEnvironmentSlugFlag  = instancesGetInstanceFlags.String("environment-slug", "", "")
		instancesGetInstanceSessionTokenFlag     = instancesGetInstanceFlags.String("session-token", "", "")
		instancesGetInstanceProjectSlugInputFlag = instancesGetInstanceFlags.String("project-slug-input", "", "")
		instancesGetInstanceApikeyTokenFlag      = instancesGetInstanceFlags.String("apikey-token", "", "")

		integrationsFlags = flag.NewFlagSet("integrations", flag.ContinueOnError)

		integrationsGetFlags                = flag.NewFlagSet("get", flag.ExitOnError)
		integrationsGetIDFlag               = integrationsGetFlags.String("id", "", "")
		integrationsGetNameFlag             = integrationsGetFlags.String("name", "", "")
		integrationsGetSessionTokenFlag     = integrationsGetFlags.String("session-token", "", "")
		integrationsGetProjectSlugInputFlag = integrationsGetFlags.String("project-slug-input", "", "")

		integrationsListFlags                = flag.NewFlagSet("list", flag.ExitOnError)
		integrationsListKeywordsFlag         = integrationsListFlags.String("keywords", "", "")
		integrationsListSessionTokenFlag     = integrationsListFlags.String("session-token", "", "")
		integrationsListProjectSlugInputFlag = integrationsListFlags.String("project-slug-input", "", "")

		keysFlags = flag.NewFlagSet("keys", flag.ContinueOnError)

		keysCreateKeyFlags            = flag.NewFlagSet("create-key", flag.ExitOnError)
		keysCreateKeyBodyFlag         = keysCreateKeyFlags.String("body", "REQUIRED", "")
		keysCreateKeySessionTokenFlag = keysCreateKeyFlags.String("session-token", "", "")

		keysListKeysFlags            = flag.NewFlagSet("list-keys", flag.ExitOnError)
		keysListKeysSessionTokenFlag = keysListKeysFlags.String("session-token", "", "")

		keysRevokeKeyFlags            = flag.NewFlagSet("revoke-key", flag.ExitOnError)
		keysRevokeKeyIDFlag           = keysRevokeKeyFlags.String("id", "REQUIRED", "")
		keysRevokeKeySessionTokenFlag = keysRevokeKeyFlags.String("session-token", "", "")

		packagesFlags = flag.NewFlagSet("packages", flag.ContinueOnError)

		packagesCreatePackageFlags                = flag.NewFlagSet("create-package", flag.ExitOnError)
		packagesCreatePackageBodyFlag             = packagesCreatePackageFlags.String("body", "REQUIRED", "")
		packagesCreatePackageApikeyTokenFlag      = packagesCreatePackageFlags.String("apikey-token", "", "")
		packagesCreatePackageSessionTokenFlag     = packagesCreatePackageFlags.String("session-token", "", "")
		packagesCreatePackageProjectSlugInputFlag = packagesCreatePackageFlags.String("project-slug-input", "", "")

		packagesUpdatePackageFlags                = flag.NewFlagSet("update-package", flag.ExitOnError)
		packagesUpdatePackageBodyFlag             = packagesUpdatePackageFlags.String("body", "REQUIRED", "")
		packagesUpdatePackageApikeyTokenFlag      = packagesUpdatePackageFlags.String("apikey-token", "", "")
		packagesUpdatePackageSessionTokenFlag     = packagesUpdatePackageFlags.String("session-token", "", "")
		packagesUpdatePackageProjectSlugInputFlag = packagesUpdatePackageFlags.String("project-slug-input", "", "")

		packagesListPackagesFlags                = flag.NewFlagSet("list-packages", flag.ExitOnError)
		packagesListPackagesApikeyTokenFlag      = packagesListPackagesFlags.String("apikey-token", "", "")
		packagesListPackagesSessionTokenFlag     = packagesListPackagesFlags.String("session-token", "", "")
		packagesListPackagesProjectSlugInputFlag = packagesListPackagesFlags.String("project-slug-input", "", "")

		packagesListVersionsFlags                = flag.NewFlagSet("list-versions", flag.ExitOnError)
		packagesListVersionsNameFlag             = packagesListVersionsFlags.String("name", "REQUIRED", "")
		packagesListVersionsApikeyTokenFlag      = packagesListVersionsFlags.String("apikey-token", "", "")
		packagesListVersionsSessionTokenFlag     = packagesListVersionsFlags.String("session-token", "", "")
		packagesListVersionsProjectSlugInputFlag = packagesListVersionsFlags.String("project-slug-input", "", "")

		packagesPublishFlags                = flag.NewFlagSet("publish", flag.ExitOnError)
		packagesPublishBodyFlag             = packagesPublishFlags.String("body", "REQUIRED", "")
		packagesPublishApikeyTokenFlag      = packagesPublishFlags.String("apikey-token", "", "")
		packagesPublishSessionTokenFlag     = packagesPublishFlags.String("session-token", "", "")
		packagesPublishProjectSlugInputFlag = packagesPublishFlags.String("project-slug-input", "", "")

		projectsFlags = flag.NewFlagSet("projects", flag.ContinueOnError)

		projectsCreateProjectFlags            = flag.NewFlagSet("create-project", flag.ExitOnError)
		projectsCreateProjectBodyFlag         = projectsCreateProjectFlags.String("body", "REQUIRED", "")
		projectsCreateProjectApikeyTokenFlag  = projectsCreateProjectFlags.String("apikey-token", "", "")
		projectsCreateProjectSessionTokenFlag = projectsCreateProjectFlags.String("session-token", "", "")

		projectsListProjectsFlags              = flag.NewFlagSet("list-projects", flag.ExitOnError)
		projectsListProjectsOrganizationIDFlag = projectsListProjectsFlags.String("organization-id", "REQUIRED", "")
		projectsListProjectsSessionTokenFlag   = projectsListProjectsFlags.String("session-token", "", "")
		projectsListProjectsApikeyTokenFlag    = projectsListProjectsFlags.String("apikey-token", "", "")

		slackFlags = flag.NewFlagSet("slack", flag.ContinueOnError)

		slackCallbackFlags     = flag.NewFlagSet("callback", flag.ExitOnError)
		slackCallbackStateFlag = slackCallbackFlags.String("state", "REQUIRED", "")
		slackCallbackCodeFlag  = slackCallbackFlags.String("code", "REQUIRED", "")

		slackLoginFlags            = flag.NewFlagSet("login", flag.ExitOnError)
		slackLoginProjectSlugFlag  = slackLoginFlags.String("project-slug", "REQUIRED", "")
		slackLoginReturnURLFlag    = slackLoginFlags.String("return-url", "", "")
		slackLoginSessionTokenFlag = slackLoginFlags.String("session-token", "", "")

		slackGetSlackConnectionFlags                = flag.NewFlagSet("get-slack-connection", flag.ExitOnError)
		slackGetSlackConnectionSessionTokenFlag     = slackGetSlackConnectionFlags.String("session-token", "", "")
		slackGetSlackConnectionProjectSlugInputFlag = slackGetSlackConnectionFlags.String("project-slug-input", "", "")

		slackUpdateSlackConnectionFlags                = flag.NewFlagSet("update-slack-connection", flag.ExitOnError)
		slackUpdateSlackConnectionBodyFlag             = slackUpdateSlackConnectionFlags.String("body", "REQUIRED", "")
		slackUpdateSlackConnectionSessionTokenFlag     = slackUpdateSlackConnectionFlags.String("session-token", "", "")
		slackUpdateSlackConnectionProjectSlugInputFlag = slackUpdateSlackConnectionFlags.String("project-slug-input", "", "")

		slackDeleteSlackConnectionFlags                = flag.NewFlagSet("delete-slack-connection", flag.ExitOnError)
		slackDeleteSlackConnectionSessionTokenFlag     = slackDeleteSlackConnectionFlags.String("session-token", "", "")
		slackDeleteSlackConnectionProjectSlugInputFlag = slackDeleteSlackConnectionFlags.String("project-slug-input", "", "")

		templatesFlags = flag.NewFlagSet("templates", flag.ContinueOnError)

		templatesCreateTemplateFlags                = flag.NewFlagSet("create-template", flag.ExitOnError)
		templatesCreateTemplateBodyFlag             = templatesCreateTemplateFlags.String("body", "REQUIRED", "")
		templatesCreateTemplateApikeyTokenFlag      = templatesCreateTemplateFlags.String("apikey-token", "", "")
		templatesCreateTemplateSessionTokenFlag     = templatesCreateTemplateFlags.String("session-token", "", "")
		templatesCreateTemplateProjectSlugInputFlag = templatesCreateTemplateFlags.String("project-slug-input", "", "")

		templatesUpdateTemplateFlags                = flag.NewFlagSet("update-template", flag.ExitOnError)
		templatesUpdateTemplateBodyFlag             = templatesUpdateTemplateFlags.String("body", "REQUIRED", "")
		templatesUpdateTemplateApikeyTokenFlag      = templatesUpdateTemplateFlags.String("apikey-token", "", "")
		templatesUpdateTemplateSessionTokenFlag     = templatesUpdateTemplateFlags.String("session-token", "", "")
		templatesUpdateTemplateProjectSlugInputFlag = templatesUpdateTemplateFlags.String("project-slug-input", "", "")

		templatesGetTemplateFlags                = flag.NewFlagSet("get-template", flag.ExitOnError)
		templatesGetTemplateIDFlag               = templatesGetTemplateFlags.String("id", "", "")
		templatesGetTemplateNameFlag             = templatesGetTemplateFlags.String("name", "", "")
		templatesGetTemplateApikeyTokenFlag      = templatesGetTemplateFlags.String("apikey-token", "", "")
		templatesGetTemplateSessionTokenFlag     = templatesGetTemplateFlags.String("session-token", "", "")
		templatesGetTemplateProjectSlugInputFlag = templatesGetTemplateFlags.String("project-slug-input", "", "")

		templatesListTemplatesFlags                = flag.NewFlagSet("list-templates", flag.ExitOnError)
		templatesListTemplatesApikeyTokenFlag      = templatesListTemplatesFlags.String("apikey-token", "", "")
		templatesListTemplatesSessionTokenFlag     = templatesListTemplatesFlags.String("session-token", "", "")
		templatesListTemplatesProjectSlugInputFlag = templatesListTemplatesFlags.String("project-slug-input", "", "")

		templatesDeleteTemplateFlags                = flag.NewFlagSet("delete-template", flag.ExitOnError)
		templatesDeleteTemplateIDFlag               = templatesDeleteTemplateFlags.String("id", "", "")
		templatesDeleteTemplateNameFlag             = templatesDeleteTemplateFlags.String("name", "", "")
		templatesDeleteTemplateApikeyTokenFlag      = templatesDeleteTemplateFlags.String("apikey-token", "", "")
		templatesDeleteTemplateSessionTokenFlag     = templatesDeleteTemplateFlags.String("session-token", "", "")
		templatesDeleteTemplateProjectSlugInputFlag = templatesDeleteTemplateFlags.String("project-slug-input", "", "")

		templatesRenderTemplateFlags                = flag.NewFlagSet("render-template", flag.ExitOnError)
		templatesRenderTemplateBodyFlag             = templatesRenderTemplateFlags.String("body", "REQUIRED", "")
		templatesRenderTemplateIDFlag               = templatesRenderTemplateFlags.String("id", "REQUIRED", "")
		templatesRenderTemplateApikeyTokenFlag      = templatesRenderTemplateFlags.String("apikey-token", "", "")
		templatesRenderTemplateSessionTokenFlag     = templatesRenderTemplateFlags.String("session-token", "", "")
		templatesRenderTemplateProjectSlugInputFlag = templatesRenderTemplateFlags.String("project-slug-input", "", "")

		toolsFlags = flag.NewFlagSet("tools", flag.ContinueOnError)

		toolsListToolsFlags                = flag.NewFlagSet("list-tools", flag.ExitOnError)
		toolsListToolsCursorFlag           = toolsListToolsFlags.String("cursor", "", "")
		toolsListToolsLimitFlag            = toolsListToolsFlags.String("limit", "", "")
		toolsListToolsDeploymentIDFlag     = toolsListToolsFlags.String("deployment-id", "", "")
		toolsListToolsSessionTokenFlag     = toolsListToolsFlags.String("session-token", "", "")
		toolsListToolsProjectSlugInputFlag = toolsListToolsFlags.String("project-slug-input", "", "")

		toolsetsFlags = flag.NewFlagSet("toolsets", flag.ContinueOnError)

		toolsetsCreateToolsetFlags                = flag.NewFlagSet("create-toolset", flag.ExitOnError)
		toolsetsCreateToolsetBodyFlag             = toolsetsCreateToolsetFlags.String("body", "REQUIRED", "")
		toolsetsCreateToolsetSessionTokenFlag     = toolsetsCreateToolsetFlags.String("session-token", "", "")
		toolsetsCreateToolsetProjectSlugInputFlag = toolsetsCreateToolsetFlags.String("project-slug-input", "", "")

		toolsetsListToolsetsFlags                = flag.NewFlagSet("list-toolsets", flag.ExitOnError)
		toolsetsListToolsetsSessionTokenFlag     = toolsetsListToolsetsFlags.String("session-token", "", "")
		toolsetsListToolsetsProjectSlugInputFlag = toolsetsListToolsetsFlags.String("project-slug-input", "", "")

		toolsetsUpdateToolsetFlags                = flag.NewFlagSet("update-toolset", flag.ExitOnError)
		toolsetsUpdateToolsetBodyFlag             = toolsetsUpdateToolsetFlags.String("body", "REQUIRED", "")
		toolsetsUpdateToolsetSlugFlag             = toolsetsUpdateToolsetFlags.String("slug", "REQUIRED", "")
		toolsetsUpdateToolsetSessionTokenFlag     = toolsetsUpdateToolsetFlags.String("session-token", "", "")
		toolsetsUpdateToolsetProjectSlugInputFlag = toolsetsUpdateToolsetFlags.String("project-slug-input", "", "")

		toolsetsDeleteToolsetFlags                = flag.NewFlagSet("delete-toolset", flag.ExitOnError)
		toolsetsDeleteToolsetSlugFlag             = toolsetsDeleteToolsetFlags.String("slug", "REQUIRED", "")
		toolsetsDeleteToolsetSessionTokenFlag     = toolsetsDeleteToolsetFlags.String("session-token", "", "")
		toolsetsDeleteToolsetProjectSlugInputFlag = toolsetsDeleteToolsetFlags.String("project-slug-input", "", "")

		toolsetsGetToolsetFlags                = flag.NewFlagSet("get-toolset", flag.ExitOnError)
		toolsetsGetToolsetSlugFlag             = toolsetsGetToolsetFlags.String("slug", "REQUIRED", "")
		toolsetsGetToolsetSessionTokenFlag     = toolsetsGetToolsetFlags.String("session-token", "", "")
		toolsetsGetToolsetProjectSlugInputFlag = toolsetsGetToolsetFlags.String("project-slug-input", "", "")

		toolsetsCheckMCPSlugAvailabilityFlags                = flag.NewFlagSet("check-mcp-slug-availability", flag.ExitOnError)
		toolsetsCheckMCPSlugAvailabilitySlugFlag             = toolsetsCheckMCPSlugAvailabilityFlags.String("slug", "REQUIRED", "")
		toolsetsCheckMCPSlugAvailabilitySessionTokenFlag     = toolsetsCheckMCPSlugAvailabilityFlags.String("session-token", "", "")
		toolsetsCheckMCPSlugAvailabilityProjectSlugInputFlag = toolsetsCheckMCPSlugAvailabilityFlags.String("project-slug-input", "", "")

		variationsFlags = flag.NewFlagSet("variations", flag.ContinueOnError)

		variationsUpsertGlobalFlags                = flag.NewFlagSet("upsert-global", flag.ExitOnError)
		variationsUpsertGlobalBodyFlag             = variationsUpsertGlobalFlags.String("body", "REQUIRED", "")
		variationsUpsertGlobalSessionTokenFlag     = variationsUpsertGlobalFlags.String("session-token", "", "")
		variationsUpsertGlobalApikeyTokenFlag      = variationsUpsertGlobalFlags.String("apikey-token", "", "")
		variationsUpsertGlobalProjectSlugInputFlag = variationsUpsertGlobalFlags.String("project-slug-input", "", "")

		variationsDeleteGlobalFlags                = flag.NewFlagSet("delete-global", flag.ExitOnError)
		variationsDeleteGlobalVariationIDFlag      = variationsDeleteGlobalFlags.String("variation-id", "REQUIRED", "")
		variationsDeleteGlobalSessionTokenFlag     = variationsDeleteGlobalFlags.String("session-token", "", "")
		variationsDeleteGlobalApikeyTokenFlag      = variationsDeleteGlobalFlags.String("apikey-token", "", "")
		variationsDeleteGlobalProjectSlugInputFlag = variationsDeleteGlobalFlags.String("project-slug-input", "", "")

		variationsListGlobalFlags                = flag.NewFlagSet("list-global", flag.ExitOnError)
		variationsListGlobalSessionTokenFlag     = variationsListGlobalFlags.String("session-token", "", "")
		variationsListGlobalApikeyTokenFlag      = variationsListGlobalFlags.String("apikey-token", "", "")
		variationsListGlobalProjectSlugInputFlag = variationsListGlobalFlags.String("project-slug-input", "", "")
	)
	assetsFlags.Usage = assetsUsage
	assetsServeImageFlags.Usage = assetsServeImageUsage
	assetsUploadImageFlags.Usage = assetsUploadImageUsage
	assetsUploadOpenAPIv3Flags.Usage = assetsUploadOpenAPIv3Usage

	authFlags.Usage = authUsage
	authCallbackFlags.Usage = authCallbackUsage
	authLoginFlags.Usage = authLoginUsage
	authSwitchScopesFlags.Usage = authSwitchScopesUsage
	authLogoutFlags.Usage = authLogoutUsage
	authRegisterFlags.Usage = authRegisterUsage
	authInfoFlags.Usage = authInfoUsage

	chatFlags.Usage = chatUsage
	chatListChatsFlags.Usage = chatListChatsUsage
	chatLoadChatFlags.Usage = chatLoadChatUsage

	deploymentsFlags.Usage = deploymentsUsage
	deploymentsGetDeploymentFlags.Usage = deploymentsGetDeploymentUsage
	deploymentsGetLatestDeploymentFlags.Usage = deploymentsGetLatestDeploymentUsage
	deploymentsCreateDeploymentFlags.Usage = deploymentsCreateDeploymentUsage
	deploymentsEvolveFlags.Usage = deploymentsEvolveUsage
	deploymentsListDeploymentsFlags.Usage = deploymentsListDeploymentsUsage
	deploymentsGetDeploymentLogsFlags.Usage = deploymentsGetDeploymentLogsUsage

	domainsFlags.Usage = domainsUsage
	domainsGetDomainFlags.Usage = domainsGetDomainUsage
	domainsCreateDomainFlags.Usage = domainsCreateDomainUsage
	domainsDeleteDomainFlags.Usage = domainsDeleteDomainUsage

	environmentsFlags.Usage = environmentsUsage
	environmentsCreateEnvironmentFlags.Usage = environmentsCreateEnvironmentUsage
	environmentsListEnvironmentsFlags.Usage = environmentsListEnvironmentsUsage
	environmentsUpdateEnvironmentFlags.Usage = environmentsUpdateEnvironmentUsage
	environmentsDeleteEnvironmentFlags.Usage = environmentsDeleteEnvironmentUsage

	instancesFlags.Usage = instancesUsage
	instancesGetInstanceFlags.Usage = instancesGetInstanceUsage

	integrationsFlags.Usage = integrationsUsage
	integrationsGetFlags.Usage = integrationsGetUsage
	integrationsListFlags.Usage = integrationsListUsage

	keysFlags.Usage = keysUsage
	keysCreateKeyFlags.Usage = keysCreateKeyUsage
	keysListKeysFlags.Usage = keysListKeysUsage
	keysRevokeKeyFlags.Usage = keysRevokeKeyUsage

	packagesFlags.Usage = packagesUsage
	packagesCreatePackageFlags.Usage = packagesCreatePackageUsage
	packagesUpdatePackageFlags.Usage = packagesUpdatePackageUsage
	packagesListPackagesFlags.Usage = packagesListPackagesUsage
	packagesListVersionsFlags.Usage = packagesListVersionsUsage
	packagesPublishFlags.Usage = packagesPublishUsage

	projectsFlags.Usage = projectsUsage
	projectsCreateProjectFlags.Usage = projectsCreateProjectUsage
	projectsListProjectsFlags.Usage = projectsListProjectsUsage

	slackFlags.Usage = slackUsage
	slackCallbackFlags.Usage = slackCallbackUsage
	slackLoginFlags.Usage = slackLoginUsage
	slackGetSlackConnectionFlags.Usage = slackGetSlackConnectionUsage
	slackUpdateSlackConnectionFlags.Usage = slackUpdateSlackConnectionUsage
	slackDeleteSlackConnectionFlags.Usage = slackDeleteSlackConnectionUsage

	templatesFlags.Usage = templatesUsage
	templatesCreateTemplateFlags.Usage = templatesCreateTemplateUsage
	templatesUpdateTemplateFlags.Usage = templatesUpdateTemplateUsage
	templatesGetTemplateFlags.Usage = templatesGetTemplateUsage
	templatesListTemplatesFlags.Usage = templatesListTemplatesUsage
	templatesDeleteTemplateFlags.Usage = templatesDeleteTemplateUsage
	templatesRenderTemplateFlags.Usage = templatesRenderTemplateUsage

	toolsFlags.Usage = toolsUsage
	toolsListToolsFlags.Usage = toolsListToolsUsage

	toolsetsFlags.Usage = toolsetsUsage
	toolsetsCreateToolsetFlags.Usage = toolsetsCreateToolsetUsage
	toolsetsListToolsetsFlags.Usage = toolsetsListToolsetsUsage
	toolsetsUpdateToolsetFlags.Usage = toolsetsUpdateToolsetUsage
	toolsetsDeleteToolsetFlags.Usage = toolsetsDeleteToolsetUsage
	toolsetsGetToolsetFlags.Usage = toolsetsGetToolsetUsage
	toolsetsCheckMCPSlugAvailabilityFlags.Usage = toolsetsCheckMCPSlugAvailabilityUsage

	variationsFlags.Usage = variationsUsage
	variationsUpsertGlobalFlags.Usage = variationsUpsertGlobalUsage
	variationsDeleteGlobalFlags.Usage = variationsDeleteGlobalUsage
	variationsListGlobalFlags.Usage = variationsListGlobalUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "assets":
			svcf = assetsFlags
		case "auth":
			svcf = authFlags
		case "chat":
			svcf = chatFlags
		case "deployments":
			svcf = deploymentsFlags
		case "domains":
			svcf = domainsFlags
		case "environments":
			svcf = environmentsFlags
		case "instances":
			svcf = instancesFlags
		case "integrations":
			svcf = integrationsFlags
		case "keys":
			svcf = keysFlags
		case "packages":
			svcf = packagesFlags
		case "projects":
			svcf = projectsFlags
		case "slack":
			svcf = slackFlags
		case "templates":
			svcf = templatesFlags
		case "tools":
			svcf = toolsFlags
		case "toolsets":
			svcf = toolsetsFlags
		case "variations":
			svcf = variationsFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "assets":
			switch epn {
			case "serve-image":
				epf = assetsServeImageFlags

			case "upload-image":
				epf = assetsUploadImageFlags

			case "upload-open-ap-iv3":
				epf = assetsUploadOpenAPIv3Flags

			}

		case "auth":
			switch epn {
			case "callback":
				epf = authCallbackFlags

			case "login":
				epf = authLoginFlags

			case "switch-scopes":
				epf = authSwitchScopesFlags

			case "logout":
				epf = authLogoutFlags

			case "register":
				epf = authRegisterFlags

			case "info":
				epf = authInfoFlags

			}

		case "chat":
			switch epn {
			case "list-chats":
				epf = chatListChatsFlags

			case "load-chat":
				epf = chatLoadChatFlags

			}

		case "deployments":
			switch epn {
			case "get-deployment":
				epf = deploymentsGetDeploymentFlags

			case "get-latest-deployment":
				epf = deploymentsGetLatestDeploymentFlags

			case "create-deployment":
				epf = deploymentsCreateDeploymentFlags

			case "evolve":
				epf = deploymentsEvolveFlags

			case "list-deployments":
				epf = deploymentsListDeploymentsFlags

			case "get-deployment-logs":
				epf = deploymentsGetDeploymentLogsFlags

			}

		case "domains":
			switch epn {
			case "get-domain":
				epf = domainsGetDomainFlags

			case "create-domain":
				epf = domainsCreateDomainFlags

			case "delete-domain":
				epf = domainsDeleteDomainFlags

			}

		case "environments":
			switch epn {
			case "create-environment":
				epf = environmentsCreateEnvironmentFlags

			case "list-environments":
				epf = environmentsListEnvironmentsFlags

			case "update-environment":
				epf = environmentsUpdateEnvironmentFlags

			case "delete-environment":
				epf = environmentsDeleteEnvironmentFlags

			}

		case "instances":
			switch epn {
			case "get-instance":
				epf = instancesGetInstanceFlags

			}

		case "integrations":
			switch epn {
			case "get":
				epf = integrationsGetFlags

			case "list":
				epf = integrationsListFlags

			}

		case "keys":
			switch epn {
			case "create-key":
				epf = keysCreateKeyFlags

			case "list-keys":
				epf = keysListKeysFlags

			case "revoke-key":
				epf = keysRevokeKeyFlags

			}

		case "packages":
			switch epn {
			case "create-package":
				epf = packagesCreatePackageFlags

			case "update-package":
				epf = packagesUpdatePackageFlags

			case "list-packages":
				epf = packagesListPackagesFlags

			case "list-versions":
				epf = packagesListVersionsFlags

			case "publish":
				epf = packagesPublishFlags

			}

		case "projects":
			switch epn {
			case "create-project":
				epf = projectsCreateProjectFlags

			case "list-projects":
				epf = projectsListProjectsFlags

			}

		case "slack":
			switch epn {
			case "callback":
				epf = slackCallbackFlags

			case "login":
				epf = slackLoginFlags

			case "get-slack-connection":
				epf = slackGetSlackConnectionFlags

			case "update-slack-connection":
				epf = slackUpdateSlackConnectionFlags

			case "delete-slack-connection":
				epf = slackDeleteSlackConnectionFlags

			}

		case "templates":
			switch epn {
			case "create-template":
				epf = templatesCreateTemplateFlags

			case "update-template":
				epf = templatesUpdateTemplateFlags

			case "get-template":
				epf = templatesGetTemplateFlags

			case "list-templates":
				epf = templatesListTemplatesFlags

			case "delete-template":
				epf = templatesDeleteTemplateFlags

			case "render-template":
				epf = templatesRenderTemplateFlags

			}

		case "tools":
			switch epn {
			case "list-tools":
				epf = toolsListToolsFlags

			}

		case "toolsets":
			switch epn {
			case "create-toolset":
				epf = toolsetsCreateToolsetFlags

			case "list-toolsets":
				epf = toolsetsListToolsetsFlags

			case "update-toolset":
				epf = toolsetsUpdateToolsetFlags

			case "delete-toolset":
				epf = toolsetsDeleteToolsetFlags

			case "get-toolset":
				epf = toolsetsGetToolsetFlags

			case "check-mcp-slug-availability":
				epf = toolsetsCheckMCPSlugAvailabilityFlags

			}

		case "variations":
			switch epn {
			case "upsert-global":
				epf = variationsUpsertGlobalFlags

			case "delete-global":
				epf = variationsDeleteGlobalFlags

			case "list-global":
				epf = variationsListGlobalFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "assets":
			c := assetsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "serve-image":
				endpoint = c.ServeImage()
				data, err = assetsc.BuildServeImagePayload(*assetsServeImageIDFlag, *assetsServeImageSessionTokenFlag)
			case "upload-image":
				endpoint = c.UploadImage()
				data, err = assetsc.BuildUploadImagePayload(*assetsUploadImageContentTypeFlag, *assetsUploadImageContentLengthFlag, *assetsUploadImageApikeyTokenFlag, *assetsUploadImageProjectSlugInputFlag, *assetsUploadImageSessionTokenFlag)
				if err == nil {
					data, err = assetsc.BuildUploadImageStreamPayload(data, *assetsUploadImageStreamFlag)
				}
			case "upload-open-ap-iv3":
				endpoint = c.UploadOpenAPIv3()
				data, err = assetsc.BuildUploadOpenAPIv3Payload(*assetsUploadOpenAPIv3ContentTypeFlag, *assetsUploadOpenAPIv3ContentLengthFlag, *assetsUploadOpenAPIv3ApikeyTokenFlag, *assetsUploadOpenAPIv3ProjectSlugInputFlag, *assetsUploadOpenAPIv3SessionTokenFlag)
				if err == nil {
					data, err = assetsc.BuildUploadOpenAPIv3StreamPayload(data, *assetsUploadOpenAPIv3StreamFlag)
				}
			}
		case "auth":
			c := authc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "callback":
				endpoint = c.Callback()
				data, err = authc.BuildCallbackPayload(*authCallbackIDTokenFlag)
			case "login":
				endpoint = c.Login()
			case "switch-scopes":
				endpoint = c.SwitchScopes()
				data, err = authc.BuildSwitchScopesPayload(*authSwitchScopesOrganizationIDFlag, *authSwitchScopesProjectIDFlag, *authSwitchScopesSessionTokenFlag)
			case "logout":
				endpoint = c.Logout()
				data, err = authc.BuildLogoutPayload(*authLogoutSessionTokenFlag)
			case "register":
				endpoint = c.Register()
				data, err = authc.BuildRegisterPayload(*authRegisterBodyFlag, *authRegisterSessionTokenFlag)
			case "info":
				endpoint = c.Info()
				data, err = authc.BuildInfoPayload(*authInfoSessionTokenFlag)
			}
		case "chat":
			c := chatc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list-chats":
				endpoint = c.ListChats()
				data, err = chatc.BuildListChatsPayload(*chatListChatsSessionTokenFlag, *chatListChatsProjectSlugInputFlag)
			case "load-chat":
				endpoint = c.LoadChat()
				data, err = chatc.BuildLoadChatPayload(*chatLoadChatIDFlag, *chatLoadChatSessionTokenFlag, *chatLoadChatProjectSlugInputFlag)
			}
		case "deployments":
			c := deploymentsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get-deployment":
				endpoint = c.GetDeployment()
				data, err = deploymentsc.BuildGetDeploymentPayload(*deploymentsGetDeploymentIDFlag, *deploymentsGetDeploymentApikeyTokenFlag, *deploymentsGetDeploymentSessionTokenFlag, *deploymentsGetDeploymentProjectSlugInputFlag)
			case "get-latest-deployment":
				endpoint = c.GetLatestDeployment()
				data, err = deploymentsc.BuildGetLatestDeploymentPayload(*deploymentsGetLatestDeploymentApikeyTokenFlag, *deploymentsGetLatestDeploymentSessionTokenFlag, *deploymentsGetLatestDeploymentProjectSlugInputFlag)
			case "create-deployment":
				endpoint = c.CreateDeployment()
				data, err = deploymentsc.BuildCreateDeploymentPayload(*deploymentsCreateDeploymentBodyFlag, *deploymentsCreateDeploymentApikeyTokenFlag, *deploymentsCreateDeploymentSessionTokenFlag, *deploymentsCreateDeploymentProjectSlugInputFlag, *deploymentsCreateDeploymentIdempotencyKeyFlag)
			case "evolve":
				endpoint = c.Evolve()
				data, err = deploymentsc.BuildEvolvePayload(*deploymentsEvolveBodyFlag, *deploymentsEvolveApikeyTokenFlag, *deploymentsEvolveSessionTokenFlag, *deploymentsEvolveProjectSlugInputFlag)
			case "list-deployments":
				endpoint = c.ListDeployments()
				data, err = deploymentsc.BuildListDeploymentsPayload(*deploymentsListDeploymentsCursorFlag, *deploymentsListDeploymentsApikeyTokenFlag, *deploymentsListDeploymentsSessionTokenFlag, *deploymentsListDeploymentsProjectSlugInputFlag)
			case "get-deployment-logs":
				endpoint = c.GetDeploymentLogs()
				data, err = deploymentsc.BuildGetDeploymentLogsPayload(*deploymentsGetDeploymentLogsDeploymentIDFlag, *deploymentsGetDeploymentLogsCursorFlag, *deploymentsGetDeploymentLogsApikeyTokenFlag, *deploymentsGetDeploymentLogsSessionTokenFlag, *deploymentsGetDeploymentLogsProjectSlugInputFlag)
			}
		case "domains":
			c := domainsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get-domain":
				endpoint = c.GetDomain()
				data, err = domainsc.BuildGetDomainPayload(*domainsGetDomainSessionTokenFlag, *domainsGetDomainProjectSlugInputFlag)
			case "create-domain":
				endpoint = c.CreateDomain()
				data, err = domainsc.BuildCreateDomainPayload(*domainsCreateDomainBodyFlag, *domainsCreateDomainSessionTokenFlag, *domainsCreateDomainProjectSlugInputFlag)
			case "delete-domain":
				endpoint = c.DeleteDomain()
				data, err = domainsc.BuildDeleteDomainPayload(*domainsDeleteDomainSessionTokenFlag, *domainsDeleteDomainProjectSlugInputFlag)
			}
		case "environments":
			c := environmentsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create-environment":
				endpoint = c.CreateEnvironment()
				data, err = environmentsc.BuildCreateEnvironmentPayload(*environmentsCreateEnvironmentBodyFlag, *environmentsCreateEnvironmentSessionTokenFlag, *environmentsCreateEnvironmentProjectSlugInputFlag)
			case "list-environments":
				endpoint = c.ListEnvironments()
				data, err = environmentsc.BuildListEnvironmentsPayload(*environmentsListEnvironmentsSessionTokenFlag, *environmentsListEnvironmentsProjectSlugInputFlag)
			case "update-environment":
				endpoint = c.UpdateEnvironment()
				data, err = environmentsc.BuildUpdateEnvironmentPayload(*environmentsUpdateEnvironmentBodyFlag, *environmentsUpdateEnvironmentSlugFlag, *environmentsUpdateEnvironmentSessionTokenFlag, *environmentsUpdateEnvironmentProjectSlugInputFlag)
			case "delete-environment":
				endpoint = c.DeleteEnvironment()
				data, err = environmentsc.BuildDeleteEnvironmentPayload(*environmentsDeleteEnvironmentSlugFlag, *environmentsDeleteEnvironmentSessionTokenFlag, *environmentsDeleteEnvironmentProjectSlugInputFlag)
			}
		case "instances":
			c := instancesc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get-instance":
				endpoint = c.GetInstance()
				data, err = instancesc.BuildGetInstancePayload(*instancesGetInstanceToolsetSlugFlag, *instancesGetInstanceEnvironmentSlugFlag, *instancesGetInstanceSessionTokenFlag, *instancesGetInstanceProjectSlugInputFlag, *instancesGetInstanceApikeyTokenFlag)
			}
		case "integrations":
			c := integrationsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get":
				endpoint = c.Get()
				data, err = integrationsc.BuildGetPayload(*integrationsGetIDFlag, *integrationsGetNameFlag, *integrationsGetSessionTokenFlag, *integrationsGetProjectSlugInputFlag)
			case "list":
				endpoint = c.List()
				data, err = integrationsc.BuildListPayload(*integrationsListKeywordsFlag, *integrationsListSessionTokenFlag, *integrationsListProjectSlugInputFlag)
			}
		case "keys":
			c := keysc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create-key":
				endpoint = c.CreateKey()
				data, err = keysc.BuildCreateKeyPayload(*keysCreateKeyBodyFlag, *keysCreateKeySessionTokenFlag)
			case "list-keys":
				endpoint = c.ListKeys()
				data, err = keysc.BuildListKeysPayload(*keysListKeysSessionTokenFlag)
			case "revoke-key":
				endpoint = c.RevokeKey()
				data, err = keysc.BuildRevokeKeyPayload(*keysRevokeKeyIDFlag, *keysRevokeKeySessionTokenFlag)
			}
		case "packages":
			c := packagesc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create-package":
				endpoint = c.CreatePackage()
				data, err = packagesc.BuildCreatePackagePayload(*packagesCreatePackageBodyFlag, *packagesCreatePackageApikeyTokenFlag, *packagesCreatePackageSessionTokenFlag, *packagesCreatePackageProjectSlugInputFlag)
			case "update-package":
				endpoint = c.UpdatePackage()
				data, err = packagesc.BuildUpdatePackagePayload(*packagesUpdatePackageBodyFlag, *packagesUpdatePackageApikeyTokenFlag, *packagesUpdatePackageSessionTokenFlag, *packagesUpdatePackageProjectSlugInputFlag)
			case "list-packages":
				endpoint = c.ListPackages()
				data, err = packagesc.BuildListPackagesPayload(*packagesListPackagesApikeyTokenFlag, *packagesListPackagesSessionTokenFlag, *packagesListPackagesProjectSlugInputFlag)
			case "list-versions":
				endpoint = c.ListVersions()
				data, err = packagesc.BuildListVersionsPayload(*packagesListVersionsNameFlag, *packagesListVersionsApikeyTokenFlag, *packagesListVersionsSessionTokenFlag, *packagesListVersionsProjectSlugInputFlag)
			case "publish":
				endpoint = c.Publish()
				data, err = packagesc.BuildPublishPayload(*packagesPublishBodyFlag, *packagesPublishApikeyTokenFlag, *packagesPublishSessionTokenFlag, *packagesPublishProjectSlugInputFlag)
			}
		case "projects":
			c := projectsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create-project":
				endpoint = c.CreateProject()
				data, err = projectsc.BuildCreateProjectPayload(*projectsCreateProjectBodyFlag, *projectsCreateProjectApikeyTokenFlag, *projectsCreateProjectSessionTokenFlag)
			case "list-projects":
				endpoint = c.ListProjects()
				data, err = projectsc.BuildListProjectsPayload(*projectsListProjectsOrganizationIDFlag, *projectsListProjectsSessionTokenFlag, *projectsListProjectsApikeyTokenFlag)
			}
		case "slack":
			c := slackc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "callback":
				endpoint = c.Callback()
				data, err = slackc.BuildCallbackPayload(*slackCallbackStateFlag, *slackCallbackCodeFlag)
			case "login":
				endpoint = c.Login()
				data, err = slackc.BuildLoginPayload(*slackLoginProjectSlugFlag, *slackLoginReturnURLFlag, *slackLoginSessionTokenFlag)
			case "get-slack-connection":
				endpoint = c.GetSlackConnection()
				data, err = slackc.BuildGetSlackConnectionPayload(*slackGetSlackConnectionSessionTokenFlag, *slackGetSlackConnectionProjectSlugInputFlag)
			case "update-slack-connection":
				endpoint = c.UpdateSlackConnection()
				data, err = slackc.BuildUpdateSlackConnectionPayload(*slackUpdateSlackConnectionBodyFlag, *slackUpdateSlackConnectionSessionTokenFlag, *slackUpdateSlackConnectionProjectSlugInputFlag)
			case "delete-slack-connection":
				endpoint = c.DeleteSlackConnection()
				data, err = slackc.BuildDeleteSlackConnectionPayload(*slackDeleteSlackConnectionSessionTokenFlag, *slackDeleteSlackConnectionProjectSlugInputFlag)
			}
		case "templates":
			c := templatesc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create-template":
				endpoint = c.CreateTemplate()
				data, err = templatesc.BuildCreateTemplatePayload(*templatesCreateTemplateBodyFlag, *templatesCreateTemplateApikeyTokenFlag, *templatesCreateTemplateSessionTokenFlag, *templatesCreateTemplateProjectSlugInputFlag)
			case "update-template":
				endpoint = c.UpdateTemplate()
				data, err = templatesc.BuildUpdateTemplatePayload(*templatesUpdateTemplateBodyFlag, *templatesUpdateTemplateApikeyTokenFlag, *templatesUpdateTemplateSessionTokenFlag, *templatesUpdateTemplateProjectSlugInputFlag)
			case "get-template":
				endpoint = c.GetTemplate()
				data, err = templatesc.BuildGetTemplatePayload(*templatesGetTemplateIDFlag, *templatesGetTemplateNameFlag, *templatesGetTemplateApikeyTokenFlag, *templatesGetTemplateSessionTokenFlag, *templatesGetTemplateProjectSlugInputFlag)
			case "list-templates":
				endpoint = c.ListTemplates()
				data, err = templatesc.BuildListTemplatesPayload(*templatesListTemplatesApikeyTokenFlag, *templatesListTemplatesSessionTokenFlag, *templatesListTemplatesProjectSlugInputFlag)
			case "delete-template":
				endpoint = c.DeleteTemplate()
				data, err = templatesc.BuildDeleteTemplatePayload(*templatesDeleteTemplateIDFlag, *templatesDeleteTemplateNameFlag, *templatesDeleteTemplateApikeyTokenFlag, *templatesDeleteTemplateSessionTokenFlag, *templatesDeleteTemplateProjectSlugInputFlag)
			case "render-template":
				endpoint = c.RenderTemplate()
				data, err = templatesc.BuildRenderTemplatePayload(*templatesRenderTemplateBodyFlag, *templatesRenderTemplateIDFlag, *templatesRenderTemplateApikeyTokenFlag, *templatesRenderTemplateSessionTokenFlag, *templatesRenderTemplateProjectSlugInputFlag)
			}
		case "tools":
			c := toolsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list-tools":
				endpoint = c.ListTools()
				data, err = toolsc.BuildListToolsPayload(*toolsListToolsCursorFlag, *toolsListToolsLimitFlag, *toolsListToolsDeploymentIDFlag, *toolsListToolsSessionTokenFlag, *toolsListToolsProjectSlugInputFlag)
			}
		case "toolsets":
			c := toolsetsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create-toolset":
				endpoint = c.CreateToolset()
				data, err = toolsetsc.BuildCreateToolsetPayload(*toolsetsCreateToolsetBodyFlag, *toolsetsCreateToolsetSessionTokenFlag, *toolsetsCreateToolsetProjectSlugInputFlag)
			case "list-toolsets":
				endpoint = c.ListToolsets()
				data, err = toolsetsc.BuildListToolsetsPayload(*toolsetsListToolsetsSessionTokenFlag, *toolsetsListToolsetsProjectSlugInputFlag)
			case "update-toolset":
				endpoint = c.UpdateToolset()
				data, err = toolsetsc.BuildUpdateToolsetPayload(*toolsetsUpdateToolsetBodyFlag, *toolsetsUpdateToolsetSlugFlag, *toolsetsUpdateToolsetSessionTokenFlag, *toolsetsUpdateToolsetProjectSlugInputFlag)
			case "delete-toolset":
				endpoint = c.DeleteToolset()
				data, err = toolsetsc.BuildDeleteToolsetPayload(*toolsetsDeleteToolsetSlugFlag, *toolsetsDeleteToolsetSessionTokenFlag, *toolsetsDeleteToolsetProjectSlugInputFlag)
			case "get-toolset":
				endpoint = c.GetToolset()
				data, err = toolsetsc.BuildGetToolsetPayload(*toolsetsGetToolsetSlugFlag, *toolsetsGetToolsetSessionTokenFlag, *toolsetsGetToolsetProjectSlugInputFlag)
			case "check-mcp-slug-availability":
				endpoint = c.CheckMCPSlugAvailability()
				data, err = toolsetsc.BuildCheckMCPSlugAvailabilityPayload(*toolsetsCheckMCPSlugAvailabilitySlugFlag, *toolsetsCheckMCPSlugAvailabilitySessionTokenFlag, *toolsetsCheckMCPSlugAvailabilityProjectSlugInputFlag)
			}
		case "variations":
			c := variationsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "upsert-global":
				endpoint = c.UpsertGlobal()
				data, err = variationsc.BuildUpsertGlobalPayload(*variationsUpsertGlobalBodyFlag, *variationsUpsertGlobalSessionTokenFlag, *variationsUpsertGlobalApikeyTokenFlag, *variationsUpsertGlobalProjectSlugInputFlag)
			case "delete-global":
				endpoint = c.DeleteGlobal()
				data, err = variationsc.BuildDeleteGlobalPayload(*variationsDeleteGlobalVariationIDFlag, *variationsDeleteGlobalSessionTokenFlag, *variationsDeleteGlobalApikeyTokenFlag, *variationsDeleteGlobalProjectSlugInputFlag)
			case "list-global":
				endpoint = c.ListGlobal()
				data, err = variationsc.BuildListGlobalPayload(*variationsListGlobalSessionTokenFlag, *variationsListGlobalApikeyTokenFlag, *variationsListGlobalProjectSlugInputFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// assetsUsage displays the usage of the assets command and its subcommands.
func assetsUsage() {
	fmt.Fprintf(os.Stderr, `Manages assets used by Gram projects.
Usage:
    %[1]s [globalflags] assets COMMAND [flags]

COMMAND:
    serve-image: Serve an image from Gram.
    upload-image: Upload an image to Gram.
    upload-open-ap-iv3: Upload an OpenAPI v3 document to Gram.

Additional help:
    %[1]s assets COMMAND --help
`, os.Args[0])
}
func assetsServeImageUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] assets serve-image -id STRING -session-token STRING

Serve an image from Gram.
    -id STRING: 
    -session-token STRING: 

Example:
    %[1]s assets serve-image --id "Ullam expedita totam quos fugit sed consequatur." --session-token "Officia error distinctio quia commodi ad."
`, os.Args[0])
}

func assetsUploadImageUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] assets upload-image -content-type STRING -content-length INT64 -apikey-token STRING -project-slug-input STRING -session-token STRING -stream STRING

Upload an image to Gram.
    -content-type STRING: 
    -content-length INT64: 
    -apikey-token STRING: 
    -project-slug-input STRING: 
    -session-token STRING: 
    -stream STRING: path to file containing the streamed request body

Example:
    %[1]s assets upload-image --content-type "Praesentium voluptates reprehenderit vel sed." --content-length 1159453301218142136 --apikey-token "Sed et qui officia repellendus." --project-slug-input "Necessitatibus aut dignissimos sit ullam." --session-token "Error unde tempora itaque nemo qui." --stream "goa.png"
`, os.Args[0])
}

func assetsUploadOpenAPIv3Usage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] assets upload-open-ap-iv3 -content-type STRING -content-length INT64 -apikey-token STRING -project-slug-input STRING -session-token STRING -stream STRING

Upload an OpenAPI v3 document to Gram.
    -content-type STRING: 
    -content-length INT64: 
    -apikey-token STRING: 
    -project-slug-input STRING: 
    -session-token STRING: 
    -stream STRING: path to file containing the streamed request body

Example:
    %[1]s assets upload-open-ap-iv3 --content-type "Quia sed." --content-length 1425731124945577239 --apikey-token "Ipsum exercitationem eum eveniet et eum et." --project-slug-input "Sed aliquam quisquam aperiam adipisci." --session-token "Explicabo aut." --stream "goa.png"
`, os.Args[0])
}

// authUsage displays the usage of the auth command and its subcommands.
func authUsage() {
	fmt.Fprintf(os.Stderr, `Managed auth for gram producers and dashboard.
Usage:
    %[1]s [globalflags] auth COMMAND [flags]

COMMAND:
    callback: Handles the authentication callback.
    login: Proxies to auth login through speakeasy oidc.
    switch-scopes: Switches the authentication scope to a different organization.
    logout: Logs out the current user by clearing their session.
    register: Register a new org for a user with their session information.
    info: Provides information about the current authentication status.

Additional help:
    %[1]s auth COMMAND --help
`, os.Args[0])
}
func authCallbackUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth callback -id-token STRING

Handles the authentication callback.
    -id-token STRING: 

Example:
    %[1]s auth callback --id-token "Iste ex incidunt et deleniti qui quasi."
`, os.Args[0])
}

func authLoginUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth login

Proxies to auth login through speakeasy oidc.

Example:
    %[1]s auth login
`, os.Args[0])
}

func authSwitchScopesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth switch-scopes -organization-id STRING -project-id STRING -session-token STRING

Switches the authentication scope to a different organization.
    -organization-id STRING: 
    -project-id STRING: 
    -session-token STRING: 

Example:
    %[1]s auth switch-scopes --organization-id "Aut et ratione." --project-id "In ipsam fugiat in et." --session-token "Repellat sed ipsam ipsam saepe."
`, os.Args[0])
}

func authLogoutUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth logout -session-token STRING

Logs out the current user by clearing their session.
    -session-token STRING: 

Example:
    %[1]s auth logout --session-token "Est non voluptatum totam dignissimos."
`, os.Args[0])
}

func authRegisterUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth register -body JSON -session-token STRING

Register a new org for a user with their session information.
    -body JSON: 
    -session-token STRING: 

Example:
    %[1]s auth register --body '{
      "org_name": "Mollitia voluptatem consequuntur architecto natus cumque."
   }' --session-token "Velit ducimus."
`, os.Args[0])
}

func authInfoUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth info -session-token STRING

Provides information about the current authentication status.
    -session-token STRING: 

Example:
    %[1]s auth info --session-token "Sint a atque voluptatum non velit iste."
`, os.Args[0])
}

// chatUsage displays the usage of the chat command and its subcommands.
func chatUsage() {
	fmt.Fprintf(os.Stderr, `Managed chats for gram AI consumers.
Usage:
    %[1]s [globalflags] chat COMMAND [flags]

COMMAND:
    list-chats: List all chats for a project
    load-chat: Load a chat by its ID

Additional help:
    %[1]s chat COMMAND --help
`, os.Args[0])
}
func chatListChatsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] chat list-chats -session-token STRING -project-slug-input STRING

List all chats for a project
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s chat list-chats --session-token "A dolores labore accusamus non qui optio." --project-slug-input "Earum dolorum ipsam enim temporibus aut omnis."
`, os.Args[0])
}

func chatLoadChatUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] chat load-chat -id STRING -session-token STRING -project-slug-input STRING

Load a chat by its ID
    -id STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s chat load-chat --id "Perspiciatis amet." --session-token "Nihil ex velit qui." --project-slug-input "Quaerat quo."
`, os.Args[0])
}

// deploymentsUsage displays the usage of the deployments command and its
// subcommands.
func deploymentsUsage() {
	fmt.Fprintf(os.Stderr, `Manages deployments of tools from upstream sources.
Usage:
    %[1]s [globalflags] deployments COMMAND [flags]

COMMAND:
    get-deployment: Get a deployment by its ID.
    get-latest-deployment: Get the latest deployment for a project.
    create-deployment: Create a deployment to load tool definitions.
    evolve: Create a new deployment with additional or updated tool sources.
    list-deployments: List all deployments in descending order of creation.
    get-deployment-logs: Get logs for a deployment.

Additional help:
    %[1]s deployments COMMAND --help
`, os.Args[0])
}
func deploymentsGetDeploymentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] deployments get-deployment -id STRING -apikey-token STRING -session-token STRING -project-slug-input STRING

Get a deployment by its ID.
    -id STRING: 
    -apikey-token STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s deployments get-deployment --id "Molestiae impedit voluptas veritatis minima dicta." --apikey-token "Quaerat voluptas mollitia hic repellendus in enim." --session-token "Ea provident ut id hic quas aperiam." --project-slug-input "Exercitationem eaque harum asperiores qui."
`, os.Args[0])
}

func deploymentsGetLatestDeploymentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] deployments get-latest-deployment -apikey-token STRING -session-token STRING -project-slug-input STRING

Get the latest deployment for a project.
    -apikey-token STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s deployments get-latest-deployment --apikey-token "Sapiente sed vero modi et rerum." --session-token "Praesentium at nihil mollitia." --project-slug-input "Fugiat reiciendis dolores cum est nemo."
`, os.Args[0])
}

func deploymentsCreateDeploymentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] deployments create-deployment -body JSON -apikey-token STRING -session-token STRING -project-slug-input STRING -idempotency-key STRING

Create a deployment to load tool definitions.
    -body JSON: 
    -apikey-token STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 
    -idempotency-key STRING: 

Example:
    %[1]s deployments create-deployment --body '{
      "external_id": "bc5f4a555e933e6861d12edba4c2d87ef6caf8e6",
      "external_url": "Possimus qui est voluptates eligendi ut vero.",
      "github_pr": "1234",
      "github_repo": "speakeasyapi/gram",
      "github_sha": "f33e693e9e12552043bc0ec5c37f1b8a9e076161",
      "openapiv3_assets": [
         {
            "asset_id": "Enim non autem ratione animi et.",
            "name": "Officia ut rerum.",
            "slug": "qm0"
         },
         {
            "asset_id": "Enim non autem ratione animi et.",
            "name": "Officia ut rerum.",
            "slug": "qm0"
         },
         {
            "asset_id": "Enim non autem ratione animi et.",
            "name": "Officia ut rerum.",
            "slug": "qm0"
         },
         {
            "asset_id": "Enim non autem ratione animi et.",
            "name": "Officia ut rerum.",
            "slug": "qm0"
         }
      ],
      "packages": [
         {
            "name": "Dolores pariatur nisi et officiis sapiente impedit.",
            "version": "Adipisci ab odit maxime ut possimus."
         },
         {
            "name": "Dolores pariatur nisi et officiis sapiente impedit.",
            "version": "Adipisci ab odit maxime ut possimus."
         }
      ]
   }' --apikey-token "Quis qui cumque dolor et molestiae doloremque." --session-token "Omnis hic magni ea ipsum et." --project-slug-input "Qui aut necessitatibus sunt nisi velit." --idempotency-key "01jqq0ajmb4qh9eppz48dejr2m"
`, os.Args[0])
}

func deploymentsEvolveUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] deployments evolve -body JSON -apikey-token STRING -session-token STRING -project-slug-input STRING

Create a new deployment with additional or updated tool sources.
    -body JSON: 
    -apikey-token STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s deployments evolve --body '{
      "deployment_id": "Voluptatem ab esse explicabo eligendi labore.",
      "exclude_openapiv3_assets": [
         "Est praesentium voluptate voluptas.",
         "Enim rerum iste magni et.",
         "Vel doloribus labore rem velit aspernatur."
      ],
      "exclude_packages": [
         "Nobis incidunt voluptas et occaecati.",
         "Nostrum eius voluptatem nostrum.",
         "Accusamus accusamus ex in harum.",
         "Enim et at omnis quidem et sed."
      ],
      "upsert_openapiv3_assets": [
         {
            "asset_id": "Enim non autem ratione animi et.",
            "name": "Officia ut rerum.",
            "slug": "qm0"
         },
         {
            "asset_id": "Enim non autem ratione animi et.",
            "name": "Officia ut rerum.",
            "slug": "qm0"
         },
         {
            "asset_id": "Enim non autem ratione animi et.",
            "name": "Officia ut rerum.",
            "slug": "qm0"
         }
      ],
      "upsert_packages": [
         {
            "name": "Voluptatem est quaerat rerum rem quia veniam.",
            "version": "Eos recusandae."
         },
         {
            "name": "Voluptatem est quaerat rerum rem quia veniam.",
            "version": "Eos recusandae."
         }
      ]
   }' --apikey-token "Voluptas deleniti doloribus harum." --session-token "Tenetur aperiam odit accusantium." --project-slug-input "Tenetur sed."
`, os.Args[0])
}

func deploymentsListDeploymentsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] deployments list-deployments -cursor STRING -apikey-token STRING -session-token STRING -project-slug-input STRING

List all deployments in descending order of creation.
    -cursor STRING: 
    -apikey-token STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s deployments list-deployments --cursor "Eos consequuntur." --apikey-token "Atque sit debitis et soluta illum quod." --session-token "Natus eaque." --project-slug-input "Veritatis nihil illo repellendus quisquam."
`, os.Args[0])
}

func deploymentsGetDeploymentLogsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] deployments get-deployment-logs -deployment-id STRING -cursor STRING -apikey-token STRING -session-token STRING -project-slug-input STRING

Get logs for a deployment.
    -deployment-id STRING: 
    -cursor STRING: 
    -apikey-token STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s deployments get-deployment-logs --deployment-id "Omnis corporis ex tenetur distinctio." --cursor "Est nihil vel est ea." --apikey-token "Ex atque iure aut commodi ullam iusto." --session-token "Et dolor nisi aut doloremque animi assumenda." --project-slug-input "Tempore aliquid omnis saepe et."
`, os.Args[0])
}

// domainsUsage displays the usage of the domains command and its subcommands.
func domainsUsage() {
	fmt.Fprintf(os.Stderr, `Manage custom domains for gram.
Usage:
    %[1]s [globalflags] domains COMMAND [flags]

COMMAND:
    get-domain: Get the custom domain for a project
    create-domain: Create a custom domain for a organization
    delete-domain: Delete a custom domain

Additional help:
    %[1]s domains COMMAND --help
`, os.Args[0])
}
func domainsGetDomainUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] domains get-domain -session-token STRING -project-slug-input STRING

Get the custom domain for a project
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s domains get-domain --session-token "Iste est saepe." --project-slug-input "Reiciendis ut alias a at."
`, os.Args[0])
}

func domainsCreateDomainUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] domains create-domain -body JSON -session-token STRING -project-slug-input STRING

Create a custom domain for a organization
    -body JSON: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s domains create-domain --body '{
      "domain": "Facere voluptatem."
   }' --session-token "Repellat soluta reiciendis." --project-slug-input "Vel quia odio."
`, os.Args[0])
}

func domainsDeleteDomainUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] domains delete-domain -session-token STRING -project-slug-input STRING

Delete a custom domain
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s domains delete-domain --session-token "Velit aut voluptatibus dolor." --project-slug-input "Sint facilis alias ut optio sit."
`, os.Args[0])
}

// environmentsUsage displays the usage of the environments command and its
// subcommands.
func environmentsUsage() {
	fmt.Fprintf(os.Stderr, `Managing toolset environments.
Usage:
    %[1]s [globalflags] environments COMMAND [flags]

COMMAND:
    create-environment: Create a new environment
    list-environments: List all environments for an organization
    update-environment: Update an environment
    delete-environment: Delete an environment

Additional help:
    %[1]s environments COMMAND --help
`, os.Args[0])
}
func environmentsCreateEnvironmentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] environments create-environment -body JSON -session-token STRING -project-slug-input STRING

Create a new environment
    -body JSON: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s environments create-environment --body '{
      "description": "Et molestiae temporibus vero labore consequatur.",
      "entries": [
         {
            "name": "Vero deleniti totam.",
            "value": "Voluptatum repellat."
         },
         {
            "name": "Vero deleniti totam.",
            "value": "Voluptatum repellat."
         },
         {
            "name": "Vero deleniti totam.",
            "value": "Voluptatum repellat."
         }
      ],
      "name": "Est dolores.",
      "organization_id": "Sed sequi laudantium qui."
   }' --session-token "Voluptatem suscipit." --project-slug-input "Suscipit quo minima laboriosam ipsam qui."
`, os.Args[0])
}

func environmentsListEnvironmentsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] environments list-environments -session-token STRING -project-slug-input STRING

List all environments for an organization
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s environments list-environments --session-token "Rerum dolor non consequatur suscipit doloribus quo." --project-slug-input "Quam maiores dolore consequatur voluptate quia qui."
`, os.Args[0])
}

func environmentsUpdateEnvironmentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] environments update-environment -body JSON -slug STRING -session-token STRING -project-slug-input STRING

Update an environment
    -body JSON: 
    -slug STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s environments update-environment --body '{
      "description": "Dignissimos ut vel similique qui hic.",
      "entries_to_remove": [
         "Dolorem dolores non et excepturi omnis.",
         "Quod quo atque voluptatibus aut.",
         "Iusto ducimus occaecati accusantium quas.",
         "Aut delectus."
      ],
      "entries_to_update": [
         {
            "name": "Vero deleniti totam.",
            "value": "Voluptatum repellat."
         },
         {
            "name": "Vero deleniti totam.",
            "value": "Voluptatum repellat."
         },
         {
            "name": "Vero deleniti totam.",
            "value": "Voluptatum repellat."
         },
         {
            "name": "Vero deleniti totam.",
            "value": "Voluptatum repellat."
         }
      ],
      "name": "Illo quod distinctio."
   }' --slug "qno" --session-token "Est non architecto." --project-slug-input "Velit iure et corrupti quia quis."
`, os.Args[0])
}

func environmentsDeleteEnvironmentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] environments delete-environment -slug STRING -session-token STRING -project-slug-input STRING

Delete an environment
    -slug STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s environments delete-environment --slug "kip" --session-token "Optio sunt." --project-slug-input "Suscipit dignissimos odio libero ad."
`, os.Args[0])
}

// instancesUsage displays the usage of the instances command and its
// subcommands.
func instancesUsage() {
	fmt.Fprintf(os.Stderr, `Consumer APIs for interacting with all relevant data for an instance of a toolset and environment.
Usage:
    %[1]s [globalflags] instances COMMAND [flags]

COMMAND:
    get-instance: Load all relevant data for an instance of a toolset and environment

Additional help:
    %[1]s instances COMMAND --help
`, os.Args[0])
}
func instancesGetInstanceUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] instances get-instance -toolset-slug STRING -environment-slug STRING -session-token STRING -project-slug-input STRING -apikey-token STRING

Load all relevant data for an instance of a toolset and environment
    -toolset-slug STRING: 
    -environment-slug STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 
    -apikey-token STRING: 

Example:
    %[1]s instances get-instance --toolset-slug "m2c" --environment-slug "by3" --session-token "Sed nisi voluptatem saepe eum." --project-slug-input "Harum ea qui repudiandae nesciunt dolor." --apikey-token "Minima provident error dolor perferendis."
`, os.Args[0])
}

// integrationsUsage displays the usage of the integrations command and its
// subcommands.
func integrationsUsage() {
	fmt.Fprintf(os.Stderr, `Explore third-party tools in Gram.
Usage:
    %[1]s [globalflags] integrations COMMAND [flags]

COMMAND:
    get: Get a third-party integration by ID or name.
    list: List available third-party integrations.

Additional help:
    %[1]s integrations COMMAND --help
`, os.Args[0])
}
func integrationsGetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] integrations get -id STRING -name STRING -session-token STRING -project-slug-input STRING

Get a third-party integration by ID or name.
    -id STRING: 
    -name STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s integrations get --id "Aut et sit possimus aut et." --name "Ea quia neque id amet hic rerum." --session-token "Voluptatum in qui culpa." --project-slug-input "Quae dolorem reiciendis pariatur autem aut."
`, os.Args[0])
}

func integrationsListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] integrations list -keywords JSON -session-token STRING -project-slug-input STRING

List available third-party integrations.
    -keywords JSON: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s integrations list --keywords '[
      "klm",
      "tw8",
      "73q"
   ]' --session-token "Culpa iusto." --project-slug-input "Laborum aut neque."
`, os.Args[0])
}

// keysUsage displays the usage of the keys command and its subcommands.
func keysUsage() {
	fmt.Fprintf(os.Stderr, `Managing system api keys.
Usage:
    %[1]s [globalflags] keys COMMAND [flags]

COMMAND:
    create-key: Create a new api key
    list-keys: List all api keys for an organization
    revoke-key: Revoke a api key

Additional help:
    %[1]s keys COMMAND --help
`, os.Args[0])
}
func keysCreateKeyUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] keys create-key -body JSON -session-token STRING

Create a new api key
    -body JSON: 
    -session-token STRING: 

Example:
    %[1]s keys create-key --body '{
      "name": "Sint omnis enim ullam odit."
   }' --session-token "Assumenda vero incidunt."
`, os.Args[0])
}

func keysListKeysUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] keys list-keys -session-token STRING

List all api keys for an organization
    -session-token STRING: 

Example:
    %[1]s keys list-keys --session-token "Voluptatum aspernatur voluptatem alias laudantium ut quibusdam."
`, os.Args[0])
}

func keysRevokeKeyUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] keys revoke-key -id STRING -session-token STRING

Revoke a api key
    -id STRING: 
    -session-token STRING: 

Example:
    %[1]s keys revoke-key --id "Non amet." --session-token "Doloribus dolor rerum ducimus eveniet tempore neque."
`, os.Args[0])
}

// packagesUsage displays the usage of the packages command and its subcommands.
func packagesUsage() {
	fmt.Fprintf(os.Stderr, `Manages packages in Gram.
Usage:
    %[1]s [globalflags] packages COMMAND [flags]

COMMAND:
    create-package: Create a new package for a project.
    update-package: Update package details.
    list-packages: List all packages for a project.
    list-versions: List published versions of a package.
    publish: Publish a new version of a package.

Additional help:
    %[1]s packages COMMAND --help
`, os.Args[0])
}
func packagesCreatePackageUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] packages create-package -body JSON -apikey-token STRING -session-token STRING -project-slug-input STRING

Create a new package for a project.
    -body JSON: 
    -apikey-token STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s packages create-package --body '{
      "description": "po8",
      "image_asset_id": "al7",
      "keywords": [
         "Minus modi exercitationem nam pariatur velit.",
         "Itaque eos tempora repellendus adipisci nobis.",
         "Consequuntur ea dolor reiciendis culpa."
      ],
      "name": "m3h",
      "summary": "dsw",
      "title": "71h",
      "url": "yl5"
   }' --apikey-token "Beatae hic sed nemo iure." --session-token "Perspiciatis soluta qui reiciendis ipsa aliquid incidunt." --project-slug-input "Praesentium eum."
`, os.Args[0])
}

func packagesUpdatePackageUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] packages update-package -body JSON -apikey-token STRING -session-token STRING -project-slug-input STRING

Update package details.
    -body JSON: 
    -apikey-token STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s packages update-package --body '{
      "description": "5co",
      "id": "05m",
      "image_asset_id": "fxf",
      "keywords": [
         "Blanditiis iste qui assumenda rerum ut.",
         "Neque consequuntur officia quis incidunt laborum sint.",
         "Nostrum similique doloribus."
      ],
      "summary": "6mm",
      "title": "xdl",
      "url": "8sj"
   }' --apikey-token "At reiciendis in earum esse." --session-token "Et corrupti." --project-slug-input "Cupiditate aliquid consequatur."
`, os.Args[0])
}

func packagesListPackagesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] packages list-packages -apikey-token STRING -session-token STRING -project-slug-input STRING

List all packages for a project.
    -apikey-token STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s packages list-packages --apikey-token "Quo voluptas quod cumque perferendis quos rerum." --session-token "Laborum accusantium est eligendi qui deleniti." --project-slug-input "Blanditiis laborum ullam."
`, os.Args[0])
}

func packagesListVersionsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] packages list-versions -name STRING -apikey-token STRING -session-token STRING -project-slug-input STRING

List published versions of a package.
    -name STRING: 
    -apikey-token STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s packages list-versions --name "Possimus autem id voluptatem voluptates consequatur libero." --apikey-token "Commodi id aperiam." --session-token "Rerum necessitatibus dignissimos." --project-slug-input "Nobis assumenda sint omnis."
`, os.Args[0])
}

func packagesPublishUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] packages publish -body JSON -apikey-token STRING -session-token STRING -project-slug-input STRING

Publish a new version of a package.
    -body JSON: 
    -apikey-token STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s packages publish --body '{
      "deployment_id": "Numquam in voluptatibus.",
      "name": "Voluptatem omnis aut.",
      "version": "Quia aperiam incidunt qui tempore earum dignissimos.",
      "visibility": "public"
   }' --apikey-token "Eaque a quos perferendis sed aliquid." --session-token "Nemo laudantium expedita fugiat ut." --project-slug-input "Accusantium mollitia et sit excepturi."
`, os.Args[0])
}

// projectsUsage displays the usage of the projects command and its subcommands.
func projectsUsage() {
	fmt.Fprintf(os.Stderr, `Manages projects in Gram.
Usage:
    %[1]s [globalflags] projects COMMAND [flags]

COMMAND:
    create-project: Create a new project.
    list-projects: List all projects for an organization.

Additional help:
    %[1]s projects COMMAND --help
`, os.Args[0])
}
func projectsCreateProjectUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] projects create-project -body JSON -apikey-token STRING -session-token STRING

Create a new project.
    -body JSON: 
    -apikey-token STRING: 
    -session-token STRING: 

Example:
    %[1]s projects create-project --body '{
      "name": "zak",
      "organization_id": "Voluptatum eius enim sunt non."
   }' --apikey-token "Molestias excepturi est voluptas facere qui." --session-token "Similique magnam ducimus."
`, os.Args[0])
}

func projectsListProjectsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] projects list-projects -organization-id STRING -session-token STRING -apikey-token STRING

List all projects for an organization.
    -organization-id STRING: 
    -session-token STRING: 
    -apikey-token STRING: 

Example:
    %[1]s projects list-projects --organization-id "Aut modi nam vel delectus error." --session-token "Iste iusto qui incidunt." --apikey-token "Omnis laboriosam enim nam ea consequatur et."
`, os.Args[0])
}

// slackUsage displays the usage of the slack command and its subcommands.
func slackUsage() {
	fmt.Fprintf(os.Stderr, `Auth and interactions for the Gram Slack App.
Usage:
    %[1]s [globalflags] slack COMMAND [flags]

COMMAND:
    callback: Handles the authentication callback.
    login: Proxies to auth login through speakeasy oidc.
    get-slack-connection: get slack connection for an organization and project.
    update-slack-connection: update slack connection for an organization and project.
    delete-slack-connection: delete slack connection for an organization and project.

Additional help:
    %[1]s slack COMMAND --help
`, os.Args[0])
}
func slackCallbackUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] slack callback -state STRING -code STRING

Handles the authentication callback.
    -state STRING: 
    -code STRING: 

Example:
    %[1]s slack callback --state "Officiis maiores ea in minus." --code "Nemo explicabo rem similique quos voluptates enim."
`, os.Args[0])
}

func slackLoginUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] slack login -project-slug STRING -return-url STRING -session-token STRING

Proxies to auth login through speakeasy oidc.
    -project-slug STRING: 
    -return-url STRING: 
    -session-token STRING: 

Example:
    %[1]s slack login --project-slug "Asperiores harum aut ratione cupiditate et ipsam." --return-url "Et exercitationem." --session-token "Magnam libero."
`, os.Args[0])
}

func slackGetSlackConnectionUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] slack get-slack-connection -session-token STRING -project-slug-input STRING

get slack connection for an organization and project.
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s slack get-slack-connection --session-token "Vitae ducimus necessitatibus." --project-slug-input "Saepe qui tempore ut mollitia."
`, os.Args[0])
}

func slackUpdateSlackConnectionUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] slack update-slack-connection -body JSON -session-token STRING -project-slug-input STRING

update slack connection for an organization and project.
    -body JSON: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s slack update-slack-connection --body '{
      "default_toolset_slug": "Ipsa ut asperiores."
   }' --session-token "Illum delectus sit aut." --project-slug-input "Aliquam ut corporis distinctio."
`, os.Args[0])
}

func slackDeleteSlackConnectionUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] slack delete-slack-connection -session-token STRING -project-slug-input STRING

delete slack connection for an organization and project.
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s slack delete-slack-connection --session-token "Molestiae aut quis sed aut debitis voluptatem." --project-slug-input "Tempore cupiditate cumque eos."
`, os.Args[0])
}

// templatesUsage displays the usage of the templates command and its
// subcommands.
func templatesUsage() {
	fmt.Fprintf(os.Stderr, `Manages re-usable prompt templates and higher-order tools for a project.
Usage:
    %[1]s [globalflags] templates COMMAND [flags]

COMMAND:
    create-template: Create a new prompt template.
    update-template: Update a prompt template.
    get-template: Get prompt template by its ID or name.
    list-templates: List available prompt template.
    delete-template: Delete prompt template by its ID or name.
    render-template: Render a prompt template given some input data.

Additional help:
    %[1]s templates COMMAND --help
`, os.Args[0])
}
func templatesCreateTemplateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] templates create-template -body JSON -apikey-token STRING -session-token STRING -project-slug-input STRING

Create a new prompt template.
    -body JSON: 
    -apikey-token STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s templates create-template --body '{
      "arguments": "{\"name\":\"example\",\"email\":\"mail@example.com\"}",
      "description": "Commodi perferendis enim cum perferendis voluptatem earum.",
      "engine": "mustache",
      "kind": "prompt",
      "name": "09n",
      "prompt": "Animi ut consectetur ut.",
      "tools_hint": [
         "Excepturi esse architecto asperiores.",
         "Molestiae maxime.",
         "Omnis autem."
      ]
   }' --apikey-token "Et iusto unde maxime qui." --session-token "Accusantium et." --project-slug-input "Ut magnam."
`, os.Args[0])
}

func templatesUpdateTemplateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] templates update-template -body JSON -apikey-token STRING -session-token STRING -project-slug-input STRING

Update a prompt template.
    -body JSON: 
    -apikey-token STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s templates update-template --body '{
      "arguments": "{\"name\":\"example\",\"email\":\"mail@example.com\"}",
      "description": "Nihil vel.",
      "engine": "mustache",
      "id": "Sed eligendi assumenda sit cumque.",
      "kind": "prompt",
      "prompt": "Molestiae in harum.",
      "tools_hint": [
         "Vero voluptate porro quis repellendus.",
         "Rerum sint possimus dolore recusandae amet.",
         "Illum ea."
      ]
   }' --apikey-token "Accusamus nihil porro fugiat ut." --session-token "Animi quia et dolorum ut totam." --project-slug-input "Et sed omnis esse laborum corrupti eligendi."
`, os.Args[0])
}

func templatesGetTemplateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] templates get-template -id STRING -name STRING -apikey-token STRING -session-token STRING -project-slug-input STRING

Get prompt template by its ID or name.
    -id STRING: 
    -name STRING: 
    -apikey-token STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s templates get-template --id "Vitae quod fugiat sit natus qui." --name "Ab ullam architecto saepe et voluptas amet." --apikey-token "Odit consectetur aut." --session-token "Enim asperiores dolore blanditiis amet." --project-slug-input "Et ex cum quas maiores esse perspiciatis."
`, os.Args[0])
}

func templatesListTemplatesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] templates list-templates -apikey-token STRING -session-token STRING -project-slug-input STRING

List available prompt template.
    -apikey-token STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s templates list-templates --apikey-token "Neque et ea corrupti sunt." --session-token "Deserunt necessitatibus voluptas." --project-slug-input "In dolore."
`, os.Args[0])
}

func templatesDeleteTemplateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] templates delete-template -id STRING -name STRING -apikey-token STRING -session-token STRING -project-slug-input STRING

Delete prompt template by its ID or name.
    -id STRING: 
    -name STRING: 
    -apikey-token STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s templates delete-template --id "Quaerat reiciendis exercitationem eius veritatis facilis qui." --name "Ut possimus." --apikey-token "Accusamus tempore qui." --session-token "Rerum error velit voluptates unde." --project-slug-input "Tempore perferendis ut."
`, os.Args[0])
}

func templatesRenderTemplateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] templates render-template -body JSON -id STRING -apikey-token STRING -session-token STRING -project-slug-input STRING

Render a prompt template given some input data.
    -body JSON: 
    -id STRING: 
    -apikey-token STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s templates render-template --body '{
      "arguments": {
         "Illum aliquid quasi rem id quia expedita.": "Neque esse praesentium est accusantium impedit autem.",
         "Nesciunt tempora officia.": "Magnam facilis commodi eum voluptatem."
      }
   }' --id "Quod corrupti provident sed." --apikey-token "Est maxime vel placeat ab." --session-token "Voluptatem aut similique qui est consectetur." --project-slug-input "Quae saepe quaerat."
`, os.Args[0])
}

// toolsUsage displays the usage of the tools command and its subcommands.
func toolsUsage() {
	fmt.Fprintf(os.Stderr, `Dashboard API for interacting with tools.
Usage:
    %[1]s [globalflags] tools COMMAND [flags]

COMMAND:
    list-tools: List all tools for a project

Additional help:
    %[1]s tools COMMAND --help
`, os.Args[0])
}
func toolsListToolsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] tools list-tools -cursor STRING -limit INT32 -deployment-id STRING -session-token STRING -project-slug-input STRING

List all tools for a project
    -cursor STRING: 
    -limit INT32: 
    -deployment-id STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s tools list-tools --cursor "Quis aut minus sapiente ea et." --limit 301568059 --deployment-id "Molestiae consequuntur officiis sed ratione sit quis." --session-token "Et sapiente temporibus possimus." --project-slug-input "Omnis ut itaque alias."
`, os.Args[0])
}

// toolsetsUsage displays the usage of the toolsets command and its subcommands.
func toolsetsUsage() {
	fmt.Fprintf(os.Stderr, `Managed toolsets for gram AI consumers.
Usage:
    %[1]s [globalflags] toolsets COMMAND [flags]

COMMAND:
    create-toolset: Create a new toolset with associated tools
    list-toolsets: List all toolsets for a project
    update-toolset: Update a toolset's properties including name, description, and HTTP tools
    delete-toolset: Delete a toolset by its ID
    get-toolset: Get detailed information about a toolset including full HTTP tool definitions
    check-mcp-slug-availability: Check if a MCP slug is available

Additional help:
    %[1]s toolsets COMMAND --help
`, os.Args[0])
}
func toolsetsCreateToolsetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] toolsets create-toolset -body JSON -session-token STRING -project-slug-input STRING

Create a new toolset with associated tools
    -body JSON: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s toolsets create-toolset --body '{
      "default_environment_slug": "01x",
      "description": "Et enim deserunt et.",
      "http_tool_names": [
         "Soluta voluptatibus cum.",
         "Adipisci consequatur provident deleniti consectetur.",
         "Omnis aut veniam non quod voluptatem.",
         "Ut facere soluta aperiam qui quidem."
      ],
      "name": "Ad voluptatibus consequatur reiciendis voluptatum eveniet."
   }' --session-token "Voluptate error pariatur." --project-slug-input "Libero hic et libero necessitatibus ex."
`, os.Args[0])
}

func toolsetsListToolsetsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] toolsets list-toolsets -session-token STRING -project-slug-input STRING

List all toolsets for a project
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s toolsets list-toolsets --session-token "Aut aut libero magni." --project-slug-input "Cupiditate ipsam consectetur in."
`, os.Args[0])
}

func toolsetsUpdateToolsetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] toolsets update-toolset -body JSON -slug STRING -session-token STRING -project-slug-input STRING

Update a toolset's properties including name, description, and HTTP tools
    -body JSON: 
    -slug STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s toolsets update-toolset --body '{
      "custom_domain_id": "Voluptas quos molestiae accusantium voluptate enim magni.",
      "default_environment_slug": "pij",
      "description": "Aut quo.",
      "http_tool_names": [
         "Et totam illo placeat.",
         "Non aut debitis cumque commodi dolor non.",
         "Unde modi cum quia similique quam in.",
         "Ut voluptatem."
      ],
      "mcp_is_public": true,
      "mcp_slug": "u5r",
      "name": "Asperiores nisi culpa est rem qui.",
      "prompt_template_names": [
         "Est molestiae autem eos at ut earum.",
         "Temporibus autem.",
         "Voluptas voluptas."
      ]
   }' --slug "mns" --session-token "Libero accusamus quia." --project-slug-input "Et qui."
`, os.Args[0])
}

func toolsetsDeleteToolsetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] toolsets delete-toolset -slug STRING -session-token STRING -project-slug-input STRING

Delete a toolset by its ID
    -slug STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s toolsets delete-toolset --slug "70k" --session-token "Tempore repellendus eum." --project-slug-input "Aperiam molestiae."
`, os.Args[0])
}

func toolsetsGetToolsetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] toolsets get-toolset -slug STRING -session-token STRING -project-slug-input STRING

Get detailed information about a toolset including full HTTP tool definitions
    -slug STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s toolsets get-toolset --slug "351" --session-token "Delectus sed in maxime repudiandae laborum." --project-slug-input "Voluptas saepe explicabo voluptas."
`, os.Args[0])
}

func toolsetsCheckMCPSlugAvailabilityUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] toolsets check-mcp-slug-availability -slug STRING -session-token STRING -project-slug-input STRING

Check if a MCP slug is available
    -slug STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s toolsets check-mcp-slug-availability --slug "q07" --session-token "Quae aliquam ad labore dolor." --project-slug-input "Quam voluptatum quis iusto."
`, os.Args[0])
}

// variationsUsage displays the usage of the variations command and its
// subcommands.
func variationsUsage() {
	fmt.Fprintf(os.Stderr, `Manage variations of tools.
Usage:
    %[1]s [globalflags] variations COMMAND [flags]

COMMAND:
    upsert-global: Create or update a globally defined tool variation.
    delete-global: Create or update a globally defined tool variation.
    list-global: List globally defined tool variations.

Additional help:
    %[1]s variations COMMAND --help
`, os.Args[0])
}
func variationsUpsertGlobalUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] variations upsert-global -body JSON -session-token STRING -apikey-token STRING -project-slug-input STRING

Create or update a globally defined tool variation.
    -body JSON: 
    -session-token STRING: 
    -apikey-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s variations upsert-global --body '{
      "confirm": "always",
      "confirm_prompt": "Fugiat aperiam iure.",
      "description": "Ullam nam aliquam exercitationem quia ut rerum.",
      "name": "Quia perspiciatis minus ea cum.",
      "src_tool_name": "Odio a.",
      "summarizer": "Et sit voluptas.",
      "summary": "Officia ipsam omnis dolores qui minima.",
      "tags": [
         "Quo suscipit animi aut dignissimos sequi.",
         "Voluptatem a aut placeat occaecati."
      ]
   }' --session-token "Quasi ab ut velit nobis rerum." --apikey-token "Pariatur sit provident." --project-slug-input "Minus eos suscipit fuga porro ipsa quo."
`, os.Args[0])
}

func variationsDeleteGlobalUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] variations delete-global -variation-id STRING -session-token STRING -apikey-token STRING -project-slug-input STRING

Create or update a globally defined tool variation.
    -variation-id STRING: 
    -session-token STRING: 
    -apikey-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s variations delete-global --variation-id "Provident ut ut vel officia." --session-token "Enim voluptates et vitae et repudiandae porro." --apikey-token "Modi magni non." --project-slug-input "Consequatur tenetur necessitatibus id est unde voluptate."
`, os.Args[0])
}

func variationsListGlobalUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] variations list-global -session-token STRING -apikey-token STRING -project-slug-input STRING

List globally defined tool variations.
    -session-token STRING: 
    -apikey-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s variations list-global --session-token "Et qui." --apikey-token "Qui sunt exercitationem hic molestiae eligendi atque." --project-slug-input "Sed id natus tempora sit."
`, os.Args[0])
}
