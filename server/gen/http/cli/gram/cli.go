// Code generated by goa v3.20.1, DO NOT EDIT.
//
// gram HTTP client CLI support package
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	assetsc "github.com/speakeasy-api/gram/gen/http/assets/client"
	authc "github.com/speakeasy-api/gram/gen/http/auth/client"
	chatc "github.com/speakeasy-api/gram/gen/http/chat/client"
	deploymentsc "github.com/speakeasy-api/gram/gen/http/deployments/client"
	environmentsc "github.com/speakeasy-api/gram/gen/http/environments/client"
	instancesc "github.com/speakeasy-api/gram/gen/http/instances/client"
	integrationsc "github.com/speakeasy-api/gram/gen/http/integrations/client"
	keysc "github.com/speakeasy-api/gram/gen/http/keys/client"
	packagesc "github.com/speakeasy-api/gram/gen/http/packages/client"
	projectsc "github.com/speakeasy-api/gram/gen/http/projects/client"
	toolsc "github.com/speakeasy-api/gram/gen/http/tools/client"
	toolsetsc "github.com/speakeasy-api/gram/gen/http/toolsets/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `assets (serve-image|upload-image|upload-open-ap-iv3)
auth (callback|login|switch-scopes|logout|info)
chat (list-chats|load-chat)
deployments (get-deployment|get-latest-deployment|create-deployment|evolve|list-deployments)
environments (create-environment|list-environments|update-environment|delete-environment)
integrations (get|list)
keys (create-key|list-keys|revoke-key)
packages (create-package|update-package|list-versions|publish)
projects (create-project|list-projects)
tools list-tools
instances get-instance
toolsets (create-toolset|list-toolsets|update-toolset|delete-toolset|get-toolset)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` assets serve-image --id "Nemo quisquam officia ut." --session-token "Aut inventore vero vero enim incidunt."` + "\n" +
		os.Args[0] + ` auth callback --id-token "Qui consequatur assumenda aut quia nobis."` + "\n" +
		os.Args[0] + ` chat list-chats --session-token "Aut aspernatur." --project-slug-input "Quas magni vitae corporis."` + "\n" +
		os.Args[0] + ` deployments get-deployment --id "Consequatur quaerat doloremque." --apikey-token "Enim voluptatem quasi ipsa officia voluptate." --session-token "Et occaecati." --project-slug-input "Amet fugit vel illum velit veniam voluptatem."` + "\n" +
		os.Args[0] + ` environments create-environment --body '{
      "description": "Totam dignissimos dolorem.",
      "entries": [
         {
            "name": "Sunt dolor.",
            "value": "Veritatis totam dolor vel."
         },
         {
            "name": "Sunt dolor.",
            "value": "Veritatis totam dolor vel."
         }
      ],
      "name": "Pariatur vero est non.",
      "organization_id": "Est aliquid."
   }' --session-token "Est rerum ea." --project-slug-input "Veniam accusantium consectetur."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		assetsFlags = flag.NewFlagSet("assets", flag.ContinueOnError)

		assetsServeImageFlags            = flag.NewFlagSet("serve-image", flag.ExitOnError)
		assetsServeImageIDFlag           = assetsServeImageFlags.String("id", "REQUIRED", "")
		assetsServeImageSessionTokenFlag = assetsServeImageFlags.String("session-token", "", "")

		assetsUploadImageFlags                = flag.NewFlagSet("upload-image", flag.ExitOnError)
		assetsUploadImageContentTypeFlag      = assetsUploadImageFlags.String("content-type", "REQUIRED", "")
		assetsUploadImageContentLengthFlag    = assetsUploadImageFlags.String("content-length", "REQUIRED", "")
		assetsUploadImageApikeyTokenFlag      = assetsUploadImageFlags.String("apikey-token", "", "")
		assetsUploadImageProjectSlugInputFlag = assetsUploadImageFlags.String("project-slug-input", "", "")
		assetsUploadImageSessionTokenFlag     = assetsUploadImageFlags.String("session-token", "", "")
		assetsUploadImageStreamFlag           = assetsUploadImageFlags.String("stream", "REQUIRED", "path to file containing the streamed request body")

		assetsUploadOpenAPIv3Flags                = flag.NewFlagSet("upload-open-ap-iv3", flag.ExitOnError)
		assetsUploadOpenAPIv3ContentTypeFlag      = assetsUploadOpenAPIv3Flags.String("content-type", "REQUIRED", "")
		assetsUploadOpenAPIv3ContentLengthFlag    = assetsUploadOpenAPIv3Flags.String("content-length", "REQUIRED", "")
		assetsUploadOpenAPIv3ApikeyTokenFlag      = assetsUploadOpenAPIv3Flags.String("apikey-token", "", "")
		assetsUploadOpenAPIv3ProjectSlugInputFlag = assetsUploadOpenAPIv3Flags.String("project-slug-input", "", "")
		assetsUploadOpenAPIv3SessionTokenFlag     = assetsUploadOpenAPIv3Flags.String("session-token", "", "")
		assetsUploadOpenAPIv3StreamFlag           = assetsUploadOpenAPIv3Flags.String("stream", "REQUIRED", "path to file containing the streamed request body")

		authFlags = flag.NewFlagSet("auth", flag.ContinueOnError)

		authCallbackFlags       = flag.NewFlagSet("callback", flag.ExitOnError)
		authCallbackIDTokenFlag = authCallbackFlags.String("id-token", "REQUIRED", "")

		authLoginFlags = flag.NewFlagSet("login", flag.ExitOnError)

		authSwitchScopesFlags              = flag.NewFlagSet("switch-scopes", flag.ExitOnError)
		authSwitchScopesOrganizationIDFlag = authSwitchScopesFlags.String("organization-id", "", "")
		authSwitchScopesProjectIDFlag      = authSwitchScopesFlags.String("project-id", "", "")
		authSwitchScopesSessionTokenFlag   = authSwitchScopesFlags.String("session-token", "", "")

		authLogoutFlags            = flag.NewFlagSet("logout", flag.ExitOnError)
		authLogoutSessionTokenFlag = authLogoutFlags.String("session-token", "", "")

		authInfoFlags            = flag.NewFlagSet("info", flag.ExitOnError)
		authInfoSessionTokenFlag = authInfoFlags.String("session-token", "", "")

		chatFlags = flag.NewFlagSet("chat", flag.ContinueOnError)

		chatListChatsFlags                = flag.NewFlagSet("list-chats", flag.ExitOnError)
		chatListChatsSessionTokenFlag     = chatListChatsFlags.String("session-token", "", "")
		chatListChatsProjectSlugInputFlag = chatListChatsFlags.String("project-slug-input", "", "")

		chatLoadChatFlags                = flag.NewFlagSet("load-chat", flag.ExitOnError)
		chatLoadChatIDFlag               = chatLoadChatFlags.String("id", "REQUIRED", "")
		chatLoadChatSessionTokenFlag     = chatLoadChatFlags.String("session-token", "", "")
		chatLoadChatProjectSlugInputFlag = chatLoadChatFlags.String("project-slug-input", "", "")

		deploymentsFlags = flag.NewFlagSet("deployments", flag.ContinueOnError)

		deploymentsGetDeploymentFlags                = flag.NewFlagSet("get-deployment", flag.ExitOnError)
		deploymentsGetDeploymentIDFlag               = deploymentsGetDeploymentFlags.String("id", "REQUIRED", "")
		deploymentsGetDeploymentApikeyTokenFlag      = deploymentsGetDeploymentFlags.String("apikey-token", "", "")
		deploymentsGetDeploymentSessionTokenFlag     = deploymentsGetDeploymentFlags.String("session-token", "", "")
		deploymentsGetDeploymentProjectSlugInputFlag = deploymentsGetDeploymentFlags.String("project-slug-input", "", "")

		deploymentsGetLatestDeploymentFlags                = flag.NewFlagSet("get-latest-deployment", flag.ExitOnError)
		deploymentsGetLatestDeploymentApikeyTokenFlag      = deploymentsGetLatestDeploymentFlags.String("apikey-token", "", "")
		deploymentsGetLatestDeploymentSessionTokenFlag     = deploymentsGetLatestDeploymentFlags.String("session-token", "", "")
		deploymentsGetLatestDeploymentProjectSlugInputFlag = deploymentsGetLatestDeploymentFlags.String("project-slug-input", "", "")

		deploymentsCreateDeploymentFlags                = flag.NewFlagSet("create-deployment", flag.ExitOnError)
		deploymentsCreateDeploymentBodyFlag             = deploymentsCreateDeploymentFlags.String("body", "REQUIRED", "")
		deploymentsCreateDeploymentApikeyTokenFlag      = deploymentsCreateDeploymentFlags.String("apikey-token", "", "")
		deploymentsCreateDeploymentSessionTokenFlag     = deploymentsCreateDeploymentFlags.String("session-token", "", "")
		deploymentsCreateDeploymentProjectSlugInputFlag = deploymentsCreateDeploymentFlags.String("project-slug-input", "", "")
		deploymentsCreateDeploymentIdempotencyKeyFlag   = deploymentsCreateDeploymentFlags.String("idempotency-key", "REQUIRED", "")

		deploymentsEvolveFlags                = flag.NewFlagSet("evolve", flag.ExitOnError)
		deploymentsEvolveBodyFlag             = deploymentsEvolveFlags.String("body", "REQUIRED", "")
		deploymentsEvolveApikeyTokenFlag      = deploymentsEvolveFlags.String("apikey-token", "", "")
		deploymentsEvolveSessionTokenFlag     = deploymentsEvolveFlags.String("session-token", "", "")
		deploymentsEvolveProjectSlugInputFlag = deploymentsEvolveFlags.String("project-slug-input", "", "")

		deploymentsListDeploymentsFlags                = flag.NewFlagSet("list-deployments", flag.ExitOnError)
		deploymentsListDeploymentsCursorFlag           = deploymentsListDeploymentsFlags.String("cursor", "", "")
		deploymentsListDeploymentsApikeyTokenFlag      = deploymentsListDeploymentsFlags.String("apikey-token", "", "")
		deploymentsListDeploymentsSessionTokenFlag     = deploymentsListDeploymentsFlags.String("session-token", "", "")
		deploymentsListDeploymentsProjectSlugInputFlag = deploymentsListDeploymentsFlags.String("project-slug-input", "", "")

		environmentsFlags = flag.NewFlagSet("environments", flag.ContinueOnError)

		environmentsCreateEnvironmentFlags                = flag.NewFlagSet("create-environment", flag.ExitOnError)
		environmentsCreateEnvironmentBodyFlag             = environmentsCreateEnvironmentFlags.String("body", "REQUIRED", "")
		environmentsCreateEnvironmentSessionTokenFlag     = environmentsCreateEnvironmentFlags.String("session-token", "", "")
		environmentsCreateEnvironmentProjectSlugInputFlag = environmentsCreateEnvironmentFlags.String("project-slug-input", "", "")

		environmentsListEnvironmentsFlags                = flag.NewFlagSet("list-environments", flag.ExitOnError)
		environmentsListEnvironmentsSessionTokenFlag     = environmentsListEnvironmentsFlags.String("session-token", "", "")
		environmentsListEnvironmentsProjectSlugInputFlag = environmentsListEnvironmentsFlags.String("project-slug-input", "", "")

		environmentsUpdateEnvironmentFlags                = flag.NewFlagSet("update-environment", flag.ExitOnError)
		environmentsUpdateEnvironmentBodyFlag             = environmentsUpdateEnvironmentFlags.String("body", "REQUIRED", "")
		environmentsUpdateEnvironmentSlugFlag             = environmentsUpdateEnvironmentFlags.String("slug", "REQUIRED", "")
		environmentsUpdateEnvironmentSessionTokenFlag     = environmentsUpdateEnvironmentFlags.String("session-token", "", "")
		environmentsUpdateEnvironmentProjectSlugInputFlag = environmentsUpdateEnvironmentFlags.String("project-slug-input", "", "")

		environmentsDeleteEnvironmentFlags                = flag.NewFlagSet("delete-environment", flag.ExitOnError)
		environmentsDeleteEnvironmentSlugFlag             = environmentsDeleteEnvironmentFlags.String("slug", "REQUIRED", "")
		environmentsDeleteEnvironmentSessionTokenFlag     = environmentsDeleteEnvironmentFlags.String("session-token", "", "")
		environmentsDeleteEnvironmentProjectSlugInputFlag = environmentsDeleteEnvironmentFlags.String("project-slug-input", "", "")

		integrationsFlags = flag.NewFlagSet("integrations", flag.ContinueOnError)

		integrationsGetFlags                = flag.NewFlagSet("get", flag.ExitOnError)
		integrationsGetIDFlag               = integrationsGetFlags.String("id", "", "")
		integrationsGetNameFlag             = integrationsGetFlags.String("name", "", "")
		integrationsGetSessionTokenFlag     = integrationsGetFlags.String("session-token", "", "")
		integrationsGetProjectSlugInputFlag = integrationsGetFlags.String("project-slug-input", "", "")

		integrationsListFlags                = flag.NewFlagSet("list", flag.ExitOnError)
		integrationsListKeywordsFlag         = integrationsListFlags.String("keywords", "", "")
		integrationsListSessionTokenFlag     = integrationsListFlags.String("session-token", "", "")
		integrationsListProjectSlugInputFlag = integrationsListFlags.String("project-slug-input", "", "")

		keysFlags = flag.NewFlagSet("keys", flag.ContinueOnError)

		keysCreateKeyFlags            = flag.NewFlagSet("create-key", flag.ExitOnError)
		keysCreateKeyBodyFlag         = keysCreateKeyFlags.String("body", "REQUIRED", "")
		keysCreateKeySessionTokenFlag = keysCreateKeyFlags.String("session-token", "", "")

		keysListKeysFlags            = flag.NewFlagSet("list-keys", flag.ExitOnError)
		keysListKeysSessionTokenFlag = keysListKeysFlags.String("session-token", "", "")

		keysRevokeKeyFlags            = flag.NewFlagSet("revoke-key", flag.ExitOnError)
		keysRevokeKeyIDFlag           = keysRevokeKeyFlags.String("id", "REQUIRED", "")
		keysRevokeKeySessionTokenFlag = keysRevokeKeyFlags.String("session-token", "", "")

		packagesFlags = flag.NewFlagSet("packages", flag.ContinueOnError)

		packagesCreatePackageFlags                = flag.NewFlagSet("create-package", flag.ExitOnError)
		packagesCreatePackageBodyFlag             = packagesCreatePackageFlags.String("body", "REQUIRED", "")
		packagesCreatePackageApikeyTokenFlag      = packagesCreatePackageFlags.String("apikey-token", "", "")
		packagesCreatePackageSessionTokenFlag     = packagesCreatePackageFlags.String("session-token", "", "")
		packagesCreatePackageProjectSlugInputFlag = packagesCreatePackageFlags.String("project-slug-input", "", "")

		packagesUpdatePackageFlags                = flag.NewFlagSet("update-package", flag.ExitOnError)
		packagesUpdatePackageBodyFlag             = packagesUpdatePackageFlags.String("body", "REQUIRED", "")
		packagesUpdatePackageApikeyTokenFlag      = packagesUpdatePackageFlags.String("apikey-token", "", "")
		packagesUpdatePackageSessionTokenFlag     = packagesUpdatePackageFlags.String("session-token", "", "")
		packagesUpdatePackageProjectSlugInputFlag = packagesUpdatePackageFlags.String("project-slug-input", "", "")

		packagesListVersionsFlags                = flag.NewFlagSet("list-versions", flag.ExitOnError)
		packagesListVersionsNameFlag             = packagesListVersionsFlags.String("name", "REQUIRED", "")
		packagesListVersionsApikeyTokenFlag      = packagesListVersionsFlags.String("apikey-token", "", "")
		packagesListVersionsSessionTokenFlag     = packagesListVersionsFlags.String("session-token", "", "")
		packagesListVersionsProjectSlugInputFlag = packagesListVersionsFlags.String("project-slug-input", "", "")

		packagesPublishFlags                = flag.NewFlagSet("publish", flag.ExitOnError)
		packagesPublishBodyFlag             = packagesPublishFlags.String("body", "REQUIRED", "")
		packagesPublishApikeyTokenFlag      = packagesPublishFlags.String("apikey-token", "", "")
		packagesPublishSessionTokenFlag     = packagesPublishFlags.String("session-token", "", "")
		packagesPublishProjectSlugInputFlag = packagesPublishFlags.String("project-slug-input", "", "")

		projectsFlags = flag.NewFlagSet("projects", flag.ContinueOnError)

		projectsCreateProjectFlags            = flag.NewFlagSet("create-project", flag.ExitOnError)
		projectsCreateProjectBodyFlag         = projectsCreateProjectFlags.String("body", "REQUIRED", "")
		projectsCreateProjectApikeyTokenFlag  = projectsCreateProjectFlags.String("apikey-token", "", "")
		projectsCreateProjectSessionTokenFlag = projectsCreateProjectFlags.String("session-token", "", "")

		projectsListProjectsFlags              = flag.NewFlagSet("list-projects", flag.ExitOnError)
		projectsListProjectsOrganizationIDFlag = projectsListProjectsFlags.String("organization-id", "REQUIRED", "")
		projectsListProjectsSessionTokenFlag   = projectsListProjectsFlags.String("session-token", "", "")
		projectsListProjectsApikeyTokenFlag    = projectsListProjectsFlags.String("apikey-token", "", "")

		toolsFlags = flag.NewFlagSet("tools", flag.ContinueOnError)

		toolsListToolsFlags                = flag.NewFlagSet("list-tools", flag.ExitOnError)
		toolsListToolsCursorFlag           = toolsListToolsFlags.String("cursor", "", "")
		toolsListToolsDeploymentIDFlag     = toolsListToolsFlags.String("deployment-id", "", "")
		toolsListToolsSessionTokenFlag     = toolsListToolsFlags.String("session-token", "", "")
		toolsListToolsProjectSlugInputFlag = toolsListToolsFlags.String("project-slug-input", "", "")

		instancesFlags = flag.NewFlagSet("instances", flag.ContinueOnError)

		instancesGetInstanceFlags                = flag.NewFlagSet("get-instance", flag.ExitOnError)
		instancesGetInstanceToolsetSlugFlag      = instancesGetInstanceFlags.String("toolset-slug", "REQUIRED", "")
		instancesGetInstanceEnvironmentSlugFlag  = instancesGetInstanceFlags.String("environment-slug", "", "")
		instancesGetInstanceSessionTokenFlag     = instancesGetInstanceFlags.String("session-token", "", "")
		instancesGetInstanceProjectSlugInputFlag = instancesGetInstanceFlags.String("project-slug-input", "", "")
		instancesGetInstanceApikeyTokenFlag      = instancesGetInstanceFlags.String("apikey-token", "", "")

		toolsetsFlags = flag.NewFlagSet("toolsets", flag.ContinueOnError)

		toolsetsCreateToolsetFlags                = flag.NewFlagSet("create-toolset", flag.ExitOnError)
		toolsetsCreateToolsetBodyFlag             = toolsetsCreateToolsetFlags.String("body", "REQUIRED", "")
		toolsetsCreateToolsetSessionTokenFlag     = toolsetsCreateToolsetFlags.String("session-token", "", "")
		toolsetsCreateToolsetProjectSlugInputFlag = toolsetsCreateToolsetFlags.String("project-slug-input", "", "")

		toolsetsListToolsetsFlags                = flag.NewFlagSet("list-toolsets", flag.ExitOnError)
		toolsetsListToolsetsSessionTokenFlag     = toolsetsListToolsetsFlags.String("session-token", "", "")
		toolsetsListToolsetsProjectSlugInputFlag = toolsetsListToolsetsFlags.String("project-slug-input", "", "")

		toolsetsUpdateToolsetFlags                = flag.NewFlagSet("update-toolset", flag.ExitOnError)
		toolsetsUpdateToolsetBodyFlag             = toolsetsUpdateToolsetFlags.String("body", "REQUIRED", "")
		toolsetsUpdateToolsetSlugFlag             = toolsetsUpdateToolsetFlags.String("slug", "REQUIRED", "")
		toolsetsUpdateToolsetSessionTokenFlag     = toolsetsUpdateToolsetFlags.String("session-token", "", "")
		toolsetsUpdateToolsetProjectSlugInputFlag = toolsetsUpdateToolsetFlags.String("project-slug-input", "", "")

		toolsetsDeleteToolsetFlags                = flag.NewFlagSet("delete-toolset", flag.ExitOnError)
		toolsetsDeleteToolsetSlugFlag             = toolsetsDeleteToolsetFlags.String("slug", "REQUIRED", "")
		toolsetsDeleteToolsetSessionTokenFlag     = toolsetsDeleteToolsetFlags.String("session-token", "", "")
		toolsetsDeleteToolsetProjectSlugInputFlag = toolsetsDeleteToolsetFlags.String("project-slug-input", "", "")

		toolsetsGetToolsetFlags                = flag.NewFlagSet("get-toolset", flag.ExitOnError)
		toolsetsGetToolsetSlugFlag             = toolsetsGetToolsetFlags.String("slug", "REQUIRED", "")
		toolsetsGetToolsetSessionTokenFlag     = toolsetsGetToolsetFlags.String("session-token", "", "")
		toolsetsGetToolsetProjectSlugInputFlag = toolsetsGetToolsetFlags.String("project-slug-input", "", "")
	)
	assetsFlags.Usage = assetsUsage
	assetsServeImageFlags.Usage = assetsServeImageUsage
	assetsUploadImageFlags.Usage = assetsUploadImageUsage
	assetsUploadOpenAPIv3Flags.Usage = assetsUploadOpenAPIv3Usage

	authFlags.Usage = authUsage
	authCallbackFlags.Usage = authCallbackUsage
	authLoginFlags.Usage = authLoginUsage
	authSwitchScopesFlags.Usage = authSwitchScopesUsage
	authLogoutFlags.Usage = authLogoutUsage
	authInfoFlags.Usage = authInfoUsage

	chatFlags.Usage = chatUsage
	chatListChatsFlags.Usage = chatListChatsUsage
	chatLoadChatFlags.Usage = chatLoadChatUsage

	deploymentsFlags.Usage = deploymentsUsage
	deploymentsGetDeploymentFlags.Usage = deploymentsGetDeploymentUsage
	deploymentsGetLatestDeploymentFlags.Usage = deploymentsGetLatestDeploymentUsage
	deploymentsCreateDeploymentFlags.Usage = deploymentsCreateDeploymentUsage
	deploymentsEvolveFlags.Usage = deploymentsEvolveUsage
	deploymentsListDeploymentsFlags.Usage = deploymentsListDeploymentsUsage

	environmentsFlags.Usage = environmentsUsage
	environmentsCreateEnvironmentFlags.Usage = environmentsCreateEnvironmentUsage
	environmentsListEnvironmentsFlags.Usage = environmentsListEnvironmentsUsage
	environmentsUpdateEnvironmentFlags.Usage = environmentsUpdateEnvironmentUsage
	environmentsDeleteEnvironmentFlags.Usage = environmentsDeleteEnvironmentUsage

	integrationsFlags.Usage = integrationsUsage
	integrationsGetFlags.Usage = integrationsGetUsage
	integrationsListFlags.Usage = integrationsListUsage

	keysFlags.Usage = keysUsage
	keysCreateKeyFlags.Usage = keysCreateKeyUsage
	keysListKeysFlags.Usage = keysListKeysUsage
	keysRevokeKeyFlags.Usage = keysRevokeKeyUsage

	packagesFlags.Usage = packagesUsage
	packagesCreatePackageFlags.Usage = packagesCreatePackageUsage
	packagesUpdatePackageFlags.Usage = packagesUpdatePackageUsage
	packagesListVersionsFlags.Usage = packagesListVersionsUsage
	packagesPublishFlags.Usage = packagesPublishUsage

	projectsFlags.Usage = projectsUsage
	projectsCreateProjectFlags.Usage = projectsCreateProjectUsage
	projectsListProjectsFlags.Usage = projectsListProjectsUsage

	toolsFlags.Usage = toolsUsage
	toolsListToolsFlags.Usage = toolsListToolsUsage

	instancesFlags.Usage = instancesUsage
	instancesGetInstanceFlags.Usage = instancesGetInstanceUsage

	toolsetsFlags.Usage = toolsetsUsage
	toolsetsCreateToolsetFlags.Usage = toolsetsCreateToolsetUsage
	toolsetsListToolsetsFlags.Usage = toolsetsListToolsetsUsage
	toolsetsUpdateToolsetFlags.Usage = toolsetsUpdateToolsetUsage
	toolsetsDeleteToolsetFlags.Usage = toolsetsDeleteToolsetUsage
	toolsetsGetToolsetFlags.Usage = toolsetsGetToolsetUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "assets":
			svcf = assetsFlags
		case "auth":
			svcf = authFlags
		case "chat":
			svcf = chatFlags
		case "deployments":
			svcf = deploymentsFlags
		case "environments":
			svcf = environmentsFlags
		case "integrations":
			svcf = integrationsFlags
		case "keys":
			svcf = keysFlags
		case "packages":
			svcf = packagesFlags
		case "projects":
			svcf = projectsFlags
		case "tools":
			svcf = toolsFlags
		case "instances":
			svcf = instancesFlags
		case "toolsets":
			svcf = toolsetsFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "assets":
			switch epn {
			case "serve-image":
				epf = assetsServeImageFlags

			case "upload-image":
				epf = assetsUploadImageFlags

			case "upload-open-ap-iv3":
				epf = assetsUploadOpenAPIv3Flags

			}

		case "auth":
			switch epn {
			case "callback":
				epf = authCallbackFlags

			case "login":
				epf = authLoginFlags

			case "switch-scopes":
				epf = authSwitchScopesFlags

			case "logout":
				epf = authLogoutFlags

			case "info":
				epf = authInfoFlags

			}

		case "chat":
			switch epn {
			case "list-chats":
				epf = chatListChatsFlags

			case "load-chat":
				epf = chatLoadChatFlags

			}

		case "deployments":
			switch epn {
			case "get-deployment":
				epf = deploymentsGetDeploymentFlags

			case "get-latest-deployment":
				epf = deploymentsGetLatestDeploymentFlags

			case "create-deployment":
				epf = deploymentsCreateDeploymentFlags

			case "evolve":
				epf = deploymentsEvolveFlags

			case "list-deployments":
				epf = deploymentsListDeploymentsFlags

			}

		case "environments":
			switch epn {
			case "create-environment":
				epf = environmentsCreateEnvironmentFlags

			case "list-environments":
				epf = environmentsListEnvironmentsFlags

			case "update-environment":
				epf = environmentsUpdateEnvironmentFlags

			case "delete-environment":
				epf = environmentsDeleteEnvironmentFlags

			}

		case "integrations":
			switch epn {
			case "get":
				epf = integrationsGetFlags

			case "list":
				epf = integrationsListFlags

			}

		case "keys":
			switch epn {
			case "create-key":
				epf = keysCreateKeyFlags

			case "list-keys":
				epf = keysListKeysFlags

			case "revoke-key":
				epf = keysRevokeKeyFlags

			}

		case "packages":
			switch epn {
			case "create-package":
				epf = packagesCreatePackageFlags

			case "update-package":
				epf = packagesUpdatePackageFlags

			case "list-versions":
				epf = packagesListVersionsFlags

			case "publish":
				epf = packagesPublishFlags

			}

		case "projects":
			switch epn {
			case "create-project":
				epf = projectsCreateProjectFlags

			case "list-projects":
				epf = projectsListProjectsFlags

			}

		case "tools":
			switch epn {
			case "list-tools":
				epf = toolsListToolsFlags

			}

		case "instances":
			switch epn {
			case "get-instance":
				epf = instancesGetInstanceFlags

			}

		case "toolsets":
			switch epn {
			case "create-toolset":
				epf = toolsetsCreateToolsetFlags

			case "list-toolsets":
				epf = toolsetsListToolsetsFlags

			case "update-toolset":
				epf = toolsetsUpdateToolsetFlags

			case "delete-toolset":
				epf = toolsetsDeleteToolsetFlags

			case "get-toolset":
				epf = toolsetsGetToolsetFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "assets":
			c := assetsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "serve-image":
				endpoint = c.ServeImage()
				data, err = assetsc.BuildServeImagePayload(*assetsServeImageIDFlag, *assetsServeImageSessionTokenFlag)
			case "upload-image":
				endpoint = c.UploadImage()
				data, err = assetsc.BuildUploadImagePayload(*assetsUploadImageContentTypeFlag, *assetsUploadImageContentLengthFlag, *assetsUploadImageApikeyTokenFlag, *assetsUploadImageProjectSlugInputFlag, *assetsUploadImageSessionTokenFlag)
				if err == nil {
					data, err = assetsc.BuildUploadImageStreamPayload(data, *assetsUploadImageStreamFlag)
				}
			case "upload-open-ap-iv3":
				endpoint = c.UploadOpenAPIv3()
				data, err = assetsc.BuildUploadOpenAPIv3Payload(*assetsUploadOpenAPIv3ContentTypeFlag, *assetsUploadOpenAPIv3ContentLengthFlag, *assetsUploadOpenAPIv3ApikeyTokenFlag, *assetsUploadOpenAPIv3ProjectSlugInputFlag, *assetsUploadOpenAPIv3SessionTokenFlag)
				if err == nil {
					data, err = assetsc.BuildUploadOpenAPIv3StreamPayload(data, *assetsUploadOpenAPIv3StreamFlag)
				}
			}
		case "auth":
			c := authc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "callback":
				endpoint = c.Callback()
				data, err = authc.BuildCallbackPayload(*authCallbackIDTokenFlag)
			case "login":
				endpoint = c.Login()
			case "switch-scopes":
				endpoint = c.SwitchScopes()
				data, err = authc.BuildSwitchScopesPayload(*authSwitchScopesOrganizationIDFlag, *authSwitchScopesProjectIDFlag, *authSwitchScopesSessionTokenFlag)
			case "logout":
				endpoint = c.Logout()
				data, err = authc.BuildLogoutPayload(*authLogoutSessionTokenFlag)
			case "info":
				endpoint = c.Info()
				data, err = authc.BuildInfoPayload(*authInfoSessionTokenFlag)
			}
		case "chat":
			c := chatc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list-chats":
				endpoint = c.ListChats()
				data, err = chatc.BuildListChatsPayload(*chatListChatsSessionTokenFlag, *chatListChatsProjectSlugInputFlag)
			case "load-chat":
				endpoint = c.LoadChat()
				data, err = chatc.BuildLoadChatPayload(*chatLoadChatIDFlag, *chatLoadChatSessionTokenFlag, *chatLoadChatProjectSlugInputFlag)
			}
		case "deployments":
			c := deploymentsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get-deployment":
				endpoint = c.GetDeployment()
				data, err = deploymentsc.BuildGetDeploymentPayload(*deploymentsGetDeploymentIDFlag, *deploymentsGetDeploymentApikeyTokenFlag, *deploymentsGetDeploymentSessionTokenFlag, *deploymentsGetDeploymentProjectSlugInputFlag)
			case "get-latest-deployment":
				endpoint = c.GetLatestDeployment()
				data, err = deploymentsc.BuildGetLatestDeploymentPayload(*deploymentsGetLatestDeploymentApikeyTokenFlag, *deploymentsGetLatestDeploymentSessionTokenFlag, *deploymentsGetLatestDeploymentProjectSlugInputFlag)
			case "create-deployment":
				endpoint = c.CreateDeployment()
				data, err = deploymentsc.BuildCreateDeploymentPayload(*deploymentsCreateDeploymentBodyFlag, *deploymentsCreateDeploymentApikeyTokenFlag, *deploymentsCreateDeploymentSessionTokenFlag, *deploymentsCreateDeploymentProjectSlugInputFlag, *deploymentsCreateDeploymentIdempotencyKeyFlag)
			case "evolve":
				endpoint = c.Evolve()
				data, err = deploymentsc.BuildEvolvePayload(*deploymentsEvolveBodyFlag, *deploymentsEvolveApikeyTokenFlag, *deploymentsEvolveSessionTokenFlag, *deploymentsEvolveProjectSlugInputFlag)
			case "list-deployments":
				endpoint = c.ListDeployments()
				data, err = deploymentsc.BuildListDeploymentsPayload(*deploymentsListDeploymentsCursorFlag, *deploymentsListDeploymentsApikeyTokenFlag, *deploymentsListDeploymentsSessionTokenFlag, *deploymentsListDeploymentsProjectSlugInputFlag)
			}
		case "environments":
			c := environmentsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create-environment":
				endpoint = c.CreateEnvironment()
				data, err = environmentsc.BuildCreateEnvironmentPayload(*environmentsCreateEnvironmentBodyFlag, *environmentsCreateEnvironmentSessionTokenFlag, *environmentsCreateEnvironmentProjectSlugInputFlag)
			case "list-environments":
				endpoint = c.ListEnvironments()
				data, err = environmentsc.BuildListEnvironmentsPayload(*environmentsListEnvironmentsSessionTokenFlag, *environmentsListEnvironmentsProjectSlugInputFlag)
			case "update-environment":
				endpoint = c.UpdateEnvironment()
				data, err = environmentsc.BuildUpdateEnvironmentPayload(*environmentsUpdateEnvironmentBodyFlag, *environmentsUpdateEnvironmentSlugFlag, *environmentsUpdateEnvironmentSessionTokenFlag, *environmentsUpdateEnvironmentProjectSlugInputFlag)
			case "delete-environment":
				endpoint = c.DeleteEnvironment()
				data, err = environmentsc.BuildDeleteEnvironmentPayload(*environmentsDeleteEnvironmentSlugFlag, *environmentsDeleteEnvironmentSessionTokenFlag, *environmentsDeleteEnvironmentProjectSlugInputFlag)
			}
		case "integrations":
			c := integrationsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get":
				endpoint = c.Get()
				data, err = integrationsc.BuildGetPayload(*integrationsGetIDFlag, *integrationsGetNameFlag, *integrationsGetSessionTokenFlag, *integrationsGetProjectSlugInputFlag)
			case "list":
				endpoint = c.List()
				data, err = integrationsc.BuildListPayload(*integrationsListKeywordsFlag, *integrationsListSessionTokenFlag, *integrationsListProjectSlugInputFlag)
			}
		case "keys":
			c := keysc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create-key":
				endpoint = c.CreateKey()
				data, err = keysc.BuildCreateKeyPayload(*keysCreateKeyBodyFlag, *keysCreateKeySessionTokenFlag)
			case "list-keys":
				endpoint = c.ListKeys()
				data, err = keysc.BuildListKeysPayload(*keysListKeysSessionTokenFlag)
			case "revoke-key":
				endpoint = c.RevokeKey()
				data, err = keysc.BuildRevokeKeyPayload(*keysRevokeKeyIDFlag, *keysRevokeKeySessionTokenFlag)
			}
		case "packages":
			c := packagesc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create-package":
				endpoint = c.CreatePackage()
				data, err = packagesc.BuildCreatePackagePayload(*packagesCreatePackageBodyFlag, *packagesCreatePackageApikeyTokenFlag, *packagesCreatePackageSessionTokenFlag, *packagesCreatePackageProjectSlugInputFlag)
			case "update-package":
				endpoint = c.UpdatePackage()
				data, err = packagesc.BuildUpdatePackagePayload(*packagesUpdatePackageBodyFlag, *packagesUpdatePackageApikeyTokenFlag, *packagesUpdatePackageSessionTokenFlag, *packagesUpdatePackageProjectSlugInputFlag)
			case "list-versions":
				endpoint = c.ListVersions()
				data, err = packagesc.BuildListVersionsPayload(*packagesListVersionsNameFlag, *packagesListVersionsApikeyTokenFlag, *packagesListVersionsSessionTokenFlag, *packagesListVersionsProjectSlugInputFlag)
			case "publish":
				endpoint = c.Publish()
				data, err = packagesc.BuildPublishPayload(*packagesPublishBodyFlag, *packagesPublishApikeyTokenFlag, *packagesPublishSessionTokenFlag, *packagesPublishProjectSlugInputFlag)
			}
		case "projects":
			c := projectsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create-project":
				endpoint = c.CreateProject()
				data, err = projectsc.BuildCreateProjectPayload(*projectsCreateProjectBodyFlag, *projectsCreateProjectApikeyTokenFlag, *projectsCreateProjectSessionTokenFlag)
			case "list-projects":
				endpoint = c.ListProjects()
				data, err = projectsc.BuildListProjectsPayload(*projectsListProjectsOrganizationIDFlag, *projectsListProjectsSessionTokenFlag, *projectsListProjectsApikeyTokenFlag)
			}
		case "tools":
			c := toolsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list-tools":
				endpoint = c.ListTools()
				data, err = toolsc.BuildListToolsPayload(*toolsListToolsCursorFlag, *toolsListToolsDeploymentIDFlag, *toolsListToolsSessionTokenFlag, *toolsListToolsProjectSlugInputFlag)
			}
		case "instances":
			c := instancesc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get-instance":
				endpoint = c.GetInstance()
				data, err = instancesc.BuildGetInstancePayload(*instancesGetInstanceToolsetSlugFlag, *instancesGetInstanceEnvironmentSlugFlag, *instancesGetInstanceSessionTokenFlag, *instancesGetInstanceProjectSlugInputFlag, *instancesGetInstanceApikeyTokenFlag)
			}
		case "toolsets":
			c := toolsetsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create-toolset":
				endpoint = c.CreateToolset()
				data, err = toolsetsc.BuildCreateToolsetPayload(*toolsetsCreateToolsetBodyFlag, *toolsetsCreateToolsetSessionTokenFlag, *toolsetsCreateToolsetProjectSlugInputFlag)
			case "list-toolsets":
				endpoint = c.ListToolsets()
				data, err = toolsetsc.BuildListToolsetsPayload(*toolsetsListToolsetsSessionTokenFlag, *toolsetsListToolsetsProjectSlugInputFlag)
			case "update-toolset":
				endpoint = c.UpdateToolset()
				data, err = toolsetsc.BuildUpdateToolsetPayload(*toolsetsUpdateToolsetBodyFlag, *toolsetsUpdateToolsetSlugFlag, *toolsetsUpdateToolsetSessionTokenFlag, *toolsetsUpdateToolsetProjectSlugInputFlag)
			case "delete-toolset":
				endpoint = c.DeleteToolset()
				data, err = toolsetsc.BuildDeleteToolsetPayload(*toolsetsDeleteToolsetSlugFlag, *toolsetsDeleteToolsetSessionTokenFlag, *toolsetsDeleteToolsetProjectSlugInputFlag)
			case "get-toolset":
				endpoint = c.GetToolset()
				data, err = toolsetsc.BuildGetToolsetPayload(*toolsetsGetToolsetSlugFlag, *toolsetsGetToolsetSessionTokenFlag, *toolsetsGetToolsetProjectSlugInputFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// assetsUsage displays the usage of the assets command and its subcommands.
func assetsUsage() {
	fmt.Fprintf(os.Stderr, `Manages assets used by Gram projects.
Usage:
    %[1]s [globalflags] assets COMMAND [flags]

COMMAND:
    serve-image: Serve an image from Gram.
    upload-image: Upload an image to Gram.
    upload-open-ap-iv3: Upload an OpenAPI v3 document to Gram.

Additional help:
    %[1]s assets COMMAND --help
`, os.Args[0])
}
func assetsServeImageUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] assets serve-image -id STRING -session-token STRING

Serve an image from Gram.
    -id STRING: 
    -session-token STRING: 

Example:
    %[1]s assets serve-image --id "Nemo quisquam officia ut." --session-token "Aut inventore vero vero enim incidunt."
`, os.Args[0])
}

func assetsUploadImageUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] assets upload-image -content-type STRING -content-length INT64 -apikey-token STRING -project-slug-input STRING -session-token STRING -stream STRING

Upload an image to Gram.
    -content-type STRING: 
    -content-length INT64: 
    -apikey-token STRING: 
    -project-slug-input STRING: 
    -session-token STRING: 
    -stream STRING: path to file containing the streamed request body

Example:
    %[1]s assets upload-image --content-type "Ullam quod qui perspiciatis accusamus." --content-length 255828964415810635 --apikey-token "Repudiandae quia ducimus numquam quos quis quia." --project-slug-input "At enim nihil fugit." --session-token "Qui omnis doloremque in perferendis." --stream "goa.png"
`, os.Args[0])
}

func assetsUploadOpenAPIv3Usage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] assets upload-open-ap-iv3 -content-type STRING -content-length INT64 -apikey-token STRING -project-slug-input STRING -session-token STRING -stream STRING

Upload an OpenAPI v3 document to Gram.
    -content-type STRING: 
    -content-length INT64: 
    -apikey-token STRING: 
    -project-slug-input STRING: 
    -session-token STRING: 
    -stream STRING: path to file containing the streamed request body

Example:
    %[1]s assets upload-open-ap-iv3 --content-type "Molestias numquam error deserunt." --content-length 3316909350460725768 --apikey-token "Voluptatem unde voluptates ipsa qui adipisci odit." --project-slug-input "Ut quas nesciunt." --session-token "Nam aliquid ipsa distinctio veritatis numquam." --stream "goa.png"
`, os.Args[0])
}

// authUsage displays the usage of the auth command and its subcommands.
func authUsage() {
	fmt.Fprintf(os.Stderr, `Managed auth for gram producers and dashboard.
Usage:
    %[1]s [globalflags] auth COMMAND [flags]

COMMAND:
    callback: Handles the authentication callback.
    login: Proxies to auth login through speakeasy oidc.
    switch-scopes: Switches the authentication scope to a different organization.
    logout: Logs out the current user by clearing their session.
    info: Provides information about the current authentication status.

Additional help:
    %[1]s auth COMMAND --help
`, os.Args[0])
}
func authCallbackUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth callback -id-token STRING

Handles the authentication callback.
    -id-token STRING: 

Example:
    %[1]s auth callback --id-token "Qui consequatur assumenda aut quia nobis."
`, os.Args[0])
}

func authLoginUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth login

Proxies to auth login through speakeasy oidc.

Example:
    %[1]s auth login
`, os.Args[0])
}

func authSwitchScopesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth switch-scopes -organization-id STRING -project-id STRING -session-token STRING

Switches the authentication scope to a different organization.
    -organization-id STRING: 
    -project-id STRING: 
    -session-token STRING: 

Example:
    %[1]s auth switch-scopes --organization-id "Consectetur nam odio veniam nisi." --project-id "Harum id." --session-token "Sunt non et dolores qui facere necessitatibus."
`, os.Args[0])
}

func authLogoutUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth logout -session-token STRING

Logs out the current user by clearing their session.
    -session-token STRING: 

Example:
    %[1]s auth logout --session-token "Quis sequi distinctio veritatis."
`, os.Args[0])
}

func authInfoUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth info -session-token STRING

Provides information about the current authentication status.
    -session-token STRING: 

Example:
    %[1]s auth info --session-token "Tenetur aut autem quos quisquam."
`, os.Args[0])
}

// chatUsage displays the usage of the chat command and its subcommands.
func chatUsage() {
	fmt.Fprintf(os.Stderr, `Managed chats for gram AI consumers.
Usage:
    %[1]s [globalflags] chat COMMAND [flags]

COMMAND:
    list-chats: List all chats for a project
    load-chat: Load a chat by its ID

Additional help:
    %[1]s chat COMMAND --help
`, os.Args[0])
}
func chatListChatsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] chat list-chats -session-token STRING -project-slug-input STRING

List all chats for a project
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s chat list-chats --session-token "Aut aspernatur." --project-slug-input "Quas magni vitae corporis."
`, os.Args[0])
}

func chatLoadChatUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] chat load-chat -id STRING -session-token STRING -project-slug-input STRING

Load a chat by its ID
    -id STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s chat load-chat --id "Facere eum temporibus veniam eos fugit." --session-token "Iusto quasi ut." --project-slug-input "Consequatur beatae."
`, os.Args[0])
}

// deploymentsUsage displays the usage of the deployments command and its
// subcommands.
func deploymentsUsage() {
	fmt.Fprintf(os.Stderr, `Manages deployments of tools from upstream sources.
Usage:
    %[1]s [globalflags] deployments COMMAND [flags]

COMMAND:
    get-deployment: Get a deployment by its ID.
    get-latest-deployment: Get the latest deployment for a project.
    create-deployment: Create a deployment to load tool definitions.
    evolve: Create a new deployment with additional or updated tool sources.
    list-deployments: List all deployments in descending order of creation.

Additional help:
    %[1]s deployments COMMAND --help
`, os.Args[0])
}
func deploymentsGetDeploymentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] deployments get-deployment -id STRING -apikey-token STRING -session-token STRING -project-slug-input STRING

Get a deployment by its ID.
    -id STRING: 
    -apikey-token STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s deployments get-deployment --id "Consequatur quaerat doloremque." --apikey-token "Enim voluptatem quasi ipsa officia voluptate." --session-token "Et occaecati." --project-slug-input "Amet fugit vel illum velit veniam voluptatem."
`, os.Args[0])
}

func deploymentsGetLatestDeploymentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] deployments get-latest-deployment -apikey-token STRING -session-token STRING -project-slug-input STRING

Get the latest deployment for a project.
    -apikey-token STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s deployments get-latest-deployment --apikey-token "Dolores sapiente quaerat autem inventore velit ducimus." --session-token "Provident ipsum ut dicta aliquam iusto sunt." --project-slug-input "Tempora sit repellat qui rem labore ducimus."
`, os.Args[0])
}

func deploymentsCreateDeploymentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] deployments create-deployment -body JSON -apikey-token STRING -session-token STRING -project-slug-input STRING -idempotency-key STRING

Create a deployment to load tool definitions.
    -body JSON: 
    -apikey-token STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 
    -idempotency-key STRING: 

Example:
    %[1]s deployments create-deployment --body '{
      "external_id": "bc5f4a555e933e6861d12edba4c2d87ef6caf8e6",
      "external_url": "Tempora quia omnis odit laboriosam dolorum.",
      "github_pr": "1234",
      "github_repo": "speakeasyapi/gram",
      "github_sha": "f33e693e9e12552043bc0ec5c37f1b8a9e076161",
      "openapiv3_assets": [
         {
            "asset_id": "Dicta aut sit ut.",
            "name": "Harum error.",
            "slug": "ykz"
         },
         {
            "asset_id": "Dicta aut sit ut.",
            "name": "Harum error.",
            "slug": "ykz"
         },
         {
            "asset_id": "Dicta aut sit ut.",
            "name": "Harum error.",
            "slug": "ykz"
         },
         {
            "asset_id": "Dicta aut sit ut.",
            "name": "Harum error.",
            "slug": "ykz"
         }
      ],
      "packages": [
         {
            "name": "Aut autem dolorum rerum dolorem sit eius.",
            "version": "Rem provident aspernatur beatae voluptatem."
         },
         {
            "name": "Aut autem dolorum rerum dolorem sit eius.",
            "version": "Rem provident aspernatur beatae voluptatem."
         },
         {
            "name": "Aut autem dolorum rerum dolorem sit eius.",
            "version": "Rem provident aspernatur beatae voluptatem."
         }
      ]
   }' --apikey-token "Qui aut quia officiis officiis similique voluptatem." --session-token "Odit eligendi atque." --project-slug-input "Suscipit deleniti voluptatem." --idempotency-key "01jqq0ajmb4qh9eppz48dejr2m"
`, os.Args[0])
}

func deploymentsEvolveUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] deployments evolve -body JSON -apikey-token STRING -session-token STRING -project-slug-input STRING

Create a new deployment with additional or updated tool sources.
    -body JSON: 
    -apikey-token STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s deployments evolve --body '{
      "deployment_id": "Quo sequi et.",
      "exclude_openapiv3_assets": [
         "Aliquam quisquam aperiam adipisci.",
         "Explicabo aut."
      ],
      "exclude_packages": [
         "Quas iusto modi.",
         "Accusantium eius in facilis saepe non."
      ],
      "upsert_openapiv3_assets": [
         {
            "asset_id": "Dicta aut sit ut.",
            "name": "Harum error.",
            "slug": "ykz"
         },
         {
            "asset_id": "Dicta aut sit ut.",
            "name": "Harum error.",
            "slug": "ykz"
         }
      ],
      "upsert_packages": [
         {
            "name": "Facilis consequatur cupiditate architecto quia sed quia.",
            "version": "Ipsum exercitationem eum eveniet et eum et."
         },
         {
            "name": "Facilis consequatur cupiditate architecto quia sed quia.",
            "version": "Ipsum exercitationem eum eveniet et eum et."
         },
         {
            "name": "Facilis consequatur cupiditate architecto quia sed quia.",
            "version": "Ipsum exercitationem eum eveniet et eum et."
         }
      ]
   }' --apikey-token "Amet voluptate est doloribus vitae at." --session-token "Dolor ipsa." --project-slug-input "Tempora quasi impedit consectetur laudantium eos."
`, os.Args[0])
}

func deploymentsListDeploymentsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] deployments list-deployments -cursor STRING -apikey-token STRING -session-token STRING -project-slug-input STRING

List all deployments in descending order of creation.
    -cursor STRING: 
    -apikey-token STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s deployments list-deployments --cursor "Saepe iure aut." --apikey-token "Tempora voluptas sed amet et molestiae unde." --session-token "Sit temporibus." --project-slug-input "Expedita necessitatibus."
`, os.Args[0])
}

// environmentsUsage displays the usage of the environments command and its
// subcommands.
func environmentsUsage() {
	fmt.Fprintf(os.Stderr, `Managing toolset environments.
Usage:
    %[1]s [globalflags] environments COMMAND [flags]

COMMAND:
    create-environment: Create a new environment
    list-environments: List all environments for an organization
    update-environment: Update an environment
    delete-environment: Delete an environment

Additional help:
    %[1]s environments COMMAND --help
`, os.Args[0])
}
func environmentsCreateEnvironmentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] environments create-environment -body JSON -session-token STRING -project-slug-input STRING

Create a new environment
    -body JSON: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s environments create-environment --body '{
      "description": "Totam dignissimos dolorem.",
      "entries": [
         {
            "name": "Sunt dolor.",
            "value": "Veritatis totam dolor vel."
         },
         {
            "name": "Sunt dolor.",
            "value": "Veritatis totam dolor vel."
         }
      ],
      "name": "Pariatur vero est non.",
      "organization_id": "Est aliquid."
   }' --session-token "Est rerum ea." --project-slug-input "Veniam accusantium consectetur."
`, os.Args[0])
}

func environmentsListEnvironmentsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] environments list-environments -session-token STRING -project-slug-input STRING

List all environments for an organization
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s environments list-environments --session-token "Sit inventore." --project-slug-input "Dolorem qui."
`, os.Args[0])
}

func environmentsUpdateEnvironmentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] environments update-environment -body JSON -slug STRING -session-token STRING -project-slug-input STRING

Update an environment
    -body JSON: 
    -slug STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s environments update-environment --body '{
      "description": "Dolorem qui distinctio harum nulla.",
      "entries_to_remove": [
         "Sint ratione alias provident possimus.",
         "Perspiciatis nobis.",
         "Sit soluta dolor iure et unde sint."
      ],
      "entries_to_update": [
         {
            "name": "Sunt dolor.",
            "value": "Veritatis totam dolor vel."
         },
         {
            "name": "Sunt dolor.",
            "value": "Veritatis totam dolor vel."
         },
         {
            "name": "Sunt dolor.",
            "value": "Veritatis totam dolor vel."
         },
         {
            "name": "Sunt dolor.",
            "value": "Veritatis totam dolor vel."
         }
      ],
      "name": "Libero nulla similique."
   }' --slug "843" --session-token "Incidunt officiis inventore." --project-slug-input "Voluptatem unde laborum et."
`, os.Args[0])
}

func environmentsDeleteEnvironmentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] environments delete-environment -slug STRING -session-token STRING -project-slug-input STRING

Delete an environment
    -slug STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s environments delete-environment --slug "agl" --session-token "Necessitatibus rerum sit." --project-slug-input "Veniam amet qui natus porro iure."
`, os.Args[0])
}

// integrationsUsage displays the usage of the integrations command and its
// subcommands.
func integrationsUsage() {
	fmt.Fprintf(os.Stderr, `Explore third-party tools in Gram.
Usage:
    %[1]s [globalflags] integrations COMMAND [flags]

COMMAND:
    get: Get a third-party integration by ID or name.
    list: List available third-party integrations.

Additional help:
    %[1]s integrations COMMAND --help
`, os.Args[0])
}
func integrationsGetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] integrations get -id STRING -name STRING -session-token STRING -project-slug-input STRING

Get a third-party integration by ID or name.
    -id STRING: 
    -name STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s integrations get --id "Amet dolorum necessitatibus enim officiis laudantium placeat." --name "Sit earum dignissimos dolor." --session-token "Voluptatem libero." --project-slug-input "Dignissimos ipsum exercitationem quia quas ex saepe."
`, os.Args[0])
}

func integrationsListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] integrations list -keywords JSON -session-token STRING -project-slug-input STRING

List available third-party integrations.
    -keywords JSON: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s integrations list --keywords '[
      "vd9",
      "9ee",
      "g1w"
   ]' --session-token "Cumque dolor et molestiae doloremque." --project-slug-input "Omnis hic magni ea ipsum et."
`, os.Args[0])
}

// keysUsage displays the usage of the keys command and its subcommands.
func keysUsage() {
	fmt.Fprintf(os.Stderr, `Managing system api keys.
Usage:
    %[1]s [globalflags] keys COMMAND [flags]

COMMAND:
    create-key: Create a new api key
    list-keys: List all api keys for an organization
    revoke-key: Revoke a api key

Additional help:
    %[1]s keys COMMAND --help
`, os.Args[0])
}
func keysCreateKeyUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] keys create-key -body JSON -session-token STRING

Create a new api key
    -body JSON: 
    -session-token STRING: 

Example:
    %[1]s keys create-key --body '{
      "name": "Illo repellendus."
   }' --session-token "Est sit ut autem."
`, os.Args[0])
}

func keysListKeysUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] keys list-keys -session-token STRING

List all api keys for an organization
    -session-token STRING: 

Example:
    %[1]s keys list-keys --session-token "Iste est saepe."
`, os.Args[0])
}

func keysRevokeKeyUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] keys revoke-key -id STRING -session-token STRING

Revoke a api key
    -id STRING: 
    -session-token STRING: 

Example:
    %[1]s keys revoke-key --id "Hic consectetur." --session-token "Ex consequatur aperiam earum necessitatibus alias."
`, os.Args[0])
}

// packagesUsage displays the usage of the packages command and its subcommands.
func packagesUsage() {
	fmt.Fprintf(os.Stderr, `Manages packages in Gram.
Usage:
    %[1]s [globalflags] packages COMMAND [flags]

COMMAND:
    create-package: Create a new package for a project.
    update-package: Update package details.
    list-versions: List published versions of a package.
    publish: Publish a new version of a package.

Additional help:
    %[1]s packages COMMAND --help
`, os.Args[0])
}
func packagesCreatePackageUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] packages create-package -body JSON -apikey-token STRING -session-token STRING -project-slug-input STRING

Create a new package for a project.
    -body JSON: 
    -apikey-token STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s packages create-package --body '{
      "description": "u17",
      "image_asset_id": "2hg",
      "keywords": [
         "Maxime voluptatem occaecati nisi.",
         "Autem blanditiis.",
         "Sequi laudantium qui autem est dolores voluptas."
      ],
      "name": "gmf",
      "summary": "bt1",
      "title": "1kc",
      "url": "mge"
   }' --apikey-token "Consequatur eos voluptates vero." --session-token "Totam id voluptatum repellat ut voluptatem suscipit." --project-slug-input "Suscipit quo minima laboriosam ipsam qui."
`, os.Args[0])
}

func packagesUpdatePackageUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] packages update-package -body JSON -apikey-token STRING -session-token STRING -project-slug-input STRING

Update package details.
    -body JSON: 
    -apikey-token STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s packages update-package --body '{
      "description": "zju",
      "id": "vck",
      "image_asset_id": "h99",
      "keywords": [
         "Sunt voluptatem veniam blanditiis.",
         "Dolor non consequatur.",
         "Doloribus quo aut quam."
      ],
      "summary": "zmr",
      "title": "aqv",
      "url": "vjr"
   }' --apikey-token "Qui consectetur fugiat repudiandae laboriosam voluptates quisquam." --session-token "Eos fuga ratione voluptatem et aspernatur repellendus." --project-slug-input "Consectetur et vel."
`, os.Args[0])
}

func packagesListVersionsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] packages list-versions -name STRING -apikey-token STRING -session-token STRING -project-slug-input STRING

List published versions of a package.
    -name STRING: 
    -apikey-token STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s packages list-versions --name "Et pariatur maiores dolorum." --apikey-token "Mollitia ratione dolore odio." --session-token "Aliquid quis quo eaque sint." --project-slug-input "Quo tenetur."
`, os.Args[0])
}

func packagesPublishUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] packages publish -body JSON -apikey-token STRING -session-token STRING -project-slug-input STRING

Publish a new version of a package.
    -body JSON: 
    -apikey-token STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s packages publish --body '{
      "deployment_id": "Quasi voluptatem.",
      "name": "Eum voluptatem dignissimos ut vel similique qui.",
      "version": "Non illo quod distinctio.",
      "visibility": "public"
   }' --apikey-token "Non et excepturi omnis rem." --session-token "Quo atque voluptatibus aut minima iusto." --project-slug-input "Occaecati accusantium quas ratione aut."
`, os.Args[0])
}

// projectsUsage displays the usage of the projects command and its subcommands.
func projectsUsage() {
	fmt.Fprintf(os.Stderr, `Manages projects in Gram.
Usage:
    %[1]s [globalflags] projects COMMAND [flags]

COMMAND:
    create-project: Create a new project.
    list-projects: List all projects for an organization.

Additional help:
    %[1]s projects COMMAND --help
`, os.Args[0])
}
func projectsCreateProjectUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] projects create-project -body JSON -apikey-token STRING -session-token STRING

Create a new project.
    -body JSON: 
    -apikey-token STRING: 
    -session-token STRING: 

Example:
    %[1]s projects create-project --body '{
      "name": "331",
      "organization_id": "Iure deleniti totam voluptatem tempora consequatur vitae."
   }' --apikey-token "Earum culpa rem et nulla." --session-token "Autem ut in repellendus cupiditate."
`, os.Args[0])
}

func projectsListProjectsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] projects list-projects -organization-id STRING -session-token STRING -apikey-token STRING

List all projects for an organization.
    -organization-id STRING: 
    -session-token STRING: 
    -apikey-token STRING: 

Example:
    %[1]s projects list-projects --organization-id "Rem ut omnis perspiciatis omnis." --session-token "Vitae vitae mollitia." --apikey-token "Ut voluptas qui eligendi."
`, os.Args[0])
}

// toolsUsage displays the usage of the tools command and its subcommands.
func toolsUsage() {
	fmt.Fprintf(os.Stderr, `Dashboard API for interacting with tools.
Usage:
    %[1]s [globalflags] tools COMMAND [flags]

COMMAND:
    list-tools: List all tools for a project

Additional help:
    %[1]s tools COMMAND --help
`, os.Args[0])
}
func toolsListToolsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] tools list-tools -cursor STRING -deployment-id STRING -session-token STRING -project-slug-input STRING

List all tools for a project
    -cursor STRING: 
    -deployment-id STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s tools list-tools --cursor "Provident error." --deployment-id "Perferendis et non velit." --session-token "Dolorem quibusdam animi." --project-slug-input "Officiis molestiae."
`, os.Args[0])
}

// instancesUsage displays the usage of the instances command and its
// subcommands.
func instancesUsage() {
	fmt.Fprintf(os.Stderr, `Consumer APIs for interacting with all relevant data for an instance of a toolset and environment.
Usage:
    %[1]s [globalflags] instances COMMAND [flags]

COMMAND:
    get-instance: Load all relevant data for an instance of a toolset and environment

Additional help:
    %[1]s instances COMMAND --help
`, os.Args[0])
}
func instancesGetInstanceUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] instances get-instance -toolset-slug STRING -environment-slug STRING -session-token STRING -project-slug-input STRING -apikey-token STRING

Load all relevant data for an instance of a toolset and environment
    -toolset-slug STRING: 
    -environment-slug STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 
    -apikey-token STRING: 

Example:
    %[1]s instances get-instance --toolset-slug "88a" --environment-slug "rvd" --session-token "Aut corporis." --project-slug-input "Porro ut ut voluptate qui nihil." --apikey-token "Fugit animi libero nam placeat quis."
`, os.Args[0])
}

// toolsetsUsage displays the usage of the toolsets command and its subcommands.
func toolsetsUsage() {
	fmt.Fprintf(os.Stderr, `Managed toolsets for gram AI consumers.
Usage:
    %[1]s [globalflags] toolsets COMMAND [flags]

COMMAND:
    create-toolset: Create a new toolset with associated tools
    list-toolsets: List all toolsets for a project
    update-toolset: Update a toolset's properties including name, description, and HTTP tools
    delete-toolset: Delete a toolset by its ID
    get-toolset: Get detailed information about a toolset including full HTTP tool definitions

Additional help:
    %[1]s toolsets COMMAND --help
`, os.Args[0])
}
func toolsetsCreateToolsetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] toolsets create-toolset -body JSON -session-token STRING -project-slug-input STRING

Create a new toolset with associated tools
    -body JSON: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s toolsets create-toolset --body '{
      "default_environment_slug": "9ol",
      "description": "Laudantium voluptatum qui est.",
      "http_tool_names": [
         "Rerum et.",
         "Sunt distinctio quidem odit officia.",
         "Occaecati autem est itaque in veniam."
      ],
      "name": "Iste voluptas ex nihil ex eligendi nesciunt."
   }' --session-token "Alias qui." --project-slug-input "Blanditiis et nesciunt."
`, os.Args[0])
}

func toolsetsListToolsetsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] toolsets list-toolsets -session-token STRING -project-slug-input STRING

List all toolsets for a project
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s toolsets list-toolsets --session-token "Pariatur autem." --project-slug-input "Animi ut nulla aliquam ut."
`, os.Args[0])
}

func toolsetsUpdateToolsetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] toolsets update-toolset -body JSON -slug STRING -session-token STRING -project-slug-input STRING

Update a toolset's properties including name, description, and HTTP tools
    -body JSON: 
    -slug STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s toolsets update-toolset --body '{
      "default_environment_slug": "0j6",
      "description": "A eos.",
      "http_tool_names": [
         "Inventore autem.",
         "Id eveniet voluptatem perferendis."
      ],
      "name": "Facere omnis ut vel quia."
   }' --slug "w8z" --session-token "Qui distinctio dolores culpa iusto voluptatem." --project-slug-input "Aut neque exercitationem earum."
`, os.Args[0])
}

func toolsetsDeleteToolsetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] toolsets delete-toolset -slug STRING -session-token STRING -project-slug-input STRING

Delete a toolset by its ID
    -slug STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s toolsets delete-toolset --slug "m4u" --session-token "Et consequuntur." --project-slug-input "Placeat accusamus id ut nulla est soluta."
`, os.Args[0])
}

func toolsetsGetToolsetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] toolsets get-toolset -slug STRING -session-token STRING -project-slug-input STRING

Get detailed information about a toolset including full HTTP tool definitions
    -slug STRING: 
    -session-token STRING: 
    -project-slug-input STRING: 

Example:
    %[1]s toolsets get-toolset --slug "rmd" --session-token "Quia nulla fuga aut enim magni." --project-slug-input "Ipsum ab facere voluptatem voluptates."
`, os.Args[0])
}
