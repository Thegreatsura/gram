// Code generated by goa v3.20.1, DO NOT EDIT.
//
// assets service
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package assets

import (
	"context"
	"io"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Manages assets used by Gram projects.
type Service interface {
	// Serve an image from Gram.

	// If body implements [io.WriterTo], that implementation will be used instead.
	// Consider [goa.design/goa/v3/pkg.SkipResponseWriter] to adapt existing
	// implementations.
	ServeImage(context.Context, *ServeImageForm) (res *ServeImageResult, body io.ReadCloser, err error)
	// Upload an image to Gram.
	UploadImage(context.Context, *UploadImageForm, io.ReadCloser) (res *UploadImageResult, err error)
	// Upload an OpenAPI v3 document to Gram.
	UploadOpenAPIv3(context.Context, *UploadOpenAPIv3Form, io.ReadCloser) (res *UploadOpenAPIv3Result, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// APIKeyAuth implements the authorization logic for the APIKey security scheme.
	APIKeyAuth(ctx context.Context, key string, schema *security.APIKeyScheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "gram"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "assets"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [3]string{"serveImage", "uploadImage", "uploadOpenAPIv3"}

type Asset struct {
	// The ID of the asset
	ID   string
	Kind string
	// The SHA256 hash of the asset
	Sha256 string
	// The content type of the asset
	ContentType string
	// The content length of the asset
	ContentLength int64
	// The creation date of the asset.
	CreatedAt string
	// The last update date of the asset.
	UpdatedAt string
}

// ServeImageForm is the payload type of the assets service serveImage method.
type ServeImageForm struct {
	SessionToken *string
	// The ID of the asset to serve
	ID string
}

// ServeImageResult is the result type of the assets service serveImage method.
type ServeImageResult struct {
	ContentType   string
	ContentLength int64
	LastModified  string
}

// UploadImageForm is the payload type of the assets service uploadImage method.
type UploadImageForm struct {
	ApikeyToken      *string
	SessionToken     *string
	ProjectSlugInput *string
	ContentType      string
	ContentLength    int64
}

// UploadImageResult is the result type of the assets service uploadImage
// method.
type UploadImageResult struct {
	// The asset entry that was created in Gram
	Asset *Asset
}

// UploadOpenAPIv3Form is the payload type of the assets service
// uploadOpenAPIv3 method.
type UploadOpenAPIv3Form struct {
	ApikeyToken      *string
	SessionToken     *string
	ProjectSlugInput *string
	ContentType      string
	ContentLength    int64
}

// UploadOpenAPIv3Result is the result type of the assets service
// uploadOpenAPIv3 method.
type UploadOpenAPIv3Result struct {
	// The asset entry that was created in Gram
	Asset *Asset
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unauthorized", false, false, false)
}

// MakeForbidden builds a goa.ServiceError from an error.
func MakeForbidden(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "forbidden", false, false, false)
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "bad_request", false, false, false)
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "not_found", false, false, false)
}

// MakeConflict builds a goa.ServiceError from an error.
func MakeConflict(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "conflict", false, false, false)
}

// MakeUnsupportedMedia builds a goa.ServiceError from an error.
func MakeUnsupportedMedia(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unsupported_media", false, false, false)
}

// MakeInvalid builds a goa.ServiceError from an error.
func MakeInvalid(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "invalid", false, false, false)
}

// MakeInvariantViolation builds a goa.ServiceError from an error.
func MakeInvariantViolation(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "invariant_violation", false, false, true)
}

// MakeUnexpected builds a goa.ServiceError from an error.
func MakeUnexpected(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unexpected", false, false, true)
}
