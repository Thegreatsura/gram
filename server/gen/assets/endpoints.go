// Code generated by goa v3.20.1, DO NOT EDIT.
//
// assets endpoints
//
// Command:
// $ goa gen github.com/speakeasy-api/gram/design

package assets

import (
	"context"
	"io"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "assets" service endpoints.
type Endpoints struct {
	UploadOpenAPIv3 goa.Endpoint
}

// UploadOpenAPIv3RequestData holds both the payload and the HTTP request body
// reader of the "uploadOpenAPIv3" method.
type UploadOpenAPIv3RequestData struct {
	// Payload is the method payload.
	Payload *UploadOpenAPIv3Payload
	// Body streams the HTTP request body.
	Body io.ReadCloser
}

// NewEndpoints wraps the methods of the "assets" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		UploadOpenAPIv3: NewUploadOpenAPIv3Endpoint(s, a.APIKeyAuth),
	}
}

// Use applies the given middleware to all the "assets" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.UploadOpenAPIv3 = m(e.UploadOpenAPIv3)
}

// NewUploadOpenAPIv3Endpoint returns an endpoint function that calls the
// method "uploadOpenAPIv3" of service "assets".
func NewUploadOpenAPIv3Endpoint(s Service, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		ep := req.(*UploadOpenAPIv3RequestData)
		var err error
		sc := security.APIKeyScheme{
			Name:           "session",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var key string
		if ep.Payload.SessionToken != nil {
			key = *ep.Payload.SessionToken
		}
		ctx, err = authAPIKeyFn(ctx, key, &sc)
		if err == nil {
			sc := security.APIKeyScheme{
				Name:           "project_slug",
				Scopes:         []string{},
				RequiredScopes: []string{},
			}
			var key string
			if ep.Payload.ProjectSlug != nil {
				key = *ep.Payload.ProjectSlug
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
		}
		if err != nil {
			return nil, err
		}
		return s.UploadOpenAPIv3(ctx, ep.Payload, ep.Body)
	}
}
