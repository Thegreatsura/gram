-- ðŸš¨
-- ðŸš¨ READ .cursor/rules/database-design.mdc BEFORE EDITING THIS FILE
-- ðŸš¨

-- https://gist.github.com/kjmph/5bd772b2c2df145aa645b837da7eca74
CREATE OR REPLACE FUNCTION generate_uuidv7()
RETURNS uuid
AS $$
BEGIN
  -- use random v4 uuid as starting point (which has the same variant we need)
  -- then overlay timestamp
  -- then set version 7 by flipping the 2 and 1 bit in the version 4 string
  return encode(
    set_bit(
      set_bit(
        overlay(uuid_send(gen_random_uuid())
                placing substring(int8send(floor(extract(epoch from clock_timestamp()) * 1000)::bigint) from 3)
                from 1 for 6
        ),
        52, 1
      ),
      53, 1
    ),
    'hex')::uuid;
END
$$
LANGUAGE plpgsql
volatile;

CREATE TABLE IF NOT EXISTS projects (
  id uuid NOT NULL DEFAULT generate_uuidv7(),
  name TEXT NOT NULL CHECK (name <> '' AND CHAR_LENGTH(name) <= 40),
  slug TEXT NOT NULL CHECK (slug <> '' AND CHAR_LENGTH(slug) <= 40),

  organization_id TEXT NOT NULL,

  created_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  updated_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  deleted_at timestamptz,
  deleted boolean NOT NULL GENERATED ALWAYS AS (deleted_at IS NOT NULL) stored,

  CONSTRAINT projects_pkey PRIMARY KEY (id)
);

CREATE UNIQUE INDEX IF NOT EXISTS projects_organization_id_slug_key
ON projects (organization_id, slug)
WHERE deleted IS FALSE;

CREATE TABLE IF NOT EXISTS deployments (
  id uuid NOT NULL DEFAULT generate_uuidv7(),
  seq BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY, -- Use this to serialize the processing of deployments. Tools will be created from the latest deployment.
  user_id TEXT NOT NULL,
  project_id uuid NOT NULL,
  organization_id TEXT NOT NULL,
  idempotency_key TEXT NOT NULL,
  cloned_from uuid,

  github_repo TEXT CHECK (github_repo <> '' AND CHAR_LENGTH(github_repo) <= 100),
  github_pr TEXT CHECK (github_pr <> '' AND CHAR_LENGTH(github_pr) <= 100),
  github_sha TEXT CHECK (github_sha <> '' AND CHAR_LENGTH(github_sha) <= 100),
  external_id TEXT CHECK (external_id <> '' AND CHAR_LENGTH(external_id) <= 100),
  external_url TEXT CHECK (external_url <> '' AND CHAR_LENGTH(external_url) <= 100),

  created_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  updated_at timestamptz NOT NULL DEFAULT clock_timestamp(),

  CONSTRAINT deployments_pkey PRIMARY KEY (id),
  CONSTRAINT deployments_project_id_idempotency_key UNIQUE (project_id, idempotency_key),
  CONSTRAINT deployments_seq_key UNIQUE (seq),
  CONSTRAINT deployments_project_id_fkey FOREIGN key (project_id) REFERENCES projects (id) ON DELETE RESTRICT
);

CREATE TABLE IF NOT EXISTS deployment_statuses (
  id uuid NOT NULL DEFAULT generate_uuidv7(),
  seq BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY,

  deployment_id uuid NOT NULL,
  status text NOT NULL,

  created_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  updated_at timestamptz NOT NULL DEFAULT clock_timestamp(),

  CONSTRAINT deployment_statuses_pkey PRIMARY KEY (id),
  CONSTRAINT deployment_statuses_seq_key UNIQUE (seq)
);

CREATE TABLE IF NOT EXISTS deployment_logs (
  id uuid NOT NULL DEFAULT generate_uuidv7(),
  seq BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY,

  event text NOT NULL,
  message text NOT NULL,
  deployment_id uuid NOT NULL,
  project_id uuid NOT NULL,

  created_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  updated_at timestamptz NOT NULL DEFAULT clock_timestamp(),

  CONSTRAINT deployment_logs_pkey PRIMARY KEY (id),
  CONSTRAINT deployment_logs_seq_key UNIQUE (seq),
  CONSTRAINT deployment_logs_deployment_id_fkey FOREIGN key (deployment_id) REFERENCES deployments (id) ON DELETE SET NULL,
  CONSTRAINT deployment_logs_project_id_fkey FOREIGN key (project_id) REFERENCES projects (id) ON DELETE SET NULL
);

CREATE TABLE IF NOT EXISTS packages (
  id uuid NOT NULL DEFAULT generate_uuidv7(),
  name TEXT NOT NULL CHECK (name <> '' AND CHAR_LENGTH(name) <= 100),
  
  title TEXT CHECK (title <> '' AND CHAR_LENGTH(title) <= 100),
  summary TEXT CHECK (summary <> '' AND CHAR_LENGTH(summary) <= 80),
  keywords TEXT[] NOT NULL DEFAULT ARRAY[]::TEXT[] CHECK (array_length(keywords, 1) <= 8),

  organization_id TEXT NOT NULL,
  project_id uuid NOT NULL,

  created_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  updated_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  deleted_at timestamptz,
  deleted boolean NOT NULL GENERATED ALWAYS AS (deleted_at IS NOT NULL) stored,

  CONSTRAINT packages_pkey PRIMARY KEY (id),
  CONSTRAINT packages_project_id_fkey FOREIGN KEY (project_id) REFERENCES projects (id) ON DELETE CASCADE
);

CREATE INDEX IF NOT EXISTS packages_name_idx ON packages (name);

-- package name must be unique within an organization
CREATE UNIQUE INDEX IF NOT EXISTS packages_organization_id_name_key
ON packages (organization_id, name)
WHERE deleted IS FALSE;

-- only one active package per project
CREATE UNIQUE INDEX IF NOT EXISTS packages_project_id_key
ON packages (project_id)
WHERE deleted IS FALSE;

CREATE TABLE IF NOT EXISTS package_versions (
  id uuid NOT NULL DEFAULT generate_uuidv7(),
  package_id uuid NOT NULL,
  deployment_id uuid NOT NULL,
  
  visibility TEXT NOT NULL CHECK (visibility <> '' AND CHAR_LENGTH(visibility) <= 20),
  major BIGINT NOT NULL CHECK (major >= 0 AND major <= 32767),
  minor BIGINT NOT NULL CHECK (minor >= 0 AND minor <= 32767),
  patch BIGINT NOT NULL CHECK (patch >= 0 AND patch <= 32767),
  prerelease TEXT CHECK (prerelease <> '' AND CHAR_LENGTH(prerelease) <= 20),
  build TEXT CHECK (build <> '' AND CHAR_LENGTH(build) <= 20),

  created_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  updated_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  deleted_at timestamptz,
  deleted boolean NOT NULL GENERATED ALWAYS AS (deleted_at IS NOT NULL) stored,

  CONSTRAINT package_versions_pkey PRIMARY KEY (id),
  CONSTRAINT package_versions_package_id_fkey FOREIGN KEY (package_id) REFERENCES packages (id) ON DELETE CASCADE,
  CONSTRAINT package_versions_deployment_id_fkey FOREIGN KEY (deployment_id) REFERENCES deployments (id) ON DELETE CASCADE
);

CREATE UNIQUE INDEX IF NOT EXISTS package_versions_package_id_semver_key
ON package_versions (package_id DESC, major DESC, minor DESC, patch DESC, prerelease, build)
WHERE deleted IS FALSE;

CREATE TABLE IF NOT EXISTS assets (
  id uuid NOT NULL DEFAULT generate_uuidv7(),
  project_id uuid NOT NULL,

  name TEXT NOT NULL CHECK (name <> '' AND CHAR_LENGTH(name) <= 100),
  url TEXT NOT NULL,
  kind TEXT NOT NULL,
  content_type TEXT NOT NULL,
  content_length BIGINT NOT NULL,
  sha256 TEXT NOT NULL,

  created_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  updated_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  deleted_at timestamptz,
  deleted boolean NOT NULL GENERATED ALWAYS AS (deleted_at IS NOT NULL) stored,

  CONSTRAINT assets_pkey PRIMARY KEY (id),
  CONSTRAINT assets_project_id_sha256_key UNIQUE (project_id, sha256)
);

CREATE TABLE IF NOT EXISTS api_keys (
  id uuid NOT NULL DEFAULT generate_uuidv7(),

  organization_id TEXT NOT NULL,
  project_id uuid,
  created_by_user_id TEXT NOT NULL,

  name TEXT NOT NULL CHECK (name <> '' AND CHAR_LENGTH(name) <= 40),
  token TEXT NOT NULL,
  scopes TEXT[] NOT NULL DEFAULT ARRAY[]::TEXT[],

  created_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  updated_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  deleted_at timestamptz,
  deleted boolean NOT NULL GENERATED ALWAYS AS (deleted_at IS NOT NULL) stored,

  CONSTRAINT api_keys_pkey PRIMARY KEY (id),
  CONSTRAINT api_keys_token_key UNIQUE (token),
  CONSTRAINT api_keys_project_id_fkey FOREIGN KEY (project_id) REFERENCES projects (id) ON DELETE SET NULL
);

CREATE UNIQUE INDEX IF NOT EXISTS api_keys_organization_id_name_key
ON api_keys (organization_id, name)
WHERE deleted IS FALSE;

CREATE TABLE IF NOT EXISTS deployments_openapiv3_assets (
  id uuid NOT NULL DEFAULT generate_uuidv7(),
  deployment_id uuid NOT NULL,
  asset_id uuid NOT NULL,
  name TEXT NOT NULL CHECK (name <> '' AND CHAR_LENGTH(name) <= 60),
  slug TEXT NOT NULL CHECK (slug <> '' AND CHAR_LENGTH(slug) <= 60),

  CONSTRAINT deployments_openapiv3_documents_pkey PRIMARY KEY (id),
  CONSTRAINT deployments_openapiv3_documents_deployment_id_fkey FOREIGN key (deployment_id) REFERENCES deployments (id) ON DELETE CASCADE,
  CONSTRAINT deployments_openapiv3_documents_asset_id_fkey FOREIGN key (asset_id) REFERENCES assets (id) ON DELETE CASCADE,
  CONSTRAINT deployments_openapiv3_documents_deployment_id_slug_key UNIQUE (deployment_id, slug)
);

CREATE TABLE IF NOT EXISTS deployments_packages (
  id uuid NOT NULL DEFAULT generate_uuidv7(),
  deployment_id uuid NOT NULL,

  package_id uuid NOT NULL,
  version_id uuid NOT NULL,

  CONSTRAINT deployments_packages_pkey PRIMARY KEY (id),
  CONSTRAINT deployments_packages_deployment_id_fkey FOREIGN key (deployment_id) REFERENCES deployments (id) ON DELETE CASCADE,
  CONSTRAINT deployments_packages_package_id_fkey FOREIGN key (package_id) REFERENCES packages (id) ON DELETE CASCADE,
  CONSTRAINT deployments_packages_version_id_fkey FOREIGN key (version_id) REFERENCES package_versions (id) ON DELETE CASCADE,
  -- a single deployment cannot have duplicate packages
  CONSTRAINT deployments_packages_deployment_id_package_id_key UNIQUE (deployment_id, package_id)
);

CREATE TABLE IF NOT EXISTS http_tool_definitions (
  id uuid NOT NULL DEFAULT generate_uuidv7(),

  project_id uuid NOT NULL,
  deployment_id uuid NOT NULL,

  openapiv3_document_id uuid,

  name TEXT NOT NULL CHECK (name <> '' AND CHAR_LENGTH(name) <= 100),
  summary TEXT NOT NULL,
  description TEXT NOT NULL,
  openapiv3_operation TEXT CHECK (openapiv3_operation <> '' AND CHAR_LENGTH(openapiv3_operation) <= 100),
  tags TEXT[] NOT NULL DEFAULT ARRAY[]::TEXT[] CHECK (array_length(tags, 1) <= 40),

  server_env_var TEXT NOT NULL,
  default_server_url TEXT,
  security jsonb,

  http_method TEXT NOT NULL CHECK (http_method <> '' AND CHAR_LENGTH(http_method) <= 20),
  path TEXT NOT NULL CHECK (path <> '' AND CHAR_LENGTH(path) <= 140),
  schema_version TEXT NOT NULL CHECK (schema_version <> '' AND CHAR_LENGTH(schema_version) <= 20),
  schema JSONB,
  header_settings JSONB,
  query_settings JSONB,
  path_settings JSONB,
  request_content_type TEXT,

  created_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  updated_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  deleted_at timestamptz,
  deleted boolean NOT NULL GENERATED ALWAYS AS (deleted_at IS NOT NULL) stored,

  CONSTRAINT http_tool_definitions_pkey PRIMARY KEY (id),
  CONSTRAINT http_tool_definitions_deployment_id_fkey FOREIGN key (deployment_id) REFERENCES deployments (id) ON DELETE CASCADE,
  CONSTRAINT http_tool_definitions_openapiv3_document_id_fkey FOREIGN key (openapiv3_document_id) REFERENCES deployments_openapiv3_assets (id) ON DELETE RESTRICT,
  CONSTRAINT http_tool_definitions_project_id_fkey FOREIGN key (project_id) REFERENCES projects (id) ON DELETE CASCADE
);

CREATE INDEX IF NOT EXISTS http_tool_definitions_name_idx ON http_tool_definitions (name);

CREATE TABLE IF NOT EXISTS environments (
  id uuid NOT NULL DEFAULT generate_uuidv7(),
  organization_id TEXT NOT NULL,
  project_id uuid NOT NULL,
  name TEXT NOT NULL CHECK (name <> '' AND CHAR_LENGTH(name) <= 40),
  slug TEXT NOT NULL CHECK (slug <> '' AND CHAR_LENGTH(slug) <= 40),
  description TEXT CHECK (description <> '' AND CHAR_LENGTH(description) <= 100),

  created_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  updated_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  deleted_at timestamptz,
  deleted boolean NOT NULL GENERATED ALWAYS AS (deleted_at IS NOT NULL) stored,

  CONSTRAINT environments_pkey PRIMARY KEY (id),
  CONSTRAINT environments_project_id_fkey FOREIGN KEY (project_id) REFERENCES projects (id) ON DELETE SET NULL
);

CREATE UNIQUE INDEX IF NOT EXISTS environments_project_id_slug_key
ON environments (project_id, slug)
WHERE deleted IS FALSE;

CREATE TABLE IF NOT EXISTS environment_entries (
  name TEXT NOT NULL CHECK (name <> '' AND CHAR_LENGTH(name) <= 60),
  value TEXT NOT NULL CHECK (value <> '' AND CHAR_LENGTH(value) <= 4000),
  environment_id uuid NOT NULL,

  created_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  updated_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  CONSTRAINT environments_entries_pkey PRIMARY KEY (environment_id, name),
  CONSTRAINT environments_entries_environment_id_fkey FOREIGN KEY (environment_id) REFERENCES environments (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS toolsets (
  id uuid NOT NULL DEFAULT generate_uuidv7(),

  organization_id TEXT NOT NULL,
  project_id uuid NOT NULL,
  name TEXT NOT NULL CHECK (name <> '' AND CHAR_LENGTH(name) <= 40),
  slug TEXT NOT NULL CHECK (slug <> '' AND CHAR_LENGTH(slug) <= 40),
  description TEXT CHECK (description <> '' AND CHAR_LENGTH(description) <= 100),
  default_environment_slug TEXT CHECK (default_environment_slug <> '' AND CHAR_LENGTH(default_environment_slug) <= 40),
  http_tool_names TEXT[] NOT NULL DEFAULT ARRAY[]::TEXT[] CHECK (array_length(http_tool_names, 1) <= 100),

  created_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  updated_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  deleted_at timestamptz,
  deleted boolean NOT NULL GENERATED ALWAYS AS (deleted_at IS NOT NULL) stored,

  CONSTRAINT toolsets_pkey PRIMARY KEY (id),
  CONSTRAINT toolsets_project_id_fkey FOREIGN key (project_id) REFERENCES projects (id) ON DELETE SET NULL
);

CREATE UNIQUE INDEX IF NOT EXISTS toolsets_project_id_slug_key
ON toolsets (project_id, slug)
WHERE deleted IS FALSE;

CREATE TABLE IF NOT EXISTS http_security (
  id uuid NOT NULL DEFAULT generate_uuidv7(),
  
  key TEXT NOT NULL CHECK (key <> '' AND CHAR_LENGTH(key) <= 60),
  deployment_id uuid NOT NULL,
  type TEXT CHECK (type <> '' AND CHAR_LENGTH(type) <= 20),
  name TEXT CHECK (name <> '' AND CHAR_LENGTH(name) <= 60),
  in_placement TEXT CHECK (in_placement <> '' AND CHAR_LENGTH(in_placement) <= 10), -- header, query, path
  scheme TEXT CHECK (scheme <> '' AND CHAR_LENGTH(scheme) <= 20),
  bearer_format TEXT CHECK (bearer_format <> '' AND CHAR_LENGTH(bearer_format) <= 20),

  env_variables TEXT[] DEFAULT ARRAY[]::TEXT[],
  
  created_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  updated_at timestamptz NOT NULL DEFAULT clock_timestamp(),
  deleted_at timestamptz,
  deleted boolean NOT NULL GENERATED ALWAYS AS (deleted_at IS NOT NULL) stored,
  
  CONSTRAINT http_security_pkey PRIMARY KEY (id),
  CONSTRAINT http_security_deployment_id_fkey FOREIGN KEY (deployment_id) REFERENCES deployments (id) ON DELETE CASCADE,
  CONSTRAINT http_security_key_unique UNIQUE (deployment_id, key)
);