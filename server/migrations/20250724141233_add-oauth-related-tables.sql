-- Create "oauth_proxy_client_info" table
CREATE TABLE "oauth_proxy_client_info" ("mcp_slug" text NOT NULL, "client_id" text NOT NULL, "client_secret" text NOT NULL, "client_secret_expires_at" timestamptz NOT NULL, "client_name" text NOT NULL, "redirect_uris" text[] NOT NULL DEFAULT ARRAY[]::text[], "grant_types" text[] NOT NULL DEFAULT ARRAY[]::text[], "response_types" text[] NOT NULL DEFAULT ARRAY[]::text[], "scope" text NOT NULL, "token_endpoint_auth_method" text NOT NULL, "application_type" text NOT NULL, "created_at" timestamptz NOT NULL DEFAULT clock_timestamp(), "updated_at" timestamptz NOT NULL DEFAULT clock_timestamp(), PRIMARY KEY ("client_id"), CONSTRAINT "oauth_proxy_client_info_client_id_check" CHECK ((client_id <> ''::text) AND (char_length(client_id) <= 100)), CONSTRAINT "oauth_proxy_client_info_client_secret_check" CHECK ((client_secret <> ''::text) AND (char_length(client_secret) <= 200)), CONSTRAINT "oauth_proxy_client_info_mcp_slug_check" CHECK ((mcp_slug <> ''::text) AND (char_length(mcp_slug) <= 60)));
-- Create "external_oauth_server_metadata" table
CREATE TABLE "external_oauth_server_metadata" ("id" uuid NOT NULL DEFAULT generate_uuidv7(), "project_id" uuid NOT NULL, "slug" text NOT NULL, "metadata" jsonb NOT NULL, "created_at" timestamptz NOT NULL DEFAULT clock_timestamp(), "updated_at" timestamptz NOT NULL DEFAULT clock_timestamp(), "deleted_at" timestamptz NULL, "deleted" boolean NOT NULL GENERATED ALWAYS AS (deleted_at IS NOT NULL) STORED, PRIMARY KEY ("id"), CONSTRAINT "external_oauth_server_metadata_project_id_fkey" FOREIGN KEY ("project_id") REFERENCES "projects" ("id") ON UPDATE NO ACTION ON DELETE CASCADE, CONSTRAINT "external_oauth_server_metadata_slug_check" CHECK ((slug <> ''::text) AND (char_length(slug) <= 100)));
-- Create index "external_oauth_server_metadata_project_slug_key" to table: "external_oauth_server_metadata"
CREATE UNIQUE INDEX "external_oauth_server_metadata_project_slug_key" ON "external_oauth_server_metadata" ("project_id", "slug") WHERE (deleted IS FALSE);
-- Create "oauth_proxy_servers" table
CREATE TABLE "oauth_proxy_servers" ("id" uuid NOT NULL DEFAULT generate_uuidv7(), "project_id" uuid NOT NULL, "slug" text NOT NULL, "created_at" timestamptz NOT NULL DEFAULT clock_timestamp(), "updated_at" timestamptz NOT NULL DEFAULT clock_timestamp(), "deleted_at" timestamptz NULL, "deleted" boolean NOT NULL GENERATED ALWAYS AS (deleted_at IS NOT NULL) STORED, PRIMARY KEY ("id"), CONSTRAINT "oauth_proxy_servers_project_id_fkey" FOREIGN KEY ("project_id") REFERENCES "projects" ("id") ON UPDATE NO ACTION ON DELETE CASCADE, CONSTRAINT "oauth_proxy_servers_slug_check" CHECK ((slug <> ''::text) AND (char_length(slug) <= 100)));
-- Create index "oauth_proxy_servers_project_slug_key" to table: "oauth_proxy_servers"
CREATE UNIQUE INDEX "oauth_proxy_servers_project_slug_key" ON "oauth_proxy_servers" ("project_id", "slug") WHERE (deleted IS FALSE);
-- Create "oauth_proxy_providers" table
CREATE TABLE "oauth_proxy_providers" ("id" uuid NOT NULL DEFAULT generate_uuidv7(), "project_id" uuid NOT NULL, "oauth_proxy_server_id" uuid NOT NULL, "slug" text NOT NULL, "authorization_endpoint" text NOT NULL, "token_endpoint" text NOT NULL, "registration_endpoint" text NULL, "scopes_supported" text[] NULL DEFAULT ARRAY[]::text[], "response_types_supported" text[] NULL DEFAULT ARRAY[]::text[], "response_modes_supported" text[] NULL DEFAULT ARRAY[]::text[], "grant_types_supported" text[] NULL DEFAULT ARRAY[]::text[], "token_endpoint_auth_methods_supported" text[] NULL DEFAULT ARRAY[]::text[], "security_key_names" text[] NULL DEFAULT ARRAY[]::text[], "secrets" jsonb NULL, "created_at" timestamptz NOT NULL DEFAULT clock_timestamp(), "updated_at" timestamptz NOT NULL DEFAULT clock_timestamp(), "deleted_at" timestamptz NULL, "deleted" boolean NOT NULL GENERATED ALWAYS AS (deleted_at IS NOT NULL) STORED, PRIMARY KEY ("id"), CONSTRAINT "oauth_proxy_providers_oauth_proxy_server_id_fkey" FOREIGN KEY ("oauth_proxy_server_id") REFERENCES "oauth_proxy_servers" ("id") ON UPDATE NO ACTION ON DELETE CASCADE, CONSTRAINT "oauth_proxy_providers_project_id_fkey" FOREIGN KEY ("project_id") REFERENCES "projects" ("id") ON UPDATE NO ACTION ON DELETE CASCADE, CONSTRAINT "oauth_proxy_providers_slug_check" CHECK ((slug <> ''::text) AND (char_length(slug) <= 100)));
-- Create index "oauth_proxy_providers_project_slug_key" to table: "oauth_proxy_providers"
CREATE UNIQUE INDEX "oauth_proxy_providers_project_slug_key" ON "oauth_proxy_providers" ("project_id", "slug") WHERE (deleted IS FALSE);
-- Modify "toolsets" table
ALTER TABLE "toolsets" ADD CONSTRAINT "toolsets_oauth_exclusivity" CHECK (((external_oauth_server_id IS NULL) <> (oauth_proxy_server_id IS NULL)) OR ((external_oauth_server_id IS NULL) AND (oauth_proxy_server_id IS NULL))), ADD COLUMN "external_oauth_server_id" uuid NULL, ADD COLUMN "oauth_proxy_server_id" uuid NULL, ADD CONSTRAINT "toolsets_external_oauth_server_id_fkey" FOREIGN KEY ("external_oauth_server_id") REFERENCES "external_oauth_server_metadata" ("id") ON UPDATE NO ACTION ON DELETE SET NULL, ADD CONSTRAINT "toolsets_oauth_proxy_server_id_fkey" FOREIGN KEY ("oauth_proxy_server_id") REFERENCES "oauth_proxy_servers" ("id") ON UPDATE NO ACTION ON DELETE SET NULL;
