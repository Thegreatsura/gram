-- Create "generate_uuidv7" function
CREATE OR REPLACE FUNCTION generate_uuidv7()
RETURNS uuid
AS $$
BEGIN
  -- use random v4 uuid as starting point (which has the same variant we need)
  -- then overlay timestamp
  -- then set version 7 by flipping the 2 and 1 bit in the version 4 string
  return encode(
    set_bit(
      set_bit(
        overlay(uuid_send(gen_random_uuid())
                placing substring(int8send(floor(extract(epoch from clock_timestamp()) * 1000)::bigint) from 3)
                from 1 for 6
        ),
        52, 1
      ),
      53, 1
    ),
    'hex')::uuid;
END
$$
LANGUAGE plpgsql
volatile;
-- Create "deployment_statuses" table
CREATE TABLE "deployment_statuses" ("id" uuid NOT NULL DEFAULT generate_uuidv7(), "seq" bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY, "deployment_id" uuid NOT NULL, "status" text NOT NULL, "created_at" timestamptz NOT NULL DEFAULT clock_timestamp(), "updated_at" timestamptz NOT NULL DEFAULT clock_timestamp(), PRIMARY KEY ("id"), CONSTRAINT "deployment_statuses_seq_key" UNIQUE ("seq"));
-- Create "projects" table
CREATE TABLE "projects" ("id" uuid NOT NULL DEFAULT generate_uuidv7(), "name" text NOT NULL, "slug" text NOT NULL, "organization_id" text NOT NULL, "created_at" timestamptz NOT NULL DEFAULT clock_timestamp(), "updated_at" timestamptz NOT NULL DEFAULT clock_timestamp(), "deleted_at" timestamptz NULL, "deleted" boolean NOT NULL GENERATED ALWAYS AS (deleted_at IS NOT NULL) STORED, PRIMARY KEY ("id"), CONSTRAINT "projects_name_check" CHECK ((name <> ''::text) AND (char_length(name) <= 40)), CONSTRAINT "projects_slug_check" CHECK ((slug <> ''::text) AND (char_length(slug) <= 40)));
-- Create "api_keys" table
CREATE TABLE "api_keys" ("id" uuid NOT NULL DEFAULT generate_uuidv7(), "organization_id" text NOT NULL, "project_id" uuid NULL, "created_by_user_id" text NOT NULL, "name" text NOT NULL, "token" text NOT NULL, "scopes" text[] NOT NULL DEFAULT ARRAY[]::text[], "created_at" timestamptz NOT NULL DEFAULT clock_timestamp(), "updated_at" timestamptz NOT NULL DEFAULT clock_timestamp(), "deleted_at" timestamptz NULL, "deleted" boolean NOT NULL GENERATED ALWAYS AS (deleted_at IS NOT NULL) STORED, PRIMARY KEY ("id"), CONSTRAINT "api_keys_token_key" UNIQUE ("token"), CONSTRAINT "api_keys_project_id_fkey" FOREIGN KEY ("project_id") REFERENCES "projects" ("id") ON UPDATE NO ACTION ON DELETE SET NULL, CONSTRAINT "api_keys_name_check" CHECK ((name <> ''::text) AND (char_length(name) <= 40)));
-- Create "deployments" table
CREATE TABLE "deployments" ("id" uuid NOT NULL DEFAULT generate_uuidv7(), "seq" bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY, "user_id" text NOT NULL, "project_id" uuid NOT NULL, "organization_id" text NOT NULL, "idempotency_key" text NOT NULL, "cloned_from" uuid NULL, "github_repo" text NULL, "github_pr" text NULL, "github_sha" text NULL, "external_id" text NULL, "external_url" text NULL, "created_at" timestamptz NOT NULL DEFAULT clock_timestamp(), "updated_at" timestamptz NOT NULL DEFAULT clock_timestamp(), PRIMARY KEY ("id"), CONSTRAINT "deployments_project_id_idempotency_key" UNIQUE ("project_id", "idempotency_key"), CONSTRAINT "deployments_seq_key" UNIQUE ("seq"), CONSTRAINT "deployments_project_id_fkey" FOREIGN KEY ("project_id") REFERENCES "projects" ("id") ON UPDATE NO ACTION ON DELETE RESTRICT, CONSTRAINT "deployments_external_id_check" CHECK ((external_id <> ''::text) AND (char_length(external_id) <= 100)), CONSTRAINT "deployments_external_url_check" CHECK ((external_url <> ''::text) AND (char_length(external_url) <= 100)), CONSTRAINT "deployments_github_pr_check" CHECK ((github_pr <> ''::text) AND (char_length(github_pr) <= 100)), CONSTRAINT "deployments_github_repo_check" CHECK ((github_repo <> ''::text) AND (char_length(github_repo) <= 100)), CONSTRAINT "deployments_github_sha_check" CHECK ((github_sha <> ''::text) AND (char_length(github_sha) <= 100)));
-- Create "deployment_logs" table
CREATE TABLE "deployment_logs" ("id" uuid NOT NULL DEFAULT generate_uuidv7(), "seq" bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY, "event" text NOT NULL, "message" text NOT NULL, "deployment_id" uuid NOT NULL, "project_id" uuid NOT NULL, "created_at" timestamptz NOT NULL DEFAULT clock_timestamp(), "updated_at" timestamptz NOT NULL DEFAULT clock_timestamp(), PRIMARY KEY ("id"), CONSTRAINT "deployment_logs_seq_key" UNIQUE ("seq"), CONSTRAINT "deployment_logs_deployment_id_fkey" FOREIGN KEY ("deployment_id") REFERENCES "deployments" ("id") ON UPDATE NO ACTION ON DELETE SET NULL, CONSTRAINT "deployment_logs_project_id_fkey" FOREIGN KEY ("project_id") REFERENCES "projects" ("id") ON UPDATE NO ACTION ON DELETE SET NULL);
-- Create "assets" table
CREATE TABLE "assets" ("id" uuid NOT NULL DEFAULT generate_uuidv7(), "project_id" uuid NOT NULL, "name" text NOT NULL, "url" text NOT NULL, "kind" text NOT NULL, "content_type" text NOT NULL, "content_length" bigint NOT NULL, "sha256" text NOT NULL, "created_at" timestamptz NOT NULL DEFAULT clock_timestamp(), "updated_at" timestamptz NOT NULL DEFAULT clock_timestamp(), "deleted_at" timestamptz NULL, "deleted" boolean NOT NULL GENERATED ALWAYS AS (deleted_at IS NOT NULL) STORED, PRIMARY KEY ("id"), CONSTRAINT "assets_project_id_sha256_key" UNIQUE ("project_id", "sha256"), CONSTRAINT "assets_name_check" CHECK ((name <> ''::text) AND (char_length(name) <= 100)));
-- Create "deployments_openapiv3_assets" table
CREATE TABLE "deployments_openapiv3_assets" ("id" uuid NOT NULL DEFAULT generate_uuidv7(), "deployment_id" uuid NOT NULL, "asset_id" uuid NOT NULL, "name" text NOT NULL, "slug" text NOT NULL, CONSTRAINT "deployments_openapiv3_documents_pkey" PRIMARY KEY ("id"), CONSTRAINT "deployments_openapiv3_documents_deployment_id_slug_key" UNIQUE ("deployment_id", "slug"), CONSTRAINT "deployments_openapiv3_documents_asset_id_fkey" FOREIGN KEY ("asset_id") REFERENCES "assets" ("id") ON UPDATE NO ACTION ON DELETE CASCADE, CONSTRAINT "deployments_openapiv3_documents_deployment_id_fkey" FOREIGN KEY ("deployment_id") REFERENCES "deployments" ("id") ON UPDATE NO ACTION ON DELETE CASCADE, CONSTRAINT "deployments_openapiv3_assets_name_check" CHECK ((name <> ''::text) AND (char_length(name) <= 60)), CONSTRAINT "deployments_openapiv3_assets_slug_check" CHECK ((slug <> ''::text) AND (char_length(slug) <= 60)));
-- Create "packages" table
CREATE TABLE "packages" ("id" uuid NOT NULL DEFAULT generate_uuidv7(), "name" text NOT NULL, "title" text NULL, "summary" text NULL, "keywords" text[] NOT NULL DEFAULT ARRAY[]::text[], "organization_id" text NOT NULL, "project_id" uuid NOT NULL, "created_at" timestamptz NOT NULL DEFAULT clock_timestamp(), "updated_at" timestamptz NOT NULL DEFAULT clock_timestamp(), "deleted_at" timestamptz NULL, "deleted" boolean NOT NULL GENERATED ALWAYS AS (deleted_at IS NOT NULL) STORED, PRIMARY KEY ("id"), CONSTRAINT "packages_project_id_fkey" FOREIGN KEY ("project_id") REFERENCES "projects" ("id") ON UPDATE NO ACTION ON DELETE CASCADE, CONSTRAINT "packages_keywords_check" CHECK (array_length(keywords, 1) <= 8), CONSTRAINT "packages_name_check" CHECK ((name <> ''::text) AND (char_length(name) <= 100)), CONSTRAINT "packages_summary_check" CHECK ((summary <> ''::text) AND (char_length(summary) <= 80)), CONSTRAINT "packages_title_check" CHECK ((title <> ''::text) AND (char_length(title) <= 100)));
-- Create "package_versions" table
CREATE TABLE "package_versions" ("id" uuid NOT NULL DEFAULT generate_uuidv7(), "package_id" uuid NOT NULL, "deployment_id" uuid NOT NULL, "visibility" text NOT NULL, "major" bigint NOT NULL, "minor" bigint NOT NULL, "patch" bigint NOT NULL, "prerelease" text NULL, "build" text NULL, "created_at" timestamptz NOT NULL DEFAULT clock_timestamp(), "updated_at" timestamptz NOT NULL DEFAULT clock_timestamp(), "deleted_at" timestamptz NULL, "deleted" boolean NOT NULL GENERATED ALWAYS AS (deleted_at IS NOT NULL) STORED, PRIMARY KEY ("id"), CONSTRAINT "package_versions_deployment_id_fkey" FOREIGN KEY ("deployment_id") REFERENCES "deployments" ("id") ON UPDATE NO ACTION ON DELETE CASCADE, CONSTRAINT "package_versions_package_id_fkey" FOREIGN KEY ("package_id") REFERENCES "packages" ("id") ON UPDATE NO ACTION ON DELETE CASCADE, CONSTRAINT "package_versions_build_check" CHECK ((build <> ''::text) AND (char_length(build) <= 20)), CONSTRAINT "package_versions_major_check" CHECK ((major >= 0) AND (major <= 32767)), CONSTRAINT "package_versions_minor_check" CHECK ((minor >= 0) AND (minor <= 32767)), CONSTRAINT "package_versions_patch_check" CHECK ((patch >= 0) AND (patch <= 32767)), CONSTRAINT "package_versions_prerelease_check" CHECK ((prerelease <> ''::text) AND (char_length(prerelease) <= 20)), CONSTRAINT "package_versions_visibility_check" CHECK ((visibility <> ''::text) AND (char_length(visibility) <= 20)));
-- Create "deployments_packages" table
CREATE TABLE "deployments_packages" ("id" uuid NOT NULL DEFAULT generate_uuidv7(), "deployment_id" uuid NOT NULL, "package_id" uuid NOT NULL, "version_id" uuid NOT NULL, PRIMARY KEY ("id"), CONSTRAINT "deployments_packages_deployment_id_package_id_key" UNIQUE ("deployment_id", "package_id"), CONSTRAINT "deployments_packages_deployment_id_fkey" FOREIGN KEY ("deployment_id") REFERENCES "deployments" ("id") ON UPDATE NO ACTION ON DELETE CASCADE, CONSTRAINT "deployments_packages_package_id_fkey" FOREIGN KEY ("package_id") REFERENCES "packages" ("id") ON UPDATE NO ACTION ON DELETE CASCADE, CONSTRAINT "deployments_packages_version_id_fkey" FOREIGN KEY ("version_id") REFERENCES "package_versions" ("id") ON UPDATE NO ACTION ON DELETE CASCADE);
-- Create "environments" table
CREATE TABLE "environments" ("id" uuid NOT NULL DEFAULT generate_uuidv7(), "organization_id" text NOT NULL, "project_id" uuid NOT NULL, "name" text NOT NULL, "slug" text NOT NULL, "description" text NULL, "created_at" timestamptz NOT NULL DEFAULT clock_timestamp(), "updated_at" timestamptz NOT NULL DEFAULT clock_timestamp(), "deleted_at" timestamptz NULL, "deleted" boolean NOT NULL GENERATED ALWAYS AS (deleted_at IS NOT NULL) STORED, PRIMARY KEY ("id"), CONSTRAINT "environments_project_id_fkey" FOREIGN KEY ("project_id") REFERENCES "projects" ("id") ON UPDATE NO ACTION ON DELETE SET NULL, CONSTRAINT "environments_description_check" CHECK ((description <> ''::text) AND (char_length(description) <= 100)), CONSTRAINT "environments_name_check" CHECK ((name <> ''::text) AND (char_length(name) <= 40)), CONSTRAINT "environments_slug_check" CHECK ((slug <> ''::text) AND (char_length(slug) <= 40)));
-- Create "environment_entries" table
CREATE TABLE "environment_entries" ("name" text NOT NULL, "value" text NOT NULL, "environment_id" uuid NOT NULL, "created_at" timestamptz NOT NULL DEFAULT clock_timestamp(), "updated_at" timestamptz NOT NULL DEFAULT clock_timestamp(), CONSTRAINT "environments_entries_pkey" PRIMARY KEY ("environment_id", "name"), CONSTRAINT "environments_entries_environment_id_fkey" FOREIGN KEY ("environment_id") REFERENCES "environments" ("id") ON UPDATE NO ACTION ON DELETE CASCADE, CONSTRAINT "environment_entries_name_check" CHECK ((name <> ''::text) AND (char_length(name) <= 60)), CONSTRAINT "environment_entries_value_check" CHECK ((value <> ''::text) AND (char_length(value) <= 4000)));
-- Create "http_security" table
CREATE TABLE "http_security" ("id" uuid NOT NULL DEFAULT generate_uuidv7(), "key" text NOT NULL, "deployment_id" uuid NOT NULL, "type" text NULL, "name" text NOT NULL, "in_placement" text NOT NULL, "scheme" text NULL, "bearer_format" text NULL, "env_variables" text[] NULL DEFAULT ARRAY[]::text[], "created_at" timestamptz NOT NULL DEFAULT clock_timestamp(), "updated_at" timestamptz NOT NULL DEFAULT clock_timestamp(), "deleted_at" timestamptz NULL, "deleted" boolean NOT NULL GENERATED ALWAYS AS (deleted_at IS NOT NULL) STORED, PRIMARY KEY ("id"), CONSTRAINT "http_security_key_unique" UNIQUE ("deployment_id", "key"), CONSTRAINT "http_security_deployment_id_fkey" FOREIGN KEY ("deployment_id") REFERENCES "deployments" ("id") ON UPDATE NO ACTION ON DELETE CASCADE, CONSTRAINT "http_security_bearer_format_check" CHECK ((bearer_format <> ''::text) AND (char_length(bearer_format) <= 20)), CONSTRAINT "http_security_in_placement_check" CHECK ((in_placement <> ''::text) AND (char_length(in_placement) <= 10)), CONSTRAINT "http_security_key_check" CHECK ((key <> ''::text) AND (char_length(key) <= 60)), CONSTRAINT "http_security_name_check" CHECK ((name <> ''::text) AND (char_length(name) <= 60)), CONSTRAINT "http_security_scheme_check" CHECK ((scheme <> ''::text) AND (char_length(scheme) <= 20)), CONSTRAINT "http_security_type_check" CHECK ((type <> ''::text) AND (char_length(type) <= 20)));
-- Create "http_tool_definitions" table
CREATE TABLE "http_tool_definitions" ("id" uuid NOT NULL DEFAULT generate_uuidv7(), "project_id" uuid NOT NULL, "deployment_id" uuid NOT NULL, "openapiv3_document_id" uuid NULL, "name" text NOT NULL, "summary" text NOT NULL, "description" text NOT NULL, "openapiv3_operation" text NULL, "tags" text[] NOT NULL DEFAULT ARRAY[]::text[], "server_env_var" text NOT NULL, "default_server_url" text NULL, "security" jsonb NULL, "http_method" text NOT NULL, "path" text NOT NULL, "schema_version" text NOT NULL, "schema" jsonb NULL, "header_settings" jsonb NULL, "query_settings" jsonb NULL, "path_settings" jsonb NULL, "request_content_type" text NULL, "created_at" timestamptz NOT NULL DEFAULT clock_timestamp(), "updated_at" timestamptz NOT NULL DEFAULT clock_timestamp(), "deleted_at" timestamptz NULL, "deleted" boolean NOT NULL GENERATED ALWAYS AS (deleted_at IS NOT NULL) STORED, PRIMARY KEY ("id"), CONSTRAINT "http_tool_definitions_deployment_id_fkey" FOREIGN KEY ("deployment_id") REFERENCES "deployments" ("id") ON UPDATE NO ACTION ON DELETE CASCADE, CONSTRAINT "http_tool_definitions_openapiv3_document_id_fkey" FOREIGN KEY ("openapiv3_document_id") REFERENCES "deployments_openapiv3_assets" ("id") ON UPDATE NO ACTION ON DELETE RESTRICT, CONSTRAINT "http_tool_definitions_project_id_fkey" FOREIGN KEY ("project_id") REFERENCES "projects" ("id") ON UPDATE NO ACTION ON DELETE CASCADE, CONSTRAINT "http_tool_definitions_http_method_check" CHECK ((http_method <> ''::text) AND (char_length(http_method) <= 20)), CONSTRAINT "http_tool_definitions_name_check" CHECK ((name <> ''::text) AND (char_length(name) <= 100)), CONSTRAINT "http_tool_definitions_openapiv3_operation_check" CHECK ((openapiv3_operation <> ''::text) AND (char_length(openapiv3_operation) <= 100)), CONSTRAINT "http_tool_definitions_path_check" CHECK ((path <> ''::text) AND (char_length(path) <= 140)), CONSTRAINT "http_tool_definitions_schema_version_check" CHECK ((schema_version <> ''::text) AND (char_length(schema_version) <= 20)), CONSTRAINT "http_tool_definitions_tags_check" CHECK (array_length(tags, 1) <= 40));
-- Create "toolsets" table
CREATE TABLE "toolsets" ("id" uuid NOT NULL DEFAULT generate_uuidv7(), "organization_id" text NOT NULL, "project_id" uuid NOT NULL, "name" text NOT NULL, "slug" text NOT NULL, "description" text NULL, "default_environment_slug" text NULL, "http_tool_names" text[] NOT NULL DEFAULT ARRAY[]::text[], "created_at" timestamptz NOT NULL DEFAULT clock_timestamp(), "updated_at" timestamptz NOT NULL DEFAULT clock_timestamp(), "deleted_at" timestamptz NULL, "deleted" boolean NOT NULL GENERATED ALWAYS AS (deleted_at IS NOT NULL) STORED, PRIMARY KEY ("id"), CONSTRAINT "toolsets_project_id_fkey" FOREIGN KEY ("project_id") REFERENCES "projects" ("id") ON UPDATE NO ACTION ON DELETE SET NULL, CONSTRAINT "toolsets_default_environment_slug_check" CHECK ((default_environment_slug <> ''::text) AND (char_length(default_environment_slug) <= 40)), CONSTRAINT "toolsets_description_check" CHECK ((description <> ''::text) AND (char_length(description) <= 100)), CONSTRAINT "toolsets_http_tool_names_check" CHECK (array_length(http_tool_names, 1) <= 100), CONSTRAINT "toolsets_name_check" CHECK ((name <> ''::text) AND (char_length(name) <= 40)), CONSTRAINT "toolsets_slug_check" CHECK ((slug <> ''::text) AND (char_length(slug) <= 40)));
