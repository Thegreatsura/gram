/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { environmentsEnvironmentsNumberCreateEnvironment } from "../funcs/environmentsEnvironmentsNumberCreateEnvironment.js";
import { environmentsEnvironmentsNumberDeleteEnvironment } from "../funcs/environmentsEnvironmentsNumberDeleteEnvironment.js";
import { environmentsEnvironmentsNumberListEnvironments } from "../funcs/environmentsEnvironmentsNumberListEnvironments.js";
import { environmentsEnvironmentsNumberUpdateEnvironment } from "../funcs/environmentsEnvironmentsNumberUpdateEnvironment.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Environments extends ClientSDK {
  /**
   * createEnvironment environments
   *
   * @remarks
   * Create a new environment
   */
  async environmentsNumberCreateEnvironment(
    request: operations.EnvironmentsNumberCreateEnvironmentRequest,
    options?: RequestOptions,
  ): Promise<components.Environment> {
    return unwrapAsync(environmentsEnvironmentsNumberCreateEnvironment(
      this,
      request,
      options,
    ));
  }

  /**
   * deleteEnvironment environments
   *
   * @remarks
   * Delete an environment
   */
  async environmentsNumberDeleteEnvironment(
    request: operations.EnvironmentsNumberDeleteEnvironmentRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(environmentsEnvironmentsNumberDeleteEnvironment(
      this,
      request,
      options,
    ));
  }

  /**
   * listEnvironments environments
   *
   * @remarks
   * List all environments for an organization
   */
  async environmentsNumberListEnvironments(
    request?: operations.EnvironmentsNumberListEnvironmentsRequest | undefined,
    options?: RequestOptions,
  ): Promise<components.ListEnvironmentsResult> {
    return unwrapAsync(environmentsEnvironmentsNumberListEnvironments(
      this,
      request,
      options,
    ));
  }

  /**
   * updateEnvironment environments
   *
   * @remarks
   * Update an environment
   */
  async environmentsNumberUpdateEnvironment(
    request: operations.EnvironmentsNumberUpdateEnvironmentRequest,
    options?: RequestOptions,
  ): Promise<components.Environment> {
    return unwrapAsync(environmentsEnvironmentsNumberUpdateEnvironment(
      this,
      request,
      options,
    ));
  }
}
