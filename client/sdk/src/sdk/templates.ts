/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { templatesCreate } from "../funcs/templatesCreate.js";
import { templatesDelete } from "../funcs/templatesDelete.js";
import { templatesGet } from "../funcs/templatesGet.js";
import { templatesList } from "../funcs/templatesList.js";
import { templatesRender } from "../funcs/templatesRender.js";
import { templatesUpdate } from "../funcs/templatesUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Templates extends ClientSDK {
  /**
   * createTemplate templates
   *
   * @remarks
   * Create a new prompt template.
   */
  async create(
    request: operations.CreateTemplateRequest,
    security?: operations.CreateTemplateSecurity | undefined,
    options?: RequestOptions,
  ): Promise<components.CreatePromptTemplateResult> {
    return unwrapAsync(templatesCreate(
      this,
      request,
      security,
      options,
    ));
  }

  /**
   * deleteTemplate templates
   *
   * @remarks
   * Delete prompt template by its ID or name.
   */
  async delete(
    request?: operations.DeleteTemplateRequest | undefined,
    security?: operations.DeleteTemplateSecurity | undefined,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(templatesDelete(
      this,
      request,
      security,
      options,
    ));
  }

  /**
   * getTemplate templates
   *
   * @remarks
   * Get prompt template by its ID or name.
   */
  async get(
    request?: operations.GetTemplateRequest | undefined,
    security?: operations.GetTemplateSecurity | undefined,
    options?: RequestOptions,
  ): Promise<components.GetPromptTemplateResult> {
    return unwrapAsync(templatesGet(
      this,
      request,
      security,
      options,
    ));
  }

  /**
   * listTemplates templates
   *
   * @remarks
   * List available prompt template.
   */
  async list(
    request?: operations.ListTemplatesRequest | undefined,
    security?: operations.ListTemplatesSecurity | undefined,
    options?: RequestOptions,
  ): Promise<components.ListPromptTemplatesResult> {
    return unwrapAsync(templatesList(
      this,
      request,
      security,
      options,
    ));
  }

  /**
   * renderTemplate templates
   *
   * @remarks
   * Render a prompt template given some input data.
   */
  async render(
    request: operations.RenderTemplateRequest,
    security?: operations.RenderTemplateSecurity | undefined,
    options?: RequestOptions,
  ): Promise<components.RenderTemplateResult> {
    return unwrapAsync(templatesRender(
      this,
      request,
      security,
      options,
    ));
  }

  /**
   * updateTemplate templates
   *
   * @remarks
   * Update a prompt template.
   */
  async update(
    request: operations.UpdateTemplateRequest,
    security?: operations.UpdateTemplateSecurity | undefined,
    options?: RequestOptions,
  ): Promise<components.UpdatePromptTemplateResult> {
    return unwrapAsync(templatesUpdate(
      this,
      request,
      security,
      options,
    ));
  }
}
