/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { deploymentsDeploymentsNumberAddOpenAPIv3Source } from "../funcs/deploymentsDeploymentsNumberAddOpenAPIv3Source.js";
import { deploymentsDeploymentsNumberCreateDeployment } from "../funcs/deploymentsDeploymentsNumberCreateDeployment.js";
import { deploymentsDeploymentsNumberGetDeployment } from "../funcs/deploymentsDeploymentsNumberGetDeployment.js";
import { deploymentsDeploymentsNumberListDeployments } from "../funcs/deploymentsDeploymentsNumberListDeployments.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Deployments extends ClientSDK {
  /**
   * addOpenAPIv3Source deployments
   *
   * @remarks
   * Create a new deployment with an additional OpenAPI 3.x document.
   */
  async deploymentsNumberAddOpenAPIv3Source(
    request: operations.DeploymentsNumberAddOpenAPIv3SourceRequest,
    options?: RequestOptions,
  ): Promise<components.AddOpenAPIv3SourceResult> {
    return unwrapAsync(deploymentsDeploymentsNumberAddOpenAPIv3Source(
      this,
      request,
      options,
    ));
  }

  /**
   * createDeployment deployments
   *
   * @remarks
   * Create a deployment to load tool definitions.
   */
  async deploymentsNumberCreateDeployment(
    request: operations.DeploymentsNumberCreateDeploymentRequest,
    options?: RequestOptions,
  ): Promise<components.CreateDeploymentResult> {
    return unwrapAsync(deploymentsDeploymentsNumberCreateDeployment(
      this,
      request,
      options,
    ));
  }

  /**
   * getDeployment deployments
   *
   * @remarks
   * Create a deployment to load tool definitions.
   */
  async deploymentsNumberGetDeployment(
    request: operations.DeploymentsNumberGetDeploymentRequest,
    options?: RequestOptions,
  ): Promise<components.GetDeploymentResult> {
    return unwrapAsync(deploymentsDeploymentsNumberGetDeployment(
      this,
      request,
      options,
    ));
  }

  /**
   * listDeployments deployments
   *
   * @remarks
   * List all deployments in descending order of creation.
   */
  async deploymentsNumberListDeployments(
    request?: operations.DeploymentsNumberListDeploymentsRequest | undefined,
    options?: RequestOptions,
  ): Promise<components.ListDeploymentResult> {
    return unwrapAsync(deploymentsDeploymentsNumberListDeployments(
      this,
      request,
      options,
    ));
  }
}
