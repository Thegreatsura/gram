/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { deploymentsAddOpenAPIv3Source } from "../funcs/deploymentsAddOpenAPIv3Source.js";
import { deploymentsCreate } from "../funcs/deploymentsCreate.js";
import { deploymentsGetById } from "../funcs/deploymentsGetById.js";
import { deploymentsList } from "../funcs/deploymentsList.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Deployments extends ClientSDK {
  /**
   * addOpenAPIv3Source deployments
   *
   * @remarks
   * Create a new deployment with an additional OpenAPI 3.x document.
   */
  async addOpenAPIv3Source(
    request: operations.AddOpenAPIv3ToDeploymentRequest,
    options?: RequestOptions,
  ): Promise<components.AddOpenAPIv3SourceResult> {
    return unwrapAsync(deploymentsAddOpenAPIv3Source(
      this,
      request,
      options,
    ));
  }

  /**
   * createDeployment deployments
   *
   * @remarks
   * Create a deployment to load tool definitions.
   */
  async create(
    request: operations.CreateDeploymentRequest,
    options?: RequestOptions,
  ): Promise<components.CreateDeploymentResult> {
    return unwrapAsync(deploymentsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * getDeployment deployments
   *
   * @remarks
   * Create a deployment to load tool definitions.
   */
  async getById(
    request: operations.GetDeploymentRequest,
    options?: RequestOptions,
  ): Promise<components.GetDeploymentResult> {
    return unwrapAsync(deploymentsGetById(
      this,
      request,
      options,
    ));
  }

  /**
   * listDeployments deployments
   *
   * @remarks
   * List all deployments in descending order of creation.
   */
  async list(
    request?: operations.ListDeploymentsRequest | undefined,
    options?: RequestOptions,
  ): Promise<components.ListDeploymentResult> {
    return unwrapAsync(deploymentsList(
      this,
      request,
      options,
    ));
  }
}
