/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Toolset = {
  /**
   * When the toolset was created
   */
  createdAt: string;
  /**
   * Description of the toolset
   */
  description?: string | undefined;
  /**
   * List of HTTP tool IDs included in this toolset
   */
  httpToolIds?: Array<string> | undefined;
  /**
   * The ID of the toolset
   */
  id: string;
  /**
   * The name of the toolset
   */
  name: string;
  /**
   * The organization ID this toolset belongs to
   */
  organizationId: string;
  /**
   * The project ID this toolset belongs to
   */
  projectId: string;
  /**
   * When the toolset was last updated
   */
  updatedAt: string;
};

/** @internal */
export const Toolset$inboundSchema: z.ZodType<Toolset, z.ZodTypeDef, unknown> =
  z.object({
    created_at: z.string(),
    description: z.string().optional(),
    http_tool_ids: z.array(z.string()).optional(),
    id: z.string(),
    name: z.string(),
    organization_id: z.string(),
    project_id: z.string(),
    updated_at: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "created_at": "createdAt",
      "http_tool_ids": "httpToolIds",
      "organization_id": "organizationId",
      "project_id": "projectId",
      "updated_at": "updatedAt",
    });
  });

/** @internal */
export type Toolset$Outbound = {
  created_at: string;
  description?: string | undefined;
  http_tool_ids?: Array<string> | undefined;
  id: string;
  name: string;
  organization_id: string;
  project_id: string;
  updated_at: string;
};

/** @internal */
export const Toolset$outboundSchema: z.ZodType<
  Toolset$Outbound,
  z.ZodTypeDef,
  Toolset
> = z.object({
  createdAt: z.string(),
  description: z.string().optional(),
  httpToolIds: z.array(z.string()).optional(),
  id: z.string(),
  name: z.string(),
  organizationId: z.string(),
  projectId: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    httpToolIds: "http_tool_ids",
    organizationId: "organization_id",
    projectId: "project_id",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Toolset$ {
  /** @deprecated use `Toolset$inboundSchema` instead. */
  export const inboundSchema = Toolset$inboundSchema;
  /** @deprecated use `Toolset$outboundSchema` instead. */
  export const outboundSchema = Toolset$outboundSchema;
  /** @deprecated use `Toolset$Outbound` instead. */
  export type Outbound = Toolset$Outbound;
}

export function toolsetToJSON(toolset: Toolset): string {
  return JSON.stringify(Toolset$outboundSchema.parse(toolset));
}

export function toolsetFromJSON(
  jsonString: string,
): SafeParseResult<Toolset, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Toolset$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Toolset' from JSON`,
  );
}
