/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The template engine
 */
export const PromptTemplateEngine = {
  Mustache: "mustache",
} as const;
/**
 * The template engine
 */
export type PromptTemplateEngine = ClosedEnum<typeof PromptTemplateEngine>;

/**
 * The kind of prompt the template is used for
 */
export const PromptTemplateKind = {
  Prompt: "prompt",
  HigherOrderTool: "higher_order_tool",
} as const;
/**
 * The kind of prompt the template is used for
 */
export type PromptTemplateKind = ClosedEnum<typeof PromptTemplateKind>;

export type PromptTemplate = {
  /**
   * The JSON Schema defining the placeholders found in the prompt template
   */
  arguments?: string | undefined;
  /**
   * The creation date of the prompt template.
   */
  createdAt: Date;
  /**
   * The description of the prompt template
   */
  description?: string | undefined;
  /**
   * The template engine
   */
  engine: PromptTemplateEngine;
  /**
   * The revision tree ID for the prompt template
   */
  historyId: string;
  /**
   * The ID of the prompt template
   */
  id: string;
  /**
   * The kind of prompt the template is used for
   */
  kind: PromptTemplateKind;
  /**
   * A short url-friendly label that uniquely identifies a resource.
   */
  name: string;
  /**
   * The previous version of the prompt template to use as predecessor
   */
  predecessorId?: string | undefined;
  /**
   * The template content
   */
  prompt: string;
  /**
   * The suggested tool names associated with the prompt template
   */
  toolsHint: Array<string>;
  /**
   * The last update date of the prompt template.
   */
  updatedAt: Date;
};

/** @internal */
export const PromptTemplateEngine$inboundSchema: z.ZodNativeEnum<
  typeof PromptTemplateEngine
> = z.nativeEnum(PromptTemplateEngine);

/** @internal */
export const PromptTemplateEngine$outboundSchema: z.ZodNativeEnum<
  typeof PromptTemplateEngine
> = PromptTemplateEngine$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PromptTemplateEngine$ {
  /** @deprecated use `PromptTemplateEngine$inboundSchema` instead. */
  export const inboundSchema = PromptTemplateEngine$inboundSchema;
  /** @deprecated use `PromptTemplateEngine$outboundSchema` instead. */
  export const outboundSchema = PromptTemplateEngine$outboundSchema;
}

/** @internal */
export const PromptTemplateKind$inboundSchema: z.ZodNativeEnum<
  typeof PromptTemplateKind
> = z.nativeEnum(PromptTemplateKind);

/** @internal */
export const PromptTemplateKind$outboundSchema: z.ZodNativeEnum<
  typeof PromptTemplateKind
> = PromptTemplateKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PromptTemplateKind$ {
  /** @deprecated use `PromptTemplateKind$inboundSchema` instead. */
  export const inboundSchema = PromptTemplateKind$inboundSchema;
  /** @deprecated use `PromptTemplateKind$outboundSchema` instead. */
  export const outboundSchema = PromptTemplateKind$outboundSchema;
}

/** @internal */
export const PromptTemplate$inboundSchema: z.ZodType<
  PromptTemplate,
  z.ZodTypeDef,
  unknown
> = z.object({
  arguments: z.string().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  description: z.string().optional(),
  engine: PromptTemplateEngine$inboundSchema,
  history_id: z.string(),
  id: z.string(),
  kind: PromptTemplateKind$inboundSchema,
  name: z.string(),
  predecessor_id: z.string().optional(),
  prompt: z.string(),
  tools_hint: z.array(z.string()),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "history_id": "historyId",
    "predecessor_id": "predecessorId",
    "tools_hint": "toolsHint",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type PromptTemplate$Outbound = {
  arguments?: string | undefined;
  created_at: string;
  description?: string | undefined;
  engine: string;
  history_id: string;
  id: string;
  kind: string;
  name: string;
  predecessor_id?: string | undefined;
  prompt: string;
  tools_hint: Array<string>;
  updated_at: string;
};

/** @internal */
export const PromptTemplate$outboundSchema: z.ZodType<
  PromptTemplate$Outbound,
  z.ZodTypeDef,
  PromptTemplate
> = z.object({
  arguments: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()),
  description: z.string().optional(),
  engine: PromptTemplateEngine$outboundSchema,
  historyId: z.string(),
  id: z.string(),
  kind: PromptTemplateKind$outboundSchema,
  name: z.string(),
  predecessorId: z.string().optional(),
  prompt: z.string(),
  toolsHint: z.array(z.string()),
  updatedAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    historyId: "history_id",
    predecessorId: "predecessor_id",
    toolsHint: "tools_hint",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PromptTemplate$ {
  /** @deprecated use `PromptTemplate$inboundSchema` instead. */
  export const inboundSchema = PromptTemplate$inboundSchema;
  /** @deprecated use `PromptTemplate$outboundSchema` instead. */
  export const outboundSchema = PromptTemplate$outboundSchema;
  /** @deprecated use `PromptTemplate$Outbound` instead. */
  export type Outbound = PromptTemplate$Outbound;
}

export function promptTemplateToJSON(promptTemplate: PromptTemplate): string {
  return JSON.stringify(PromptTemplate$outboundSchema.parse(promptTemplate));
}

export function promptTemplateFromJSON(
  jsonString: string,
): SafeParseResult<PromptTemplate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PromptTemplate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PromptTemplate' from JSON`,
  );
}
