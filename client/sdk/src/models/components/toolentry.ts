/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ToolEntry = {
  /**
   * The creation date of the tool.
   */
  createdAt: Date;
  /**
   * The deployment ID
   */
  deploymentId: string;
  /**
   * The tool description
   */
  description: string;
  /**
   * The HTTP method
   */
  httpMethod: string;
  /**
   * The tool ID
   */
  id: string;
  /**
   * The tool name
   */
  name: string;
  /**
   * The OpenAPI v3 document ID
   */
  openapiv3DocumentId: string;
  /**
   * The package name
   */
  packageName?: string | undefined;
  /**
   * The path
   */
  path: string;
  /**
   * The tool summary
   */
  summary: string;
};

/** @internal */
export const ToolEntry$inboundSchema: z.ZodType<
  ToolEntry,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  deploymentId: z.string(),
  description: z.string(),
  httpMethod: z.string(),
  id: z.string(),
  name: z.string(),
  openapiv3DocumentId: z.string(),
  packageName: z.string().optional(),
  path: z.string(),
  summary: z.string(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
  });
});

/** @internal */
export type ToolEntry$Outbound = {
  created_at: string;
  deploymentId: string;
  description: string;
  httpMethod: string;
  id: string;
  name: string;
  openapiv3DocumentId: string;
  packageName?: string | undefined;
  path: string;
  summary: string;
};

/** @internal */
export const ToolEntry$outboundSchema: z.ZodType<
  ToolEntry$Outbound,
  z.ZodTypeDef,
  ToolEntry
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  deploymentId: z.string(),
  description: z.string(),
  httpMethod: z.string(),
  id: z.string(),
  name: z.string(),
  openapiv3DocumentId: z.string(),
  packageName: z.string().optional(),
  path: z.string(),
  summary: z.string(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolEntry$ {
  /** @deprecated use `ToolEntry$inboundSchema` instead. */
  export const inboundSchema = ToolEntry$inboundSchema;
  /** @deprecated use `ToolEntry$outboundSchema` instead. */
  export const outboundSchema = ToolEntry$outboundSchema;
  /** @deprecated use `ToolEntry$Outbound` instead. */
  export type Outbound = ToolEntry$Outbound;
}

export function toolEntryToJSON(toolEntry: ToolEntry): string {
  return JSON.stringify(ToolEntry$outboundSchema.parse(toolEntry));
}

export function toolEntryFromJSON(
  jsonString: string,
): SafeParseResult<ToolEntry, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolEntry$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolEntry' from JSON`,
  );
}
