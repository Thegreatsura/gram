/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateCompletionRequest = {
  /**
   * The maximum number of tokens to generate.
   */
  maxTokens?: number | undefined;
  /**
   * ID of the model to use.
   */
  model: string;
  /**
   * The prompt to generate completions for.
   */
  prompt: string;
  /**
   * Sampling temperature to use.
   */
  temperature?: number | undefined;
};

/** @internal */
export const CreateCompletionRequest$inboundSchema: z.ZodType<
  CreateCompletionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  max_tokens: z.number().int().default(16),
  model: z.string(),
  prompt: z.string(),
  temperature: z.number().default(1),
}).transform((v) => {
  return remap$(v, {
    "max_tokens": "maxTokens",
  });
});

/** @internal */
export type CreateCompletionRequest$Outbound = {
  max_tokens: number;
  model: string;
  prompt: string;
  temperature: number;
};

/** @internal */
export const CreateCompletionRequest$outboundSchema: z.ZodType<
  CreateCompletionRequest$Outbound,
  z.ZodTypeDef,
  CreateCompletionRequest
> = z.object({
  maxTokens: z.number().int().default(16),
  model: z.string(),
  prompt: z.string(),
  temperature: z.number().default(1),
}).transform((v) => {
  return remap$(v, {
    maxTokens: "max_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCompletionRequest$ {
  /** @deprecated use `CreateCompletionRequest$inboundSchema` instead. */
  export const inboundSchema = CreateCompletionRequest$inboundSchema;
  /** @deprecated use `CreateCompletionRequest$outboundSchema` instead. */
  export const outboundSchema = CreateCompletionRequest$outboundSchema;
  /** @deprecated use `CreateCompletionRequest$Outbound` instead. */
  export type Outbound = CreateCompletionRequest$Outbound;
}

export function createCompletionRequestToJSON(
  createCompletionRequest: CreateCompletionRequest,
): string {
  return JSON.stringify(
    CreateCompletionRequest$outboundSchema.parse(createCompletionRequest),
  );
}

export function createCompletionRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateCompletionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCompletionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCompletionRequest' from JSON`,
  );
}
