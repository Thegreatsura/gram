/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateToolsetForm = {
  /**
   * Description of the toolset
   */
  description?: string | undefined;
  /**
   * List of HTTP tool IDs to include
   */
  httpToolIds?: Array<string> | undefined;
  /**
   * The name of the toolset
   */
  name: string;
  /**
   * The project ID this toolset belongs to
   */
  projectId: string;
};

/** @internal */
export const CreateToolsetForm$inboundSchema: z.ZodType<
  CreateToolsetForm,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  http_tool_ids: z.array(z.string()).optional(),
  name: z.string(),
  project_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "http_tool_ids": "httpToolIds",
    "project_id": "projectId",
  });
});

/** @internal */
export type CreateToolsetForm$Outbound = {
  description?: string | undefined;
  http_tool_ids?: Array<string> | undefined;
  name: string;
  project_id: string;
};

/** @internal */
export const CreateToolsetForm$outboundSchema: z.ZodType<
  CreateToolsetForm$Outbound,
  z.ZodTypeDef,
  CreateToolsetForm
> = z.object({
  description: z.string().optional(),
  httpToolIds: z.array(z.string()).optional(),
  name: z.string(),
  projectId: z.string(),
}).transform((v) => {
  return remap$(v, {
    httpToolIds: "http_tool_ids",
    projectId: "project_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateToolsetForm$ {
  /** @deprecated use `CreateToolsetForm$inboundSchema` instead. */
  export const inboundSchema = CreateToolsetForm$inboundSchema;
  /** @deprecated use `CreateToolsetForm$outboundSchema` instead. */
  export const outboundSchema = CreateToolsetForm$outboundSchema;
  /** @deprecated use `CreateToolsetForm$Outbound` instead. */
  export type Outbound = CreateToolsetForm$Outbound;
}

export function createToolsetFormToJSON(
  createToolsetForm: CreateToolsetForm,
): string {
  return JSON.stringify(
    CreateToolsetForm$outboundSchema.parse(createToolsetForm),
  );
}

export function createToolsetFormFromJSON(
  jsonString: string,
): SafeParseResult<CreateToolsetForm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateToolsetForm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateToolsetForm' from JSON`,
  );
}
