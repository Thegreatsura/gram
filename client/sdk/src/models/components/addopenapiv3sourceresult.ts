/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Deployment,
  Deployment$inboundSchema,
  Deployment$Outbound,
  Deployment$outboundSchema,
} from "./deployment.js";

export type AddOpenAPIv3SourceResult = {
  deployment?: Deployment | undefined;
};

/** @internal */
export const AddOpenAPIv3SourceResult$inboundSchema: z.ZodType<
  AddOpenAPIv3SourceResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  deployment: Deployment$inboundSchema.optional(),
});

/** @internal */
export type AddOpenAPIv3SourceResult$Outbound = {
  deployment?: Deployment$Outbound | undefined;
};

/** @internal */
export const AddOpenAPIv3SourceResult$outboundSchema: z.ZodType<
  AddOpenAPIv3SourceResult$Outbound,
  z.ZodTypeDef,
  AddOpenAPIv3SourceResult
> = z.object({
  deployment: Deployment$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddOpenAPIv3SourceResult$ {
  /** @deprecated use `AddOpenAPIv3SourceResult$inboundSchema` instead. */
  export const inboundSchema = AddOpenAPIv3SourceResult$inboundSchema;
  /** @deprecated use `AddOpenAPIv3SourceResult$outboundSchema` instead. */
  export const outboundSchema = AddOpenAPIv3SourceResult$outboundSchema;
  /** @deprecated use `AddOpenAPIv3SourceResult$Outbound` instead. */
  export type Outbound = AddOpenAPIv3SourceResult$Outbound;
}

export function addOpenAPIv3SourceResultToJSON(
  addOpenAPIv3SourceResult: AddOpenAPIv3SourceResult,
): string {
  return JSON.stringify(
    AddOpenAPIv3SourceResult$outboundSchema.parse(addOpenAPIv3SourceResult),
  );
}

export function addOpenAPIv3SourceResultFromJSON(
  jsonString: string,
): SafeParseResult<AddOpenAPIv3SourceResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddOpenAPIv3SourceResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddOpenAPIv3SourceResult' from JSON`,
  );
}
