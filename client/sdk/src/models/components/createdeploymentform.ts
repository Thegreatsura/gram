/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateDeploymentForm = {
  /**
   * The external ID to refer to the deployment. This can be a git commit hash for example.
   */
  externalId?: string | undefined;
  /**
   * The upstream URL a deployment can refer to. This can be a github url to a commit hash or pull request.
   */
  externalUrl?: string | undefined;
  /**
   * The github repository in the form of "owner/repo".
   */
  githubRepo?: string | undefined;
  /**
   * The commit hash that triggered the deployment.
   */
  githubSha?: string | undefined;
  /**
   * A unique identifier that will mitigate against duplicate deployments.
   */
  idempotencyKey: string;
  /**
   * The IDs, as returned from the assets upload service, to uploaded OpenAPI 3.x documents whose operations will become tool definitions.
   */
  openapiv3AssetIds?: Array<string> | undefined;
};

/** @internal */
export const CreateDeploymentForm$inboundSchema: z.ZodType<
  CreateDeploymentForm,
  z.ZodTypeDef,
  unknown
> = z.object({
  external_id: z.string().optional(),
  external_url: z.string().optional(),
  github_repo: z.string().optional(),
  github_sha: z.string().optional(),
  idempotency_key: z.string(),
  openapiv3_asset_ids: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "external_id": "externalId",
    "external_url": "externalUrl",
    "github_repo": "githubRepo",
    "github_sha": "githubSha",
    "idempotency_key": "idempotencyKey",
    "openapiv3_asset_ids": "openapiv3AssetIds",
  });
});

/** @internal */
export type CreateDeploymentForm$Outbound = {
  external_id?: string | undefined;
  external_url?: string | undefined;
  github_repo?: string | undefined;
  github_sha?: string | undefined;
  idempotency_key: string;
  openapiv3_asset_ids?: Array<string> | undefined;
};

/** @internal */
export const CreateDeploymentForm$outboundSchema: z.ZodType<
  CreateDeploymentForm$Outbound,
  z.ZodTypeDef,
  CreateDeploymentForm
> = z.object({
  externalId: z.string().optional(),
  externalUrl: z.string().optional(),
  githubRepo: z.string().optional(),
  githubSha: z.string().optional(),
  idempotencyKey: z.string(),
  openapiv3AssetIds: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    externalId: "external_id",
    externalUrl: "external_url",
    githubRepo: "github_repo",
    githubSha: "github_sha",
    idempotencyKey: "idempotency_key",
    openapiv3AssetIds: "openapiv3_asset_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDeploymentForm$ {
  /** @deprecated use `CreateDeploymentForm$inboundSchema` instead. */
  export const inboundSchema = CreateDeploymentForm$inboundSchema;
  /** @deprecated use `CreateDeploymentForm$outboundSchema` instead. */
  export const outboundSchema = CreateDeploymentForm$outboundSchema;
  /** @deprecated use `CreateDeploymentForm$Outbound` instead. */
  export type Outbound = CreateDeploymentForm$Outbound;
}

export function createDeploymentFormToJSON(
  createDeploymentForm: CreateDeploymentForm,
): string {
  return JSON.stringify(
    CreateDeploymentForm$outboundSchema.parse(createDeploymentForm),
  );
}

export function createDeploymentFormFromJSON(
  jsonString: string,
): SafeParseResult<CreateDeploymentForm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDeploymentForm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDeploymentForm' from JSON`,
  );
}
