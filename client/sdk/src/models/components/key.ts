/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Key = {
  /**
   * The creation date of the key.
   */
  createdAt: Date;
  /**
   * The ID of the user who created this key
   */
  createdByUserId: string;
  /**
   * The ID of the key
   */
  id: string;
  /**
   * The name of the key
   */
  name: string;
  /**
   * The organization ID this key belongs to
   */
  organizationId: string;
  /**
   * The optional project ID this key is scoped to
   */
  projectId?: string | undefined;
  /**
   * List of permission scopes for this key
   */
  scopes: Array<string>;
  /**
   * The API token value
   */
  token: string;
  /**
   * When the key was last updated.
   */
  updatedAt: Date;
};

/** @internal */
export const Key$inboundSchema: z.ZodType<Key, z.ZodTypeDef, unknown> = z
  .object({
    created_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    created_by_user_id: z.string(),
    id: z.string(),
    name: z.string(),
    organization_id: z.string(),
    project_id: z.string().optional(),
    scopes: z.array(z.string()),
    token: z.string(),
    updated_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
  }).transform((v) => {
    return remap$(v, {
      "created_at": "createdAt",
      "created_by_user_id": "createdByUserId",
      "organization_id": "organizationId",
      "project_id": "projectId",
      "updated_at": "updatedAt",
    });
  });

/** @internal */
export type Key$Outbound = {
  created_at: string;
  created_by_user_id: string;
  id: string;
  name: string;
  organization_id: string;
  project_id?: string | undefined;
  scopes: Array<string>;
  token: string;
  updated_at: string;
};

/** @internal */
export const Key$outboundSchema: z.ZodType<Key$Outbound, z.ZodTypeDef, Key> = z
  .object({
    createdAt: z.date().transform(v => v.toISOString()),
    createdByUserId: z.string(),
    id: z.string(),
    name: z.string(),
    organizationId: z.string(),
    projectId: z.string().optional(),
    scopes: z.array(z.string()),
    token: z.string(),
    updatedAt: z.date().transform(v => v.toISOString()),
  }).transform((v) => {
    return remap$(v, {
      createdAt: "created_at",
      createdByUserId: "created_by_user_id",
      organizationId: "organization_id",
      projectId: "project_id",
      updatedAt: "updated_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Key$ {
  /** @deprecated use `Key$inboundSchema` instead. */
  export const inboundSchema = Key$inboundSchema;
  /** @deprecated use `Key$outboundSchema` instead. */
  export const outboundSchema = Key$outboundSchema;
  /** @deprecated use `Key$Outbound` instead. */
  export type Outbound = Key$Outbound;
}

export function keyToJSON(key: Key): string {
  return JSON.stringify(Key$outboundSchema.parse(key));
}

export function keyFromJSON(
  jsonString: string,
): SafeParseResult<Key, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Key$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Key' from JSON`,
  );
}
