/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AddOpenAPIv3DeploymentAssetForm,
  AddOpenAPIv3DeploymentAssetForm$inboundSchema,
  AddOpenAPIv3DeploymentAssetForm$Outbound,
  AddOpenAPIv3DeploymentAssetForm$outboundSchema,
} from "./addopenapiv3deploymentassetform.js";
import {
  AddPackageForm,
  AddPackageForm$inboundSchema,
  AddPackageForm$Outbound,
  AddPackageForm$outboundSchema,
} from "./addpackageform.js";

export type EvolveForm = {
  /**
   * The OpenAPI 3.x documents to add to the new deployment.
   */
  addOpenapiv3Assets?: Array<AddOpenAPIv3DeploymentAssetForm> | undefined;
  /**
   * The OpenAPI 3.x documents to add to the deployment.
   */
  addPackages?: Array<AddPackageForm> | undefined;
  /**
   * The ID of the deployment to evolve. If omitted, the latest deployment will be used.
   */
  deploymentId?: string | undefined;
};

/** @internal */
export const EvolveForm$inboundSchema: z.ZodType<
  EvolveForm,
  z.ZodTypeDef,
  unknown
> = z.object({
  add_openapiv3_assets: z.array(AddOpenAPIv3DeploymentAssetForm$inboundSchema)
    .optional(),
  add_packages: z.array(AddPackageForm$inboundSchema).optional(),
  deployment_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "add_openapiv3_assets": "addOpenapiv3Assets",
    "add_packages": "addPackages",
    "deployment_id": "deploymentId",
  });
});

/** @internal */
export type EvolveForm$Outbound = {
  add_openapiv3_assets?:
    | Array<AddOpenAPIv3DeploymentAssetForm$Outbound>
    | undefined;
  add_packages?: Array<AddPackageForm$Outbound> | undefined;
  deployment_id?: string | undefined;
};

/** @internal */
export const EvolveForm$outboundSchema: z.ZodType<
  EvolveForm$Outbound,
  z.ZodTypeDef,
  EvolveForm
> = z.object({
  addOpenapiv3Assets: z.array(AddOpenAPIv3DeploymentAssetForm$outboundSchema)
    .optional(),
  addPackages: z.array(AddPackageForm$outboundSchema).optional(),
  deploymentId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    addOpenapiv3Assets: "add_openapiv3_assets",
    addPackages: "add_packages",
    deploymentId: "deployment_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvolveForm$ {
  /** @deprecated use `EvolveForm$inboundSchema` instead. */
  export const inboundSchema = EvolveForm$inboundSchema;
  /** @deprecated use `EvolveForm$outboundSchema` instead. */
  export const outboundSchema = EvolveForm$outboundSchema;
  /** @deprecated use `EvolveForm$Outbound` instead. */
  export type Outbound = EvolveForm$Outbound;
}

export function evolveFormToJSON(evolveForm: EvolveForm): string {
  return JSON.stringify(EvolveForm$outboundSchema.parse(evolveForm));
}

export function evolveFormFromJSON(
  jsonString: string,
): SafeParseResult<EvolveForm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvolveForm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvolveForm' from JSON`,
  );
}
