/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type HTTPToolDefinition = {
  /**
   * Environment variable for API key
   */
  apikeyEnvVar?: string | undefined;
  /**
   * Environment variable for bearer token
   */
  bearerEnvVar?: string | undefined;
  /**
   * JSON schema for request body
   */
  bodySchema?: string | undefined;
  /**
   * The creation date of the tool.
   */
  createdAt: Date;
  /**
   * Description of the tool
   */
  description: string;
  /**
   * JSON schema for headers
   */
  headersSchema?: string | undefined;
  /**
   * HTTP method for the request
   */
  httpMethod: string;
  /**
   * The ID of the HTTP tool
   */
  id: string;
  /**
   * The name of the tool
   */
  name: string;
  /**
   * Environment variable for password
   */
  passwordEnvVar?: string | undefined;
  /**
   * Path for the request
   */
  path: string;
  /**
   * JSON schema for path parameters
   */
  pathparamsSchema?: string | undefined;
  /**
   * JSON schema for query parameters
   */
  queriesSchema?: string | undefined;
  /**
   * Type of security (http:bearer, http:basic, apikey)
   */
  securityType: string;
  /**
   * Environment variable for the server URL
   */
  serverEnvVar: string;
  /**
   * The tags list for this http tool
   */
  tags: Array<string>;
  /**
   * The last update date of the tool.
   */
  updatedAt: Date;
  /**
   * Environment variable for username
   */
  usernameEnvVar?: string | undefined;
};

/** @internal */
export const HTTPToolDefinition$inboundSchema: z.ZodType<
  HTTPToolDefinition,
  z.ZodTypeDef,
  unknown
> = z.object({
  apikey_env_var: z.string().optional(),
  bearer_env_var: z.string().optional(),
  body_schema: z.string().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  description: z.string(),
  headers_schema: z.string().optional(),
  http_method: z.string(),
  id: z.string(),
  name: z.string(),
  password_env_var: z.string().optional(),
  path: z.string(),
  pathparams_schema: z.string().optional(),
  queries_schema: z.string().optional(),
  security_type: z.string(),
  server_env_var: z.string(),
  tags: z.array(z.string()),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  username_env_var: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "apikey_env_var": "apikeyEnvVar",
    "bearer_env_var": "bearerEnvVar",
    "body_schema": "bodySchema",
    "created_at": "createdAt",
    "headers_schema": "headersSchema",
    "http_method": "httpMethod",
    "password_env_var": "passwordEnvVar",
    "pathparams_schema": "pathparamsSchema",
    "queries_schema": "queriesSchema",
    "security_type": "securityType",
    "server_env_var": "serverEnvVar",
    "updated_at": "updatedAt",
    "username_env_var": "usernameEnvVar",
  });
});

/** @internal */
export type HTTPToolDefinition$Outbound = {
  apikey_env_var?: string | undefined;
  bearer_env_var?: string | undefined;
  body_schema?: string | undefined;
  created_at: string;
  description: string;
  headers_schema?: string | undefined;
  http_method: string;
  id: string;
  name: string;
  password_env_var?: string | undefined;
  path: string;
  pathparams_schema?: string | undefined;
  queries_schema?: string | undefined;
  security_type: string;
  server_env_var: string;
  tags: Array<string>;
  updated_at: string;
  username_env_var?: string | undefined;
};

/** @internal */
export const HTTPToolDefinition$outboundSchema: z.ZodType<
  HTTPToolDefinition$Outbound,
  z.ZodTypeDef,
  HTTPToolDefinition
> = z.object({
  apikeyEnvVar: z.string().optional(),
  bearerEnvVar: z.string().optional(),
  bodySchema: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()),
  description: z.string(),
  headersSchema: z.string().optional(),
  httpMethod: z.string(),
  id: z.string(),
  name: z.string(),
  passwordEnvVar: z.string().optional(),
  path: z.string(),
  pathparamsSchema: z.string().optional(),
  queriesSchema: z.string().optional(),
  securityType: z.string(),
  serverEnvVar: z.string(),
  tags: z.array(z.string()),
  updatedAt: z.date().transform(v => v.toISOString()),
  usernameEnvVar: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    apikeyEnvVar: "apikey_env_var",
    bearerEnvVar: "bearer_env_var",
    bodySchema: "body_schema",
    createdAt: "created_at",
    headersSchema: "headers_schema",
    httpMethod: "http_method",
    passwordEnvVar: "password_env_var",
    pathparamsSchema: "pathparams_schema",
    queriesSchema: "queries_schema",
    securityType: "security_type",
    serverEnvVar: "server_env_var",
    updatedAt: "updated_at",
    usernameEnvVar: "username_env_var",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HTTPToolDefinition$ {
  /** @deprecated use `HTTPToolDefinition$inboundSchema` instead. */
  export const inboundSchema = HTTPToolDefinition$inboundSchema;
  /** @deprecated use `HTTPToolDefinition$outboundSchema` instead. */
  export const outboundSchema = HTTPToolDefinition$outboundSchema;
  /** @deprecated use `HTTPToolDefinition$Outbound` instead. */
  export type Outbound = HTTPToolDefinition$Outbound;
}

export function httpToolDefinitionToJSON(
  httpToolDefinition: HTTPToolDefinition,
): string {
  return JSON.stringify(
    HTTPToolDefinition$outboundSchema.parse(httpToolDefinition),
  );
}

export function httpToolDefinitionFromJSON(
  jsonString: string,
): SafeParseResult<HTTPToolDefinition, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HTTPToolDefinition$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HTTPToolDefinition' from JSON`,
  );
}
