/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Project,
  Project$inboundSchema,
  Project$Outbound,
  Project$outboundSchema,
} from "./project.js";

export type Organization = {
  accountType: string;
  organizationId: string;
  organizationName: string;
  organizationSlug: string;
  projects: Array<Project>;
};

/** @internal */
export const Organization$inboundSchema: z.ZodType<
  Organization,
  z.ZodTypeDef,
  unknown
> = z.object({
  account_type: z.string(),
  organization_id: z.string(),
  organization_name: z.string(),
  organization_slug: z.string(),
  projects: z.array(Project$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "account_type": "accountType",
    "organization_id": "organizationId",
    "organization_name": "organizationName",
    "organization_slug": "organizationSlug",
  });
});

/** @internal */
export type Organization$Outbound = {
  account_type: string;
  organization_id: string;
  organization_name: string;
  organization_slug: string;
  projects: Array<Project$Outbound>;
};

/** @internal */
export const Organization$outboundSchema: z.ZodType<
  Organization$Outbound,
  z.ZodTypeDef,
  Organization
> = z.object({
  accountType: z.string(),
  organizationId: z.string(),
  organizationName: z.string(),
  organizationSlug: z.string(),
  projects: z.array(Project$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    accountType: "account_type",
    organizationId: "organization_id",
    organizationName: "organization_name",
    organizationSlug: "organization_slug",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Organization$ {
  /** @deprecated use `Organization$inboundSchema` instead. */
  export const inboundSchema = Organization$inboundSchema;
  /** @deprecated use `Organization$outboundSchema` instead. */
  export const outboundSchema = Organization$outboundSchema;
  /** @deprecated use `Organization$Outbound` instead. */
  export type Outbound = Organization$Outbound;
}

export function organizationToJSON(organization: Organization): string {
  return JSON.stringify(Organization$outboundSchema.parse(organization));
}

export function organizationFromJSON(
  jsonString: string,
): SafeParseResult<Organization, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Organization$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Organization' from JSON`,
  );
}
