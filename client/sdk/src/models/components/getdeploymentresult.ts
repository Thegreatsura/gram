/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetDeploymentResult = {
  /**
   * The creation date of the deployment.
   */
  createdAt: Date;
  /**
   * The external ID to refer to the deployment. This can be a git commit hash for example.
   */
  externalId?: string | undefined;
  /**
   * The upstream URL a deployment can refer to. This can be a github url to a commit hash or pull request.
   */
  externalUrl?: string | undefined;
  /**
   * The github repository in the form of "owner/repo".
   */
  githubRepo?: string | undefined;
  /**
   * The commit hash that triggered the deployment.
   */
  githubSha?: string | undefined;
  /**
   * The ID to of the deployment.
   */
  id: string;
  /**
   * A unique identifier that will mitigate against duplicate deployments.
   */
  idempotencyKey?: string | undefined;
  /**
   * The IDs, as returned from the assets upload service, to uploaded OpenAPI 3.x documents whose operations will become tool definitions.
   */
  openapiv3AssetIds: Array<string>;
  /**
   * The ID of the organization that the deployment belongs to.
   */
  organizationId: string;
  /**
   * The ID of the project that the deployment belongs to.
   */
  projectId: string;
  /**
   * The ID of the user that created the deployment.
   */
  userId: string;
};

/** @internal */
export const GetDeploymentResult$inboundSchema: z.ZodType<
  GetDeploymentResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  external_id: z.string().optional(),
  external_url: z.string().optional(),
  github_repo: z.string().optional(),
  github_sha: z.string().optional(),
  id: z.string(),
  idempotency_key: z.string().optional(),
  openapiv3_asset_ids: z.array(z.string()),
  organization_id: z.string(),
  project_id: z.string(),
  user_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "external_id": "externalId",
    "external_url": "externalUrl",
    "github_repo": "githubRepo",
    "github_sha": "githubSha",
    "idempotency_key": "idempotencyKey",
    "openapiv3_asset_ids": "openapiv3AssetIds",
    "organization_id": "organizationId",
    "project_id": "projectId",
    "user_id": "userId",
  });
});

/** @internal */
export type GetDeploymentResult$Outbound = {
  created_at: string;
  external_id?: string | undefined;
  external_url?: string | undefined;
  github_repo?: string | undefined;
  github_sha?: string | undefined;
  id: string;
  idempotency_key?: string | undefined;
  openapiv3_asset_ids: Array<string>;
  organization_id: string;
  project_id: string;
  user_id: string;
};

/** @internal */
export const GetDeploymentResult$outboundSchema: z.ZodType<
  GetDeploymentResult$Outbound,
  z.ZodTypeDef,
  GetDeploymentResult
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  externalId: z.string().optional(),
  externalUrl: z.string().optional(),
  githubRepo: z.string().optional(),
  githubSha: z.string().optional(),
  id: z.string(),
  idempotencyKey: z.string().optional(),
  openapiv3AssetIds: z.array(z.string()),
  organizationId: z.string(),
  projectId: z.string(),
  userId: z.string(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    externalId: "external_id",
    externalUrl: "external_url",
    githubRepo: "github_repo",
    githubSha: "github_sha",
    idempotencyKey: "idempotency_key",
    openapiv3AssetIds: "openapiv3_asset_ids",
    organizationId: "organization_id",
    projectId: "project_id",
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentResult$ {
  /** @deprecated use `GetDeploymentResult$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentResult$inboundSchema;
  /** @deprecated use `GetDeploymentResult$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentResult$outboundSchema;
  /** @deprecated use `GetDeploymentResult$Outbound` instead. */
  export type Outbound = GetDeploymentResult$Outbound;
}

export function getDeploymentResultToJSON(
  getDeploymentResult: GetDeploymentResult,
): string {
  return JSON.stringify(
    GetDeploymentResult$outboundSchema.parse(getDeploymentResult),
  );
}

export function getDeploymentResultFromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentResult' from JSON`,
  );
}
