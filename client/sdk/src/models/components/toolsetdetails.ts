/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  HTTPToolDefinition,
  HTTPToolDefinition$inboundSchema,
  HTTPToolDefinition$Outbound,
  HTTPToolDefinition$outboundSchema,
} from "./httptooldefinition.js";

export type ToolsetDetails = {
  /**
   * When the toolset was created.
   */
  createdAt: Date;
  /**
   * Description of the toolset
   */
  description?: string | undefined;
  /**
   * The HTTP tools in this toolset
   */
  httpTools: Array<HTTPToolDefinition>;
  /**
   * The ID of the toolset
   */
  id: string;
  /**
   * The name of the toolset
   */
  name: string;
  /**
   * The organization ID this toolset belongs to
   */
  organizationId: string;
  /**
   * The project ID this toolset belongs to
   */
  projectId: string;
  /**
   * The slug of the toolset
   */
  slug: string;
  /**
   * When the toolset was last updated.
   */
  updatedAt: Date;
};

/** @internal */
export const ToolsetDetails$inboundSchema: z.ZodType<
  ToolsetDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  description: z.string().optional(),
  http_tools: z.array(HTTPToolDefinition$inboundSchema),
  id: z.string(),
  name: z.string(),
  organization_id: z.string(),
  project_id: z.string(),
  slug: z.string(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "http_tools": "httpTools",
    "organization_id": "organizationId",
    "project_id": "projectId",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type ToolsetDetails$Outbound = {
  created_at: string;
  description?: string | undefined;
  http_tools: Array<HTTPToolDefinition$Outbound>;
  id: string;
  name: string;
  organization_id: string;
  project_id: string;
  slug: string;
  updated_at: string;
};

/** @internal */
export const ToolsetDetails$outboundSchema: z.ZodType<
  ToolsetDetails$Outbound,
  z.ZodTypeDef,
  ToolsetDetails
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  description: z.string().optional(),
  httpTools: z.array(HTTPToolDefinition$outboundSchema),
  id: z.string(),
  name: z.string(),
  organizationId: z.string(),
  projectId: z.string(),
  slug: z.string(),
  updatedAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    httpTools: "http_tools",
    organizationId: "organization_id",
    projectId: "project_id",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsetDetails$ {
  /** @deprecated use `ToolsetDetails$inboundSchema` instead. */
  export const inboundSchema = ToolsetDetails$inboundSchema;
  /** @deprecated use `ToolsetDetails$outboundSchema` instead. */
  export const outboundSchema = ToolsetDetails$outboundSchema;
  /** @deprecated use `ToolsetDetails$Outbound` instead. */
  export type Outbound = ToolsetDetails$Outbound;
}

export function toolsetDetailsToJSON(toolsetDetails: ToolsetDetails): string {
  return JSON.stringify(ToolsetDetails$outboundSchema.parse(toolsetDetails));
}

export function toolsetDetailsFromJSON(
  jsonString: string,
): SafeParseResult<ToolsetDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolsetDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolsetDetails' from JSON`,
  );
}
