/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AuthNumberSwitchScopesRequest = {
  /**
   * The organization slug to switch scopes
   */
  organizationId?: string | undefined;
  /**
   * The project id to switch scopes too
   */
  projectId?: string | undefined;
  /**
   * Session header
   */
  xGramSession?: string | undefined;
};

export type AuthNumberSwitchScopesResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const AuthNumberSwitchScopesRequest$inboundSchema: z.ZodType<
  AuthNumberSwitchScopesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.string().optional(),
  project_id: z.string().optional(),
  "X-Gram-Session": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
    "project_id": "projectId",
    "X-Gram-Session": "xGramSession",
  });
});

/** @internal */
export type AuthNumberSwitchScopesRequest$Outbound = {
  organization_id?: string | undefined;
  project_id?: string | undefined;
  "X-Gram-Session"?: string | undefined;
};

/** @internal */
export const AuthNumberSwitchScopesRequest$outboundSchema: z.ZodType<
  AuthNumberSwitchScopesRequest$Outbound,
  z.ZodTypeDef,
  AuthNumberSwitchScopesRequest
> = z.object({
  organizationId: z.string().optional(),
  projectId: z.string().optional(),
  xGramSession: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
    projectId: "project_id",
    xGramSession: "X-Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthNumberSwitchScopesRequest$ {
  /** @deprecated use `AuthNumberSwitchScopesRequest$inboundSchema` instead. */
  export const inboundSchema = AuthNumberSwitchScopesRequest$inboundSchema;
  /** @deprecated use `AuthNumberSwitchScopesRequest$outboundSchema` instead. */
  export const outboundSchema = AuthNumberSwitchScopesRequest$outboundSchema;
  /** @deprecated use `AuthNumberSwitchScopesRequest$Outbound` instead. */
  export type Outbound = AuthNumberSwitchScopesRequest$Outbound;
}

export function authNumberSwitchScopesRequestToJSON(
  authNumberSwitchScopesRequest: AuthNumberSwitchScopesRequest,
): string {
  return JSON.stringify(
    AuthNumberSwitchScopesRequest$outboundSchema.parse(
      authNumberSwitchScopesRequest,
    ),
  );
}

export function authNumberSwitchScopesRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthNumberSwitchScopesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthNumberSwitchScopesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthNumberSwitchScopesRequest' from JSON`,
  );
}

/** @internal */
export const AuthNumberSwitchScopesResponse$inboundSchema: z.ZodType<
  AuthNumberSwitchScopesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type AuthNumberSwitchScopesResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const AuthNumberSwitchScopesResponse$outboundSchema: z.ZodType<
  AuthNumberSwitchScopesResponse$Outbound,
  z.ZodTypeDef,
  AuthNumberSwitchScopesResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthNumberSwitchScopesResponse$ {
  /** @deprecated use `AuthNumberSwitchScopesResponse$inboundSchema` instead. */
  export const inboundSchema = AuthNumberSwitchScopesResponse$inboundSchema;
  /** @deprecated use `AuthNumberSwitchScopesResponse$outboundSchema` instead. */
  export const outboundSchema = AuthNumberSwitchScopesResponse$outboundSchema;
  /** @deprecated use `AuthNumberSwitchScopesResponse$Outbound` instead. */
  export type Outbound = AuthNumberSwitchScopesResponse$Outbound;
}

export function authNumberSwitchScopesResponseToJSON(
  authNumberSwitchScopesResponse: AuthNumberSwitchScopesResponse,
): string {
  return JSON.stringify(
    AuthNumberSwitchScopesResponse$outboundSchema.parse(
      authNumberSwitchScopesResponse,
    ),
  );
}

export function authNumberSwitchScopesResponseFromJSON(
  jsonString: string,
): SafeParseResult<AuthNumberSwitchScopesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthNumberSwitchScopesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthNumberSwitchScopesResponse' from JSON`,
  );
}
