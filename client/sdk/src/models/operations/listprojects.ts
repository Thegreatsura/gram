/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListProjectsSecurity = {
  sessionHeaderGramSession: string;
};

export type ListProjectsRequest = {
  /**
   * The ID of the organization to list projects for
   */
  organizationId: string;
  /**
   * Session header
   */
  gramSession?: string | undefined;
};

/** @internal */
export const ListProjectsSecurity$inboundSchema: z.ZodType<
  ListProjectsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  "session_header_Gram-Session": z.string(),
}).transform((v) => {
  return remap$(v, {
    "session_header_Gram-Session": "sessionHeaderGramSession",
  });
});

/** @internal */
export type ListProjectsSecurity$Outbound = {
  "session_header_Gram-Session": string;
};

/** @internal */
export const ListProjectsSecurity$outboundSchema: z.ZodType<
  ListProjectsSecurity$Outbound,
  z.ZodTypeDef,
  ListProjectsSecurity
> = z.object({
  sessionHeaderGramSession: z.string(),
}).transform((v) => {
  return remap$(v, {
    sessionHeaderGramSession: "session_header_Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListProjectsSecurity$ {
  /** @deprecated use `ListProjectsSecurity$inboundSchema` instead. */
  export const inboundSchema = ListProjectsSecurity$inboundSchema;
  /** @deprecated use `ListProjectsSecurity$outboundSchema` instead. */
  export const outboundSchema = ListProjectsSecurity$outboundSchema;
  /** @deprecated use `ListProjectsSecurity$Outbound` instead. */
  export type Outbound = ListProjectsSecurity$Outbound;
}

export function listProjectsSecurityToJSON(
  listProjectsSecurity: ListProjectsSecurity,
): string {
  return JSON.stringify(
    ListProjectsSecurity$outboundSchema.parse(listProjectsSecurity),
  );
}

export function listProjectsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ListProjectsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListProjectsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListProjectsSecurity' from JSON`,
  );
}

/** @internal */
export const ListProjectsRequest$inboundSchema: z.ZodType<
  ListProjectsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.string(),
  "Gram-Session": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
    "Gram-Session": "gramSession",
  });
});

/** @internal */
export type ListProjectsRequest$Outbound = {
  organization_id: string;
  "Gram-Session"?: string | undefined;
};

/** @internal */
export const ListProjectsRequest$outboundSchema: z.ZodType<
  ListProjectsRequest$Outbound,
  z.ZodTypeDef,
  ListProjectsRequest
> = z.object({
  organizationId: z.string(),
  gramSession: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
    gramSession: "Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListProjectsRequest$ {
  /** @deprecated use `ListProjectsRequest$inboundSchema` instead. */
  export const inboundSchema = ListProjectsRequest$inboundSchema;
  /** @deprecated use `ListProjectsRequest$outboundSchema` instead. */
  export const outboundSchema = ListProjectsRequest$outboundSchema;
  /** @deprecated use `ListProjectsRequest$Outbound` instead. */
  export type Outbound = ListProjectsRequest$Outbound;
}

export function listProjectsRequestToJSON(
  listProjectsRequest: ListProjectsRequest,
): string {
  return JSON.stringify(
    ListProjectsRequest$outboundSchema.parse(listProjectsRequest),
  );
}

export function listProjectsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListProjectsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListProjectsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListProjectsRequest' from JSON`,
  );
}
