/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ToolsetsNumberGetToolsetDetailsRequest = {
  /**
   * The ID of the toolset
   */
  id: string;
  /**
   * Session header
   */
  xGramSession?: string | undefined;
};

/** @internal */
export const ToolsetsNumberGetToolsetDetailsRequest$inboundSchema: z.ZodType<
  ToolsetsNumberGetToolsetDetailsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  "X-Gram-Session": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "X-Gram-Session": "xGramSession",
  });
});

/** @internal */
export type ToolsetsNumberGetToolsetDetailsRequest$Outbound = {
  id: string;
  "X-Gram-Session"?: string | undefined;
};

/** @internal */
export const ToolsetsNumberGetToolsetDetailsRequest$outboundSchema: z.ZodType<
  ToolsetsNumberGetToolsetDetailsRequest$Outbound,
  z.ZodTypeDef,
  ToolsetsNumberGetToolsetDetailsRequest
> = z.object({
  id: z.string(),
  xGramSession: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    xGramSession: "X-Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsetsNumberGetToolsetDetailsRequest$ {
  /** @deprecated use `ToolsetsNumberGetToolsetDetailsRequest$inboundSchema` instead. */
  export const inboundSchema =
    ToolsetsNumberGetToolsetDetailsRequest$inboundSchema;
  /** @deprecated use `ToolsetsNumberGetToolsetDetailsRequest$outboundSchema` instead. */
  export const outboundSchema =
    ToolsetsNumberGetToolsetDetailsRequest$outboundSchema;
  /** @deprecated use `ToolsetsNumberGetToolsetDetailsRequest$Outbound` instead. */
  export type Outbound = ToolsetsNumberGetToolsetDetailsRequest$Outbound;
}

export function toolsetsNumberGetToolsetDetailsRequestToJSON(
  toolsetsNumberGetToolsetDetailsRequest:
    ToolsetsNumberGetToolsetDetailsRequest,
): string {
  return JSON.stringify(
    ToolsetsNumberGetToolsetDetailsRequest$outboundSchema.parse(
      toolsetsNumberGetToolsetDetailsRequest,
    ),
  );
}

export function toolsetsNumberGetToolsetDetailsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ToolsetsNumberGetToolsetDetailsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ToolsetsNumberGetToolsetDetailsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolsetsNumberGetToolsetDetailsRequest' from JSON`,
  );
}
