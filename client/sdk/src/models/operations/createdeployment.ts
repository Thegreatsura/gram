/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateDeploymentRequest = {
  /**
   * Session header
   */
  gramSession?: string | undefined;
  /**
   * project header
   */
  gramProject?: string | undefined;
  /**
   * A unique identifier that will mitigate against duplicate deployments.
   */
  idempotencyKey: string;
  createDeploymentRequestBody: components.CreateDeploymentRequestBody;
};

/** @internal */
export const CreateDeploymentRequest$inboundSchema: z.ZodType<
  CreateDeploymentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Gram-Session": z.string().optional(),
  "Gram-Project": z.string().optional(),
  "Idempotency-Key": z.string(),
  CreateDeploymentRequestBody:
    components.CreateDeploymentRequestBody$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Gram-Session": "gramSession",
    "Gram-Project": "gramProject",
    "Idempotency-Key": "idempotencyKey",
    "CreateDeploymentRequestBody": "createDeploymentRequestBody",
  });
});

/** @internal */
export type CreateDeploymentRequest$Outbound = {
  "Gram-Session"?: string | undefined;
  "Gram-Project"?: string | undefined;
  "Idempotency-Key": string;
  CreateDeploymentRequestBody: components.CreateDeploymentRequestBody$Outbound;
};

/** @internal */
export const CreateDeploymentRequest$outboundSchema: z.ZodType<
  CreateDeploymentRequest$Outbound,
  z.ZodTypeDef,
  CreateDeploymentRequest
> = z.object({
  gramSession: z.string().optional(),
  gramProject: z.string().optional(),
  idempotencyKey: z.string(),
  createDeploymentRequestBody:
    components.CreateDeploymentRequestBody$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    gramSession: "Gram-Session",
    gramProject: "Gram-Project",
    idempotencyKey: "Idempotency-Key",
    createDeploymentRequestBody: "CreateDeploymentRequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDeploymentRequest$ {
  /** @deprecated use `CreateDeploymentRequest$inboundSchema` instead. */
  export const inboundSchema = CreateDeploymentRequest$inboundSchema;
  /** @deprecated use `CreateDeploymentRequest$outboundSchema` instead. */
  export const outboundSchema = CreateDeploymentRequest$outboundSchema;
  /** @deprecated use `CreateDeploymentRequest$Outbound` instead. */
  export type Outbound = CreateDeploymentRequest$Outbound;
}

export function createDeploymentRequestToJSON(
  createDeploymentRequest: CreateDeploymentRequest,
): string {
  return JSON.stringify(
    CreateDeploymentRequest$outboundSchema.parse(createDeploymentRequest),
  );
}

export function createDeploymentRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateDeploymentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDeploymentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDeploymentRequest' from JSON`,
  );
}
