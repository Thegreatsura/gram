/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type McpNumberServePublicRequest = {
  /**
   * The unique slug of the mcp server.
   */
  mcpSlug: string;
  /**
   * The environment variables passed by user to MCP server (JSON Structured).
   */
  mcpEnvironment?: string | undefined;
};

export type McpNumberServePublicResponse = {
  headers: { [k: string]: Array<string> };
  result: ReadableStream<Uint8Array>;
};

/** @internal */
export const McpNumberServePublicRequest$inboundSchema: z.ZodType<
  McpNumberServePublicRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  mcpSlug: z.string(),
  "MCP-Environment": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "MCP-Environment": "mcpEnvironment",
  });
});

/** @internal */
export type McpNumberServePublicRequest$Outbound = {
  mcpSlug: string;
  "MCP-Environment"?: string | undefined;
};

/** @internal */
export const McpNumberServePublicRequest$outboundSchema: z.ZodType<
  McpNumberServePublicRequest$Outbound,
  z.ZodTypeDef,
  McpNumberServePublicRequest
> = z.object({
  mcpSlug: z.string(),
  mcpEnvironment: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    mcpEnvironment: "MCP-Environment",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace McpNumberServePublicRequest$ {
  /** @deprecated use `McpNumberServePublicRequest$inboundSchema` instead. */
  export const inboundSchema = McpNumberServePublicRequest$inboundSchema;
  /** @deprecated use `McpNumberServePublicRequest$outboundSchema` instead. */
  export const outboundSchema = McpNumberServePublicRequest$outboundSchema;
  /** @deprecated use `McpNumberServePublicRequest$Outbound` instead. */
  export type Outbound = McpNumberServePublicRequest$Outbound;
}

export function mcpNumberServePublicRequestToJSON(
  mcpNumberServePublicRequest: McpNumberServePublicRequest,
): string {
  return JSON.stringify(
    McpNumberServePublicRequest$outboundSchema.parse(
      mcpNumberServePublicRequest,
    ),
  );
}

export function mcpNumberServePublicRequestFromJSON(
  jsonString: string,
): SafeParseResult<McpNumberServePublicRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => McpNumberServePublicRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'McpNumberServePublicRequest' from JSON`,
  );
}

/** @internal */
export const McpNumberServePublicResponse$inboundSchema: z.ZodType<
  McpNumberServePublicResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.instanceof(ReadableStream<Uint8Array>),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type McpNumberServePublicResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: ReadableStream<Uint8Array>;
};

/** @internal */
export const McpNumberServePublicResponse$outboundSchema: z.ZodType<
  McpNumberServePublicResponse$Outbound,
  z.ZodTypeDef,
  McpNumberServePublicResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.instanceof(ReadableStream<Uint8Array>),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace McpNumberServePublicResponse$ {
  /** @deprecated use `McpNumberServePublicResponse$inboundSchema` instead. */
  export const inboundSchema = McpNumberServePublicResponse$inboundSchema;
  /** @deprecated use `McpNumberServePublicResponse$outboundSchema` instead. */
  export const outboundSchema = McpNumberServePublicResponse$outboundSchema;
  /** @deprecated use `McpNumberServePublicResponse$Outbound` instead. */
  export type Outbound = McpNumberServePublicResponse$Outbound;
}

export function mcpNumberServePublicResponseToJSON(
  mcpNumberServePublicResponse: McpNumberServePublicResponse,
): string {
  return JSON.stringify(
    McpNumberServePublicResponse$outboundSchema.parse(
      mcpNumberServePublicResponse,
    ),
  );
}

export function mcpNumberServePublicResponseFromJSON(
  jsonString: string,
): SafeParseResult<McpNumberServePublicResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => McpNumberServePublicResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'McpNumberServePublicResponse' from JSON`,
  );
}
