/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PublishRequest = {
  /**
   * Session header
   */
  gramSession?: string | undefined;
  /**
   * project header
   */
  gramProject?: string | undefined;
  publishPackageForm: components.PublishPackageForm;
};

/** @internal */
export const PublishRequest$inboundSchema: z.ZodType<
  PublishRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Gram-Session": z.string().optional(),
  "Gram-Project": z.string().optional(),
  PublishPackageForm: components.PublishPackageForm$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Gram-Session": "gramSession",
    "Gram-Project": "gramProject",
    "PublishPackageForm": "publishPackageForm",
  });
});

/** @internal */
export type PublishRequest$Outbound = {
  "Gram-Session"?: string | undefined;
  "Gram-Project"?: string | undefined;
  PublishPackageForm: components.PublishPackageForm$Outbound;
};

/** @internal */
export const PublishRequest$outboundSchema: z.ZodType<
  PublishRequest$Outbound,
  z.ZodTypeDef,
  PublishRequest
> = z.object({
  gramSession: z.string().optional(),
  gramProject: z.string().optional(),
  publishPackageForm: components.PublishPackageForm$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    gramSession: "Gram-Session",
    gramProject: "Gram-Project",
    publishPackageForm: "PublishPackageForm",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublishRequest$ {
  /** @deprecated use `PublishRequest$inboundSchema` instead. */
  export const inboundSchema = PublishRequest$inboundSchema;
  /** @deprecated use `PublishRequest$outboundSchema` instead. */
  export const outboundSchema = PublishRequest$outboundSchema;
  /** @deprecated use `PublishRequest$Outbound` instead. */
  export type Outbound = PublishRequest$Outbound;
}

export function publishRequestToJSON(publishRequest: PublishRequest): string {
  return JSON.stringify(PublishRequest$outboundSchema.parse(publishRequest));
}

export function publishRequestFromJSON(
  jsonString: string,
): SafeParseResult<PublishRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublishRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublishRequest' from JSON`,
  );
}
