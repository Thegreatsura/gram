/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateEnvironmentRequest = {
  /**
   * The slug of the environment to update
   */
  slug: string;
  /**
   * Session header
   */
  gramSession?: string | undefined;
  /**
   * project header
   */
  gramProject?: string | undefined;
  updateEnvironmentRequestBody: components.UpdateEnvironmentRequestBody;
};

/** @internal */
export const UpdateEnvironmentRequest$inboundSchema: z.ZodType<
  UpdateEnvironmentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  slug: z.string(),
  "Gram-Session": z.string().optional(),
  "Gram-Project": z.string().optional(),
  UpdateEnvironmentRequestBody:
    components.UpdateEnvironmentRequestBody$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Gram-Session": "gramSession",
    "Gram-Project": "gramProject",
    "UpdateEnvironmentRequestBody": "updateEnvironmentRequestBody",
  });
});

/** @internal */
export type UpdateEnvironmentRequest$Outbound = {
  slug: string;
  "Gram-Session"?: string | undefined;
  "Gram-Project"?: string | undefined;
  UpdateEnvironmentRequestBody:
    components.UpdateEnvironmentRequestBody$Outbound;
};

/** @internal */
export const UpdateEnvironmentRequest$outboundSchema: z.ZodType<
  UpdateEnvironmentRequest$Outbound,
  z.ZodTypeDef,
  UpdateEnvironmentRequest
> = z.object({
  slug: z.string(),
  gramSession: z.string().optional(),
  gramProject: z.string().optional(),
  updateEnvironmentRequestBody:
    components.UpdateEnvironmentRequestBody$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    gramSession: "Gram-Session",
    gramProject: "Gram-Project",
    updateEnvironmentRequestBody: "UpdateEnvironmentRequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEnvironmentRequest$ {
  /** @deprecated use `UpdateEnvironmentRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateEnvironmentRequest$inboundSchema;
  /** @deprecated use `UpdateEnvironmentRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateEnvironmentRequest$outboundSchema;
  /** @deprecated use `UpdateEnvironmentRequest$Outbound` instead. */
  export type Outbound = UpdateEnvironmentRequest$Outbound;
}

export function updateEnvironmentRequestToJSON(
  updateEnvironmentRequest: UpdateEnvironmentRequest,
): string {
  return JSON.stringify(
    UpdateEnvironmentRequest$outboundSchema.parse(updateEnvironmentRequest),
  );
}

export function updateEnvironmentRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateEnvironmentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateEnvironmentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateEnvironmentRequest' from JSON`,
  );
}
