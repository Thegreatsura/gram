/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AuthNumberLogoutSecurity = {
  sessionHeaderGramSession: string;
};

export type AuthNumberLogoutRequest = {
  /**
   * Session header
   */
  gramSession?: string | undefined;
};

export type AuthNumberLogoutResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const AuthNumberLogoutSecurity$inboundSchema: z.ZodType<
  AuthNumberLogoutSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  "session_header_Gram-Session": z.string(),
}).transform((v) => {
  return remap$(v, {
    "session_header_Gram-Session": "sessionHeaderGramSession",
  });
});

/** @internal */
export type AuthNumberLogoutSecurity$Outbound = {
  "session_header_Gram-Session": string;
};

/** @internal */
export const AuthNumberLogoutSecurity$outboundSchema: z.ZodType<
  AuthNumberLogoutSecurity$Outbound,
  z.ZodTypeDef,
  AuthNumberLogoutSecurity
> = z.object({
  sessionHeaderGramSession: z.string(),
}).transform((v) => {
  return remap$(v, {
    sessionHeaderGramSession: "session_header_Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthNumberLogoutSecurity$ {
  /** @deprecated use `AuthNumberLogoutSecurity$inboundSchema` instead. */
  export const inboundSchema = AuthNumberLogoutSecurity$inboundSchema;
  /** @deprecated use `AuthNumberLogoutSecurity$outboundSchema` instead. */
  export const outboundSchema = AuthNumberLogoutSecurity$outboundSchema;
  /** @deprecated use `AuthNumberLogoutSecurity$Outbound` instead. */
  export type Outbound = AuthNumberLogoutSecurity$Outbound;
}

export function authNumberLogoutSecurityToJSON(
  authNumberLogoutSecurity: AuthNumberLogoutSecurity,
): string {
  return JSON.stringify(
    AuthNumberLogoutSecurity$outboundSchema.parse(authNumberLogoutSecurity),
  );
}

export function authNumberLogoutSecurityFromJSON(
  jsonString: string,
): SafeParseResult<AuthNumberLogoutSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthNumberLogoutSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthNumberLogoutSecurity' from JSON`,
  );
}

/** @internal */
export const AuthNumberLogoutRequest$inboundSchema: z.ZodType<
  AuthNumberLogoutRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Gram-Session": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "Gram-Session": "gramSession",
  });
});

/** @internal */
export type AuthNumberLogoutRequest$Outbound = {
  "Gram-Session"?: string | undefined;
};

/** @internal */
export const AuthNumberLogoutRequest$outboundSchema: z.ZodType<
  AuthNumberLogoutRequest$Outbound,
  z.ZodTypeDef,
  AuthNumberLogoutRequest
> = z.object({
  gramSession: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    gramSession: "Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthNumberLogoutRequest$ {
  /** @deprecated use `AuthNumberLogoutRequest$inboundSchema` instead. */
  export const inboundSchema = AuthNumberLogoutRequest$inboundSchema;
  /** @deprecated use `AuthNumberLogoutRequest$outboundSchema` instead. */
  export const outboundSchema = AuthNumberLogoutRequest$outboundSchema;
  /** @deprecated use `AuthNumberLogoutRequest$Outbound` instead. */
  export type Outbound = AuthNumberLogoutRequest$Outbound;
}

export function authNumberLogoutRequestToJSON(
  authNumberLogoutRequest: AuthNumberLogoutRequest,
): string {
  return JSON.stringify(
    AuthNumberLogoutRequest$outboundSchema.parse(authNumberLogoutRequest),
  );
}

export function authNumberLogoutRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthNumberLogoutRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthNumberLogoutRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthNumberLogoutRequest' from JSON`,
  );
}

/** @internal */
export const AuthNumberLogoutResponse$inboundSchema: z.ZodType<
  AuthNumberLogoutResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type AuthNumberLogoutResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const AuthNumberLogoutResponse$outboundSchema: z.ZodType<
  AuthNumberLogoutResponse$Outbound,
  z.ZodTypeDef,
  AuthNumberLogoutResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthNumberLogoutResponse$ {
  /** @deprecated use `AuthNumberLogoutResponse$inboundSchema` instead. */
  export const inboundSchema = AuthNumberLogoutResponse$inboundSchema;
  /** @deprecated use `AuthNumberLogoutResponse$outboundSchema` instead. */
  export const outboundSchema = AuthNumberLogoutResponse$outboundSchema;
  /** @deprecated use `AuthNumberLogoutResponse$Outbound` instead. */
  export type Outbound = AuthNumberLogoutResponse$Outbound;
}

export function authNumberLogoutResponseToJSON(
  authNumberLogoutResponse: AuthNumberLogoutResponse,
): string {
  return JSON.stringify(
    AuthNumberLogoutResponse$outboundSchema.parse(authNumberLogoutResponse),
  );
}

export function authNumberLogoutResponseFromJSON(
  jsonString: string,
): SafeParseResult<AuthNumberLogoutResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthNumberLogoutResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthNumberLogoutResponse' from JSON`,
  );
}
