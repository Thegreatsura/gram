/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ToolsNumberListToolsRequest = {
  /**
   * The cursor to fetch results from
   */
  cursor?: string | undefined;
  /**
   * Session header
   */
  gramSession?: string | undefined;
  /**
   * project header
   */
  gramProject?: string | undefined;
};

/** @internal */
export const ToolsNumberListToolsRequest$inboundSchema: z.ZodType<
  ToolsNumberListToolsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.string().optional(),
  "Gram-Session": z.string().optional(),
  "Gram-Project": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "Gram-Session": "gramSession",
    "Gram-Project": "gramProject",
  });
});

/** @internal */
export type ToolsNumberListToolsRequest$Outbound = {
  cursor?: string | undefined;
  "Gram-Session"?: string | undefined;
  "Gram-Project"?: string | undefined;
};

/** @internal */
export const ToolsNumberListToolsRequest$outboundSchema: z.ZodType<
  ToolsNumberListToolsRequest$Outbound,
  z.ZodTypeDef,
  ToolsNumberListToolsRequest
> = z.object({
  cursor: z.string().optional(),
  gramSession: z.string().optional(),
  gramProject: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    gramSession: "Gram-Session",
    gramProject: "Gram-Project",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsNumberListToolsRequest$ {
  /** @deprecated use `ToolsNumberListToolsRequest$inboundSchema` instead. */
  export const inboundSchema = ToolsNumberListToolsRequest$inboundSchema;
  /** @deprecated use `ToolsNumberListToolsRequest$outboundSchema` instead. */
  export const outboundSchema = ToolsNumberListToolsRequest$outboundSchema;
  /** @deprecated use `ToolsNumberListToolsRequest$Outbound` instead. */
  export type Outbound = ToolsNumberListToolsRequest$Outbound;
}

export function toolsNumberListToolsRequestToJSON(
  toolsNumberListToolsRequest: ToolsNumberListToolsRequest,
): string {
  return JSON.stringify(
    ToolsNumberListToolsRequest$outboundSchema.parse(
      toolsNumberListToolsRequest,
    ),
  );
}

export function toolsNumberListToolsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ToolsNumberListToolsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolsNumberListToolsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolsNumberListToolsRequest' from JSON`,
  );
}
