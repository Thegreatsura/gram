/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type McpNumberServeSecurity = {
  apikeyHeaderAuthorization?: string | undefined;
  projectSlugQueryProject?: string | undefined;
};

export type McpNumberServeRequest = {
  project: string;
  /**
   * The toolset to access via MCP.
   */
  toolset: string;
  /**
   * The environment to access via MCP.
   */
  environment: string;
};

export type McpNumberServeResponse = {
  headers: { [k: string]: Array<string> };
  result: ReadableStream<Uint8Array>;
};

/** @internal */
export const McpNumberServeSecurity$inboundSchema: z.ZodType<
  McpNumberServeSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apikey_header_Authorization: z.string().optional(),
  project_slug_query_project: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "apikey_header_Authorization": "apikeyHeaderAuthorization",
    "project_slug_query_project": "projectSlugQueryProject",
  });
});

/** @internal */
export type McpNumberServeSecurity$Outbound = {
  apikey_header_Authorization?: string | undefined;
  project_slug_query_project?: string | undefined;
};

/** @internal */
export const McpNumberServeSecurity$outboundSchema: z.ZodType<
  McpNumberServeSecurity$Outbound,
  z.ZodTypeDef,
  McpNumberServeSecurity
> = z.object({
  apikeyHeaderAuthorization: z.string().optional(),
  projectSlugQueryProject: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    apikeyHeaderAuthorization: "apikey_header_Authorization",
    projectSlugQueryProject: "project_slug_query_project",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace McpNumberServeSecurity$ {
  /** @deprecated use `McpNumberServeSecurity$inboundSchema` instead. */
  export const inboundSchema = McpNumberServeSecurity$inboundSchema;
  /** @deprecated use `McpNumberServeSecurity$outboundSchema` instead. */
  export const outboundSchema = McpNumberServeSecurity$outboundSchema;
  /** @deprecated use `McpNumberServeSecurity$Outbound` instead. */
  export type Outbound = McpNumberServeSecurity$Outbound;
}

export function mcpNumberServeSecurityToJSON(
  mcpNumberServeSecurity: McpNumberServeSecurity,
): string {
  return JSON.stringify(
    McpNumberServeSecurity$outboundSchema.parse(mcpNumberServeSecurity),
  );
}

export function mcpNumberServeSecurityFromJSON(
  jsonString: string,
): SafeParseResult<McpNumberServeSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => McpNumberServeSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'McpNumberServeSecurity' from JSON`,
  );
}

/** @internal */
export const McpNumberServeRequest$inboundSchema: z.ZodType<
  McpNumberServeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  project: z.string(),
  toolset: z.string(),
  environment: z.string(),
});

/** @internal */
export type McpNumberServeRequest$Outbound = {
  project: string;
  toolset: string;
  environment: string;
};

/** @internal */
export const McpNumberServeRequest$outboundSchema: z.ZodType<
  McpNumberServeRequest$Outbound,
  z.ZodTypeDef,
  McpNumberServeRequest
> = z.object({
  project: z.string(),
  toolset: z.string(),
  environment: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace McpNumberServeRequest$ {
  /** @deprecated use `McpNumberServeRequest$inboundSchema` instead. */
  export const inboundSchema = McpNumberServeRequest$inboundSchema;
  /** @deprecated use `McpNumberServeRequest$outboundSchema` instead. */
  export const outboundSchema = McpNumberServeRequest$outboundSchema;
  /** @deprecated use `McpNumberServeRequest$Outbound` instead. */
  export type Outbound = McpNumberServeRequest$Outbound;
}

export function mcpNumberServeRequestToJSON(
  mcpNumberServeRequest: McpNumberServeRequest,
): string {
  return JSON.stringify(
    McpNumberServeRequest$outboundSchema.parse(mcpNumberServeRequest),
  );
}

export function mcpNumberServeRequestFromJSON(
  jsonString: string,
): SafeParseResult<McpNumberServeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => McpNumberServeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'McpNumberServeRequest' from JSON`,
  );
}

/** @internal */
export const McpNumberServeResponse$inboundSchema: z.ZodType<
  McpNumberServeResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.instanceof(ReadableStream<Uint8Array>),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type McpNumberServeResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: ReadableStream<Uint8Array>;
};

/** @internal */
export const McpNumberServeResponse$outboundSchema: z.ZodType<
  McpNumberServeResponse$Outbound,
  z.ZodTypeDef,
  McpNumberServeResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.instanceof(ReadableStream<Uint8Array>),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace McpNumberServeResponse$ {
  /** @deprecated use `McpNumberServeResponse$inboundSchema` instead. */
  export const inboundSchema = McpNumberServeResponse$inboundSchema;
  /** @deprecated use `McpNumberServeResponse$outboundSchema` instead. */
  export const outboundSchema = McpNumberServeResponse$outboundSchema;
  /** @deprecated use `McpNumberServeResponse$Outbound` instead. */
  export type Outbound = McpNumberServeResponse$Outbound;
}

export function mcpNumberServeResponseToJSON(
  mcpNumberServeResponse: McpNumberServeResponse,
): string {
  return JSON.stringify(
    McpNumberServeResponse$outboundSchema.parse(mcpNumberServeResponse),
  );
}

export function mcpNumberServeResponseFromJSON(
  jsonString: string,
): SafeParseResult<McpNumberServeResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => McpNumberServeResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'McpNumberServeResponse' from JSON`,
  );
}
