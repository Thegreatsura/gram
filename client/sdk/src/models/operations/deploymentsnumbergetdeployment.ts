/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeploymentsNumberGetDeploymentRequest = {
  /**
   * The ID of the deployment
   */
  id: string;
  /**
   * Session header
   */
  xGramSession?: string | undefined;
};

/** @internal */
export const DeploymentsNumberGetDeploymentRequest$inboundSchema: z.ZodType<
  DeploymentsNumberGetDeploymentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  "X-Gram-Session": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "X-Gram-Session": "xGramSession",
  });
});

/** @internal */
export type DeploymentsNumberGetDeploymentRequest$Outbound = {
  id: string;
  "X-Gram-Session"?: string | undefined;
};

/** @internal */
export const DeploymentsNumberGetDeploymentRequest$outboundSchema: z.ZodType<
  DeploymentsNumberGetDeploymentRequest$Outbound,
  z.ZodTypeDef,
  DeploymentsNumberGetDeploymentRequest
> = z.object({
  id: z.string(),
  xGramSession: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    xGramSession: "X-Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentsNumberGetDeploymentRequest$ {
  /** @deprecated use `DeploymentsNumberGetDeploymentRequest$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentsNumberGetDeploymentRequest$inboundSchema;
  /** @deprecated use `DeploymentsNumberGetDeploymentRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentsNumberGetDeploymentRequest$outboundSchema;
  /** @deprecated use `DeploymentsNumberGetDeploymentRequest$Outbound` instead. */
  export type Outbound = DeploymentsNumberGetDeploymentRequest$Outbound;
}

export function deploymentsNumberGetDeploymentRequestToJSON(
  deploymentsNumberGetDeploymentRequest: DeploymentsNumberGetDeploymentRequest,
): string {
  return JSON.stringify(
    DeploymentsNumberGetDeploymentRequest$outboundSchema.parse(
      deploymentsNumberGetDeploymentRequest,
    ),
  );
}

export function deploymentsNumberGetDeploymentRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentsNumberGetDeploymentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentsNumberGetDeploymentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentsNumberGetDeploymentRequest' from JSON`,
  );
}
