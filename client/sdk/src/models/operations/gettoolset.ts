/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetToolsetRequest = {
  /**
   * The slug of the toolset
   */
  slug: string;
  /**
   * Session header
   */
  gramSession?: string | undefined;
  /**
   * project header
   */
  gramProject?: string | undefined;
};

/** @internal */
export const GetToolsetRequest$inboundSchema: z.ZodType<
  GetToolsetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  slug: z.string(),
  "Gram-Session": z.string().optional(),
  "Gram-Project": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "Gram-Session": "gramSession",
    "Gram-Project": "gramProject",
  });
});

/** @internal */
export type GetToolsetRequest$Outbound = {
  slug: string;
  "Gram-Session"?: string | undefined;
  "Gram-Project"?: string | undefined;
};

/** @internal */
export const GetToolsetRequest$outboundSchema: z.ZodType<
  GetToolsetRequest$Outbound,
  z.ZodTypeDef,
  GetToolsetRequest
> = z.object({
  slug: z.string(),
  gramSession: z.string().optional(),
  gramProject: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    gramSession: "Gram-Session",
    gramProject: "Gram-Project",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetToolsetRequest$ {
  /** @deprecated use `GetToolsetRequest$inboundSchema` instead. */
  export const inboundSchema = GetToolsetRequest$inboundSchema;
  /** @deprecated use `GetToolsetRequest$outboundSchema` instead. */
  export const outboundSchema = GetToolsetRequest$outboundSchema;
  /** @deprecated use `GetToolsetRequest$Outbound` instead. */
  export type Outbound = GetToolsetRequest$Outbound;
}

export function getToolsetRequestToJSON(
  getToolsetRequest: GetToolsetRequest,
): string {
  return JSON.stringify(
    GetToolsetRequest$outboundSchema.parse(getToolsetRequest),
  );
}

export function getToolsetRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetToolsetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetToolsetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetToolsetRequest' from JSON`,
  );
}
