/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UploadImageRequest = {
  contentLength: number;
  /**
   * project header
   */
  gramProject?: string | undefined;
  /**
   * Session header
   */
  gramSession?: string | undefined;
};

/** @internal */
export const UploadImageRequest$inboundSchema: z.ZodType<
  UploadImageRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Content-Length": z.number().int(),
  "Gram-Project": z.string().optional(),
  "Gram-Session": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "Content-Length": "contentLength",
    "Gram-Project": "gramProject",
    "Gram-Session": "gramSession",
  });
});

/** @internal */
export type UploadImageRequest$Outbound = {
  "Content-Length": number;
  "Gram-Project"?: string | undefined;
  "Gram-Session"?: string | undefined;
};

/** @internal */
export const UploadImageRequest$outboundSchema: z.ZodType<
  UploadImageRequest$Outbound,
  z.ZodTypeDef,
  UploadImageRequest
> = z.object({
  contentLength: z.number().int(),
  gramProject: z.string().optional(),
  gramSession: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    contentLength: "Content-Length",
    gramProject: "Gram-Project",
    gramSession: "Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadImageRequest$ {
  /** @deprecated use `UploadImageRequest$inboundSchema` instead. */
  export const inboundSchema = UploadImageRequest$inboundSchema;
  /** @deprecated use `UploadImageRequest$outboundSchema` instead. */
  export const outboundSchema = UploadImageRequest$outboundSchema;
  /** @deprecated use `UploadImageRequest$Outbound` instead. */
  export type Outbound = UploadImageRequest$Outbound;
}

export function uploadImageRequestToJSON(
  uploadImageRequest: UploadImageRequest,
): string {
  return JSON.stringify(
    UploadImageRequest$outboundSchema.parse(uploadImageRequest),
  );
}

export function uploadImageRequestFromJSON(
  jsonString: string,
): SafeParseResult<UploadImageRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadImageRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadImageRequest' from JSON`,
  );
}
