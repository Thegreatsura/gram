/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AuthNumberInfoRequest = {
  /**
   * Session header
   */
  gramSession?: string | undefined;
};

export type AuthNumberInfoResponse = {
  headers: { [k: string]: Array<string> };
  result: components.InfoResponseBody;
};

/** @internal */
export const AuthNumberInfoRequest$inboundSchema: z.ZodType<
  AuthNumberInfoRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Gram-Session": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "Gram-Session": "gramSession",
  });
});

/** @internal */
export type AuthNumberInfoRequest$Outbound = {
  "Gram-Session"?: string | undefined;
};

/** @internal */
export const AuthNumberInfoRequest$outboundSchema: z.ZodType<
  AuthNumberInfoRequest$Outbound,
  z.ZodTypeDef,
  AuthNumberInfoRequest
> = z.object({
  gramSession: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    gramSession: "Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthNumberInfoRequest$ {
  /** @deprecated use `AuthNumberInfoRequest$inboundSchema` instead. */
  export const inboundSchema = AuthNumberInfoRequest$inboundSchema;
  /** @deprecated use `AuthNumberInfoRequest$outboundSchema` instead. */
  export const outboundSchema = AuthNumberInfoRequest$outboundSchema;
  /** @deprecated use `AuthNumberInfoRequest$Outbound` instead. */
  export type Outbound = AuthNumberInfoRequest$Outbound;
}

export function authNumberInfoRequestToJSON(
  authNumberInfoRequest: AuthNumberInfoRequest,
): string {
  return JSON.stringify(
    AuthNumberInfoRequest$outboundSchema.parse(authNumberInfoRequest),
  );
}

export function authNumberInfoRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthNumberInfoRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthNumberInfoRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthNumberInfoRequest' from JSON`,
  );
}

/** @internal */
export const AuthNumberInfoResponse$inboundSchema: z.ZodType<
  AuthNumberInfoResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.InfoResponseBody$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type AuthNumberInfoResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.InfoResponseBody$Outbound;
};

/** @internal */
export const AuthNumberInfoResponse$outboundSchema: z.ZodType<
  AuthNumberInfoResponse$Outbound,
  z.ZodTypeDef,
  AuthNumberInfoResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.InfoResponseBody$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthNumberInfoResponse$ {
  /** @deprecated use `AuthNumberInfoResponse$inboundSchema` instead. */
  export const inboundSchema = AuthNumberInfoResponse$inboundSchema;
  /** @deprecated use `AuthNumberInfoResponse$outboundSchema` instead. */
  export const outboundSchema = AuthNumberInfoResponse$outboundSchema;
  /** @deprecated use `AuthNumberInfoResponse$Outbound` instead. */
  export type Outbound = AuthNumberInfoResponse$Outbound;
}

export function authNumberInfoResponseToJSON(
  authNumberInfoResponse: AuthNumberInfoResponse,
): string {
  return JSON.stringify(
    AuthNumberInfoResponse$outboundSchema.parse(authNumberInfoResponse),
  );
}

export function authNumberInfoResponseFromJSON(
  jsonString: string,
): SafeParseResult<AuthNumberInfoResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthNumberInfoResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthNumberInfoResponse' from JSON`,
  );
}
