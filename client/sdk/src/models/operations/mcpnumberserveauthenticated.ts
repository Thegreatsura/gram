/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type McpNumberServeAuthenticatedSecurity = {
  apikeyHeaderAuthorization?: string | undefined;
  projectSlugQueryProject?: string | undefined;
};

export type McpNumberServeAuthenticatedRequest = {
  project: string;
  /**
   * The toolset to access via MCP.
   */
  toolset: string;
  /**
   * The environment to access via MCP.
   */
  environment: string;
  /**
   * The environment variables passed by user to MCP server (JSON Structured).
   */
  mcpEnvironment?: string | undefined;
};

export type McpNumberServeAuthenticatedResponse = {
  headers: { [k: string]: Array<string> };
  result: ReadableStream<Uint8Array>;
};

/** @internal */
export const McpNumberServeAuthenticatedSecurity$inboundSchema: z.ZodType<
  McpNumberServeAuthenticatedSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apikey_header_Authorization: z.string().optional(),
  project_slug_query_project: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "apikey_header_Authorization": "apikeyHeaderAuthorization",
    "project_slug_query_project": "projectSlugQueryProject",
  });
});

/** @internal */
export type McpNumberServeAuthenticatedSecurity$Outbound = {
  apikey_header_Authorization?: string | undefined;
  project_slug_query_project?: string | undefined;
};

/** @internal */
export const McpNumberServeAuthenticatedSecurity$outboundSchema: z.ZodType<
  McpNumberServeAuthenticatedSecurity$Outbound,
  z.ZodTypeDef,
  McpNumberServeAuthenticatedSecurity
> = z.object({
  apikeyHeaderAuthorization: z.string().optional(),
  projectSlugQueryProject: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    apikeyHeaderAuthorization: "apikey_header_Authorization",
    projectSlugQueryProject: "project_slug_query_project",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace McpNumberServeAuthenticatedSecurity$ {
  /** @deprecated use `McpNumberServeAuthenticatedSecurity$inboundSchema` instead. */
  export const inboundSchema =
    McpNumberServeAuthenticatedSecurity$inboundSchema;
  /** @deprecated use `McpNumberServeAuthenticatedSecurity$outboundSchema` instead. */
  export const outboundSchema =
    McpNumberServeAuthenticatedSecurity$outboundSchema;
  /** @deprecated use `McpNumberServeAuthenticatedSecurity$Outbound` instead. */
  export type Outbound = McpNumberServeAuthenticatedSecurity$Outbound;
}

export function mcpNumberServeAuthenticatedSecurityToJSON(
  mcpNumberServeAuthenticatedSecurity: McpNumberServeAuthenticatedSecurity,
): string {
  return JSON.stringify(
    McpNumberServeAuthenticatedSecurity$outboundSchema.parse(
      mcpNumberServeAuthenticatedSecurity,
    ),
  );
}

export function mcpNumberServeAuthenticatedSecurityFromJSON(
  jsonString: string,
): SafeParseResult<McpNumberServeAuthenticatedSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      McpNumberServeAuthenticatedSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'McpNumberServeAuthenticatedSecurity' from JSON`,
  );
}

/** @internal */
export const McpNumberServeAuthenticatedRequest$inboundSchema: z.ZodType<
  McpNumberServeAuthenticatedRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  project: z.string(),
  toolset: z.string(),
  environment: z.string(),
  "MCP-Environment": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "MCP-Environment": "mcpEnvironment",
  });
});

/** @internal */
export type McpNumberServeAuthenticatedRequest$Outbound = {
  project: string;
  toolset: string;
  environment: string;
  "MCP-Environment"?: string | undefined;
};

/** @internal */
export const McpNumberServeAuthenticatedRequest$outboundSchema: z.ZodType<
  McpNumberServeAuthenticatedRequest$Outbound,
  z.ZodTypeDef,
  McpNumberServeAuthenticatedRequest
> = z.object({
  project: z.string(),
  toolset: z.string(),
  environment: z.string(),
  mcpEnvironment: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    mcpEnvironment: "MCP-Environment",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace McpNumberServeAuthenticatedRequest$ {
  /** @deprecated use `McpNumberServeAuthenticatedRequest$inboundSchema` instead. */
  export const inboundSchema = McpNumberServeAuthenticatedRequest$inboundSchema;
  /** @deprecated use `McpNumberServeAuthenticatedRequest$outboundSchema` instead. */
  export const outboundSchema =
    McpNumberServeAuthenticatedRequest$outboundSchema;
  /** @deprecated use `McpNumberServeAuthenticatedRequest$Outbound` instead. */
  export type Outbound = McpNumberServeAuthenticatedRequest$Outbound;
}

export function mcpNumberServeAuthenticatedRequestToJSON(
  mcpNumberServeAuthenticatedRequest: McpNumberServeAuthenticatedRequest,
): string {
  return JSON.stringify(
    McpNumberServeAuthenticatedRequest$outboundSchema.parse(
      mcpNumberServeAuthenticatedRequest,
    ),
  );
}

export function mcpNumberServeAuthenticatedRequestFromJSON(
  jsonString: string,
): SafeParseResult<McpNumberServeAuthenticatedRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      McpNumberServeAuthenticatedRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'McpNumberServeAuthenticatedRequest' from JSON`,
  );
}

/** @internal */
export const McpNumberServeAuthenticatedResponse$inboundSchema: z.ZodType<
  McpNumberServeAuthenticatedResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.instanceof(ReadableStream<Uint8Array>),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type McpNumberServeAuthenticatedResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: ReadableStream<Uint8Array>;
};

/** @internal */
export const McpNumberServeAuthenticatedResponse$outboundSchema: z.ZodType<
  McpNumberServeAuthenticatedResponse$Outbound,
  z.ZodTypeDef,
  McpNumberServeAuthenticatedResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.instanceof(ReadableStream<Uint8Array>),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace McpNumberServeAuthenticatedResponse$ {
  /** @deprecated use `McpNumberServeAuthenticatedResponse$inboundSchema` instead. */
  export const inboundSchema =
    McpNumberServeAuthenticatedResponse$inboundSchema;
  /** @deprecated use `McpNumberServeAuthenticatedResponse$outboundSchema` instead. */
  export const outboundSchema =
    McpNumberServeAuthenticatedResponse$outboundSchema;
  /** @deprecated use `McpNumberServeAuthenticatedResponse$Outbound` instead. */
  export type Outbound = McpNumberServeAuthenticatedResponse$Outbound;
}

export function mcpNumberServeAuthenticatedResponseToJSON(
  mcpNumberServeAuthenticatedResponse: McpNumberServeAuthenticatedResponse,
): string {
  return JSON.stringify(
    McpNumberServeAuthenticatedResponse$outboundSchema.parse(
      mcpNumberServeAuthenticatedResponse,
    ),
  );
}

export function mcpNumberServeAuthenticatedResponseFromJSON(
  jsonString: string,
): SafeParseResult<McpNumberServeAuthenticatedResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      McpNumberServeAuthenticatedResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'McpNumberServeAuthenticatedResponse' from JSON`,
  );
}
