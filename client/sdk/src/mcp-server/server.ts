/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { GramCore } from "../core.js";
import { SDKOptions } from "../lib/config.js";
import type { ConsoleLogger } from "./console-logger.js";
import { createRegisterPrompt } from "./prompts.js";
import {
  createRegisterResource,
  createRegisterResourceTemplate,
} from "./resources.js";
import { MCPScope, mcpScopes } from "./scopes.js";
import { createRegisterTool } from "./tools.js";
import { tool$assetsAssetsNumberUploadOpenAPIv3 } from "./tools/assetsAssetsNumberUploadOpenAPIv3.js";
import { tool$authAuthNumberCallback } from "./tools/authAuthNumberCallback.js";
import { tool$deploymentsDeploymentsNumberAddOpenAPIv3Source } from "./tools/deploymentsDeploymentsNumberAddOpenAPIv3Source.js";
import { tool$deploymentsDeploymentsNumberCreateDeployment } from "./tools/deploymentsDeploymentsNumberCreateDeployment.js";
import { tool$deploymentsDeploymentsNumberGetDeployment } from "./tools/deploymentsDeploymentsNumberGetDeployment.js";
import { tool$deploymentsDeploymentsNumberListDeployments } from "./tools/deploymentsDeploymentsNumberListDeployments.js";
import { tool$environmentsEnvironmentsNumberCreateEnvironment } from "./tools/environmentsEnvironmentsNumberCreateEnvironment.js";
import { tool$environmentsEnvironmentsNumberDeleteEnvironment } from "./tools/environmentsEnvironmentsNumberDeleteEnvironment.js";
import { tool$environmentsEnvironmentsNumberListEnvironments } from "./tools/environmentsEnvironmentsNumberListEnvironments.js";
import { tool$environmentsEnvironmentsNumberUpdateEnvironment } from "./tools/environmentsEnvironmentsNumberUpdateEnvironment.js";
import { tool$toolsetsToolsetsNumberCreateToolset } from "./tools/toolsetsToolsetsNumberCreateToolset.js";
import { tool$toolsetsToolsetsNumberDeleteToolset } from "./tools/toolsetsToolsetsNumberDeleteToolset.js";
import { tool$toolsetsToolsetsNumberGetToolsetDetails } from "./tools/toolsetsToolsetsNumberGetToolsetDetails.js";
import { tool$toolsetsToolsetsNumberListToolsets } from "./tools/toolsetsToolsetsNumberListToolsets.js";
import { tool$toolsetsToolsetsNumberUpdateToolset } from "./tools/toolsetsToolsetsNumberUpdateToolset.js";
import { tool$toolsToolsNumberListTools } from "./tools/toolsToolsNumberListTools.js";

export function createMCPServer(deps: {
  logger: ConsoleLogger;
  allowedTools?: string[] | undefined;
  scopes?: MCPScope[] | undefined;
  serverURL?: string | undefined;
  security?: SDKOptions["security"] | undefined;
  serverIdx?: SDKOptions["serverIdx"] | undefined;
}) {
  const server = new McpServer({
    name: "Gram",
    version: "0.5.5",
  });

  const client = new GramCore({
    security: deps.security,
    serverURL: deps.serverURL,
    serverIdx: deps.serverIdx,
  });

  const scopes = new Set(deps.scopes ?? mcpScopes);

  const allowedTools = deps.allowedTools && new Set(deps.allowedTools);
  const tool = createRegisterTool(
    deps.logger,
    server,
    client,
    scopes,
    allowedTools,
  );
  const resource = createRegisterResource(deps.logger, server, client, scopes);
  const resourceTemplate = createRegisterResourceTemplate(
    deps.logger,
    server,
    client,
    scopes,
  );
  const prompt = createRegisterPrompt(deps.logger, server, client, scopes);
  const register = { tool, resource, resourceTemplate, prompt };
  void register; // suppress unused warnings

  tool(tool$assetsAssetsNumberUploadOpenAPIv3);
  tool(tool$authAuthNumberCallback);
  tool(tool$deploymentsDeploymentsNumberAddOpenAPIv3Source);
  tool(tool$deploymentsDeploymentsNumberCreateDeployment);
  tool(tool$deploymentsDeploymentsNumberGetDeployment);
  tool(tool$deploymentsDeploymentsNumberListDeployments);
  tool(tool$environmentsEnvironmentsNumberCreateEnvironment);
  tool(tool$environmentsEnvironmentsNumberDeleteEnvironment);
  tool(tool$environmentsEnvironmentsNumberListEnvironments);
  tool(tool$environmentsEnvironmentsNumberUpdateEnvironment);
  tool(tool$toolsToolsNumberListTools);
  tool(tool$toolsetsToolsetsNumberCreateToolset);
  tool(tool$toolsetsToolsetsNumberDeleteToolset);
  tool(tool$toolsetsToolsetsNumberGetToolsetDetails);
  tool(tool$toolsetsToolsetsNumberListToolsets);
  tool(tool$toolsetsToolsetsNumberUpdateToolset);

  return server;
}
