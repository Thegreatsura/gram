/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { GramCore } from "../core.js";
import { SDKOptions } from "../lib/config.js";
import type { ConsoleLogger } from "./console-logger.js";
import { createRegisterPrompt } from "./prompts.js";
import {
  createRegisterResource,
  createRegisterResourceTemplate,
} from "./resources.js";
import { MCPScope } from "./scopes.js";
import { createRegisterTool } from "./tools.js";
import { tool$assetsUploadOpenAPIv3 } from "./tools/assetsUploadOpenAPIv3.js";
import { tool$authCallback } from "./tools/authCallback.js";
import { tool$authLogin } from "./tools/authLogin.js";
import { tool$deploymentsCreate } from "./tools/deploymentsCreate.js";
import { tool$deploymentsEvolveDeployment } from "./tools/deploymentsEvolveDeployment.js";
import { tool$deploymentsGetById } from "./tools/deploymentsGetById.js";
import { tool$deploymentsList } from "./tools/deploymentsList.js";
import { tool$environmentsCreate } from "./tools/environmentsCreate.js";
import { tool$environmentsDeleteBySlug } from "./tools/environmentsDeleteBySlug.js";
import { tool$environmentsList } from "./tools/environmentsList.js";
import { tool$environmentsUpdateBySlug } from "./tools/environmentsUpdateBySlug.js";
import { tool$toolsetsCreate } from "./tools/toolsetsCreate.js";
import { tool$toolsetsDeleteBySlug } from "./tools/toolsetsDeleteBySlug.js";
import { tool$toolsetsGetBySlug } from "./tools/toolsetsGetBySlug.js";
import { tool$toolsetsList } from "./tools/toolsetsList.js";
import { tool$toolsetsUpdateBySlug } from "./tools/toolsetsUpdateBySlug.js";
import { tool$toolsList } from "./tools/toolsList.js";

export function createMCPServer(deps: {
  logger: ConsoleLogger;
  allowedTools?: string[] | undefined;
  scopes?: MCPScope[] | undefined;
  serverURL?: string | undefined;
  security?: SDKOptions["security"] | undefined;
  serverIdx?: SDKOptions["serverIdx"] | undefined;
}) {
  const server = new McpServer({
    name: "Gram",
    version: "0.8.10",
  });

  const client = new GramCore({
    security: deps.security,
    serverURL: deps.serverURL,
    serverIdx: deps.serverIdx,
  });

  const scopes = new Set(deps.scopes);

  const allowedTools = deps.allowedTools && new Set(deps.allowedTools);
  const tool = createRegisterTool(
    deps.logger,
    server,
    client,
    scopes,
    allowedTools,
  );
  const resource = createRegisterResource(deps.logger, server, client, scopes);
  const resourceTemplate = createRegisterResourceTemplate(
    deps.logger,
    server,
    client,
    scopes,
  );
  const prompt = createRegisterPrompt(deps.logger, server, client, scopes);
  const register = { tool, resource, resourceTemplate, prompt };
  void register; // suppress unused warnings

  tool(tool$assetsUploadOpenAPIv3);
  tool(tool$authCallback);
  tool(tool$authLogin);
  tool(tool$deploymentsCreate);
  tool(tool$deploymentsEvolveDeployment);
  tool(tool$deploymentsGetById);
  tool(tool$deploymentsList);
  tool(tool$environmentsCreate);
  tool(tool$environmentsDeleteBySlug);
  tool(tool$environmentsList);
  tool(tool$environmentsUpdateBySlug);
  tool(tool$toolsList);
  tool(tool$toolsetsCreate);
  tool(tool$toolsetsDeleteBySlug);
  tool(tool$toolsetsGetBySlug);
  tool(tool$toolsetsList);
  tool(tool$toolsetsUpdateBySlug);

  return server;
}
