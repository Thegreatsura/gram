/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GramCore } from "../core.js";
import { toolsetsToolsetsNumberCreateToolset } from "../funcs/toolsetsToolsetsNumberCreateToolset.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGramContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type ToolsetsToolsetsNumberCreateToolsetMutationVariables = {
  request: operations.ToolsetsNumberCreateToolsetRequest;
  options?: RequestOptions;
};

export type ToolsetsToolsetsNumberCreateToolsetMutationData =
  components.Toolset;

/**
 * createToolset toolsets
 *
 * @remarks
 * Create a new toolset with associated tools
 */
export function useToolsetsToolsetsNumberCreateToolsetMutation(
  options?: MutationHookOptions<
    ToolsetsToolsetsNumberCreateToolsetMutationData,
    Error,
    ToolsetsToolsetsNumberCreateToolsetMutationVariables
  >,
): UseMutationResult<
  ToolsetsToolsetsNumberCreateToolsetMutationData,
  Error,
  ToolsetsToolsetsNumberCreateToolsetMutationVariables
> {
  const client = useGramContext();
  return useMutation({
    ...buildToolsetsToolsetsNumberCreateToolsetMutation(client, options),
    ...options,
  });
}

export function mutationKeyToolsetsToolsetsNumberCreateToolset(): MutationKey {
  return ["@gram/sdk", "toolsets", "toolsetsNumberCreateToolset"];
}

export function buildToolsetsToolsetsNumberCreateToolsetMutation(
  client$: GramCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: ToolsetsToolsetsNumberCreateToolsetMutationVariables,
  ) => Promise<ToolsetsToolsetsNumberCreateToolsetMutationData>;
} {
  return {
    mutationKey: mutationKeyToolsetsToolsetsNumberCreateToolset(),
    mutationFn: function toolsetsToolsetsNumberCreateToolsetMutationFn({
      request,
      options,
    }): Promise<ToolsetsToolsetsNumberCreateToolsetMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(toolsetsToolsetsNumberCreateToolset(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
