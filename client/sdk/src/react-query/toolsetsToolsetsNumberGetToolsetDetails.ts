/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GramCore } from "../core.js";
import { toolsetsToolsetsNumberGetToolsetDetails } from "../funcs/toolsetsToolsetsNumberGetToolsetDetails.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGramContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ToolsetsToolsetsNumberGetToolsetDetailsQueryData =
  components.ToolsetDetails;

/**
 * getToolsetDetails toolsets
 *
 * @remarks
 * Get detailed information about a toolset including full HTTP tool definitions
 */
export function useToolsetsToolsetsNumberGetToolsetDetails(
  request: operations.ToolsetsNumberGetToolsetDetailsRequest,
  options?: QueryHookOptions<ToolsetsToolsetsNumberGetToolsetDetailsQueryData>,
): UseQueryResult<ToolsetsToolsetsNumberGetToolsetDetailsQueryData, Error> {
  const client = useGramContext();
  return useQuery({
    ...buildToolsetsToolsetsNumberGetToolsetDetailsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * getToolsetDetails toolsets
 *
 * @remarks
 * Get detailed information about a toolset including full HTTP tool definitions
 */
export function useToolsetsToolsetsNumberGetToolsetDetailsSuspense(
  request: operations.ToolsetsNumberGetToolsetDetailsRequest,
  options?: SuspenseQueryHookOptions<
    ToolsetsToolsetsNumberGetToolsetDetailsQueryData
  >,
): UseSuspenseQueryResult<
  ToolsetsToolsetsNumberGetToolsetDetailsQueryData,
  Error
> {
  const client = useGramContext();
  return useSuspenseQuery({
    ...buildToolsetsToolsetsNumberGetToolsetDetailsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchToolsetsToolsetsNumberGetToolsetDetails(
  queryClient: QueryClient,
  client$: GramCore,
  request: operations.ToolsetsNumberGetToolsetDetailsRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildToolsetsToolsetsNumberGetToolsetDetailsQuery(
      client$,
      request,
    ),
  });
}

export function setToolsetsToolsetsNumberGetToolsetDetailsData(
  client: QueryClient,
  queryKeyBase: [id: string, parameters: { xGramSession?: string | undefined }],
  data: ToolsetsToolsetsNumberGetToolsetDetailsQueryData,
): ToolsetsToolsetsNumberGetToolsetDetailsQueryData | undefined {
  const key = queryKeyToolsetsToolsetsNumberGetToolsetDetails(...queryKeyBase);

  return client.setQueryData<ToolsetsToolsetsNumberGetToolsetDetailsQueryData>(
    key,
    data,
  );
}

export function invalidateToolsetsToolsetsNumberGetToolsetDetails(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [id: string, parameters: { xGramSession?: string | undefined }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gram/sdk",
      "toolsets",
      "toolsetsNumberGetToolsetDetails",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllToolsetsToolsetsNumberGetToolsetDetails(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gram/sdk", "toolsets", "toolsetsNumberGetToolsetDetails"],
  });
}

export function buildToolsetsToolsetsNumberGetToolsetDetailsQuery(
  client$: GramCore,
  request: operations.ToolsetsNumberGetToolsetDetailsRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<ToolsetsToolsetsNumberGetToolsetDetailsQueryData>;
} {
  return {
    queryKey: queryKeyToolsetsToolsetsNumberGetToolsetDetails(request.id, {
      xGramSession: request.xGramSession,
    }),
    queryFn: async function toolsetsToolsetsNumberGetToolsetDetailsQueryFn(
      ctx,
    ): Promise<ToolsetsToolsetsNumberGetToolsetDetailsQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(toolsetsToolsetsNumberGetToolsetDetails(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyToolsetsToolsetsNumberGetToolsetDetails(
  id: string,
  parameters: { xGramSession?: string | undefined },
): QueryKey {
  return [
    "@gram/sdk",
    "toolsets",
    "toolsetsNumberGetToolsetDetails",
    id,
    parameters,
  ];
}
