/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GramCore } from "../core.js";
import { authInfo } from "../funcs/authInfo.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGramContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type SessionInfoQueryData = operations.SessionInfoResponse;

/**
 * info auth
 *
 * @remarks
 * Provides information about the current authentication status.
 */
export function useSessionInfo(
  security: operations.SessionInfoSecurity,
  request?: operations.SessionInfoRequest | undefined,
  options?: QueryHookOptions<SessionInfoQueryData>,
): UseQueryResult<SessionInfoQueryData, Error> {
  const client = useGramContext();
  return useQuery({
    ...buildSessionInfoQuery(
      client,
      security,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * info auth
 *
 * @remarks
 * Provides information about the current authentication status.
 */
export function useSessionInfoSuspense(
  security: operations.SessionInfoSecurity,
  request?: operations.SessionInfoRequest | undefined,
  options?: SuspenseQueryHookOptions<SessionInfoQueryData>,
): UseSuspenseQueryResult<SessionInfoQueryData, Error> {
  const client = useGramContext();
  return useSuspenseQuery({
    ...buildSessionInfoQuery(
      client,
      security,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchSessionInfo(
  queryClient: QueryClient,
  client$: GramCore,
  security: operations.SessionInfoSecurity,
  request?: operations.SessionInfoRequest | undefined,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildSessionInfoQuery(
      client$,
      security,
      request,
    ),
  });
}

export function setSessionInfoData(
  client: QueryClient,
  queryKeyBase: [parameters: { gramSession?: string | undefined }],
  data: SessionInfoQueryData,
): SessionInfoQueryData | undefined {
  const key = queryKeySessionInfo(...queryKeyBase);

  return client.setQueryData<SessionInfoQueryData>(key, data);
}

export function invalidateSessionInfo(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: { gramSession?: string | undefined }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gram/client", "auth", "info", ...queryKeyBase],
  });
}

export function invalidateAllSessionInfo(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gram/client", "auth", "info"],
  });
}

export function buildSessionInfoQuery(
  client$: GramCore,
  security: operations.SessionInfoSecurity,
  request?: operations.SessionInfoRequest | undefined,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<SessionInfoQueryData>;
} {
  return {
    queryKey: queryKeySessionInfo({ gramSession: request?.gramSession }),
    queryFn: async function sessionInfoQueryFn(
      ctx,
    ): Promise<SessionInfoQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(authInfo(
        client$,
        security,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeySessionInfo(
  parameters: { gramSession?: string | undefined },
): QueryKey {
  return ["@gram/client", "auth", "info", parameters];
}
