/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GramCore } from "../core.js";
import { templatesList } from "../funcs/templatesList.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGramContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type TemplatesQueryData = components.ListPromptTemplatesResult;

/**
 * listTemplates templates
 *
 * @remarks
 * List available prompt template.
 */
export function useTemplates(
  request?: operations.ListTemplatesRequest | undefined,
  security?: operations.ListTemplatesSecurity | undefined,
  options?: QueryHookOptions<TemplatesQueryData>,
): UseQueryResult<TemplatesQueryData, Error> {
  const client = useGramContext();
  return useQuery({
    ...buildTemplatesQuery(
      client,
      request,
      security,
      options,
    ),
    ...options,
  });
}

/**
 * listTemplates templates
 *
 * @remarks
 * List available prompt template.
 */
export function useTemplatesSuspense(
  request?: operations.ListTemplatesRequest | undefined,
  security?: operations.ListTemplatesSecurity | undefined,
  options?: SuspenseQueryHookOptions<TemplatesQueryData>,
): UseSuspenseQueryResult<TemplatesQueryData, Error> {
  const client = useGramContext();
  return useSuspenseQuery({
    ...buildTemplatesQuery(
      client,
      request,
      security,
      options,
    ),
    ...options,
  });
}

export function prefetchTemplates(
  queryClient: QueryClient,
  client$: GramCore,
  request?: operations.ListTemplatesRequest | undefined,
  security?: operations.ListTemplatesSecurity | undefined,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildTemplatesQuery(
      client$,
      request,
      security,
    ),
  });
}

export function setTemplatesData(
  client: QueryClient,
  queryKeyBase: [
    parameters: {
      gramKey?: string | undefined;
      gramSession?: string | undefined;
      gramProject?: string | undefined;
    },
  ],
  data: TemplatesQueryData,
): TemplatesQueryData | undefined {
  const key = queryKeyTemplates(...queryKeyBase);

  return client.setQueryData<TemplatesQueryData>(key, data);
}

export function invalidateTemplates(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: {
      gramKey?: string | undefined;
      gramSession?: string | undefined;
      gramProject?: string | undefined;
    }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gram/client", "templates", "list", ...queryKeyBase],
  });
}

export function invalidateAllTemplates(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gram/client", "templates", "list"],
  });
}

export function buildTemplatesQuery(
  client$: GramCore,
  request?: operations.ListTemplatesRequest | undefined,
  security?: operations.ListTemplatesSecurity | undefined,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<TemplatesQueryData>;
} {
  return {
    queryKey: queryKeyTemplates({
      gramKey: request?.gramKey,
      gramSession: request?.gramSession,
      gramProject: request?.gramProject,
    }),
    queryFn: async function templatesQueryFn(ctx): Promise<TemplatesQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(templatesList(
        client$,
        request,
        security,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyTemplates(
  parameters: {
    gramKey?: string | undefined;
    gramSession?: string | undefined;
    gramProject?: string | undefined;
  },
): QueryKey {
  return ["@gram/client", "templates", "list", parameters];
}
