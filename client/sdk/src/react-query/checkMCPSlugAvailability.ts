/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GramCore } from "../core.js";
import { toolsetsCheckMCPSlugAvailability } from "../funcs/toolsetsCheckMCPSlugAvailability.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGramContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type CheckMCPSlugAvailabilityQueryData = boolean;

/**
 * checkMCPSlugAvailability toolsets
 *
 * @remarks
 * Check if a MCP slug is available
 */
export function useCheckMCPSlugAvailability(
  request: operations.CheckMCPSlugAvailabilityRequest,
  security?: operations.CheckMCPSlugAvailabilitySecurity | undefined,
  options?: QueryHookOptions<CheckMCPSlugAvailabilityQueryData>,
): UseQueryResult<CheckMCPSlugAvailabilityQueryData, Error> {
  const client = useGramContext();
  return useQuery({
    ...buildCheckMCPSlugAvailabilityQuery(
      client,
      request,
      security,
      options,
    ),
    ...options,
  });
}

/**
 * checkMCPSlugAvailability toolsets
 *
 * @remarks
 * Check if a MCP slug is available
 */
export function useCheckMCPSlugAvailabilitySuspense(
  request: operations.CheckMCPSlugAvailabilityRequest,
  security?: operations.CheckMCPSlugAvailabilitySecurity | undefined,
  options?: SuspenseQueryHookOptions<CheckMCPSlugAvailabilityQueryData>,
): UseSuspenseQueryResult<CheckMCPSlugAvailabilityQueryData, Error> {
  const client = useGramContext();
  return useSuspenseQuery({
    ...buildCheckMCPSlugAvailabilityQuery(
      client,
      request,
      security,
      options,
    ),
    ...options,
  });
}

export function prefetchCheckMCPSlugAvailability(
  queryClient: QueryClient,
  client$: GramCore,
  request: operations.CheckMCPSlugAvailabilityRequest,
  security?: operations.CheckMCPSlugAvailabilitySecurity | undefined,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildCheckMCPSlugAvailabilityQuery(
      client$,
      request,
      security,
    ),
  });
}

export function setCheckMCPSlugAvailabilityData(
  client: QueryClient,
  queryKeyBase: [
    parameters: {
      slug: string;
      gramSession?: string | undefined;
      gramProject?: string | undefined;
    },
  ],
  data: CheckMCPSlugAvailabilityQueryData,
): CheckMCPSlugAvailabilityQueryData | undefined {
  const key = queryKeyCheckMCPSlugAvailability(...queryKeyBase);

  return client.setQueryData<CheckMCPSlugAvailabilityQueryData>(key, data);
}

export function invalidateCheckMCPSlugAvailability(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: {
      slug: string;
      gramSession?: string | undefined;
      gramProject?: string | undefined;
    }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gram/client",
      "toolsets",
      "checkMCPSlugAvailability",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllCheckMCPSlugAvailability(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gram/client", "toolsets", "checkMCPSlugAvailability"],
  });
}

export function buildCheckMCPSlugAvailabilityQuery(
  client$: GramCore,
  request: operations.CheckMCPSlugAvailabilityRequest,
  security?: operations.CheckMCPSlugAvailabilitySecurity | undefined,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<CheckMCPSlugAvailabilityQueryData>;
} {
  return {
    queryKey: queryKeyCheckMCPSlugAvailability({
      slug: request.slug,
      gramSession: request.gramSession,
      gramProject: request.gramProject,
    }),
    queryFn: async function checkMCPSlugAvailabilityQueryFn(
      ctx,
    ): Promise<CheckMCPSlugAvailabilityQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(toolsetsCheckMCPSlugAvailability(
        client$,
        request,
        security,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyCheckMCPSlugAvailability(
  parameters: {
    slug: string;
    gramSession?: string | undefined;
    gramProject?: string | undefined;
  },
): QueryKey {
  return ["@gram/client", "toolsets", "checkMCPSlugAvailability", parameters];
}
