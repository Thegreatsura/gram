/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GramCore } from "../core.js";
import { deploymentsDeploymentsNumberGetDeployment } from "../funcs/deploymentsDeploymentsNumberGetDeployment.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGramContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type DeploymentQueryData = components.GetDeploymentResult;

/**
 * getDeployment deployments
 *
 * @remarks
 * Create a deployment to load tool definitions.
 */
export function useDeployment(
  request: operations.DeploymentsNumberGetDeploymentRequest,
  options?: QueryHookOptions<DeploymentQueryData>,
): UseQueryResult<DeploymentQueryData, Error> {
  const client = useGramContext();
  return useQuery({
    ...buildDeploymentQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * getDeployment deployments
 *
 * @remarks
 * Create a deployment to load tool definitions.
 */
export function useDeploymentSuspense(
  request: operations.DeploymentsNumberGetDeploymentRequest,
  options?: SuspenseQueryHookOptions<DeploymentQueryData>,
): UseSuspenseQueryResult<DeploymentQueryData, Error> {
  const client = useGramContext();
  return useSuspenseQuery({
    ...buildDeploymentQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchDeployment(
  queryClient: QueryClient,
  client$: GramCore,
  request: operations.DeploymentsNumberGetDeploymentRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildDeploymentQuery(
      client$,
      request,
    ),
  });
}

export function setDeploymentData(
  client: QueryClient,
  queryKeyBase: [
    parameters: {
      id: string;
      gramSession?: string | undefined;
      gramProject?: string | undefined;
    },
  ],
  data: DeploymentQueryData,
): DeploymentQueryData | undefined {
  const key = queryKeyDeployment(...queryKeyBase);

  return client.setQueryData<DeploymentQueryData>(key, data);
}

export function invalidateDeployment(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: {
      id: string;
      gramSession?: string | undefined;
      gramProject?: string | undefined;
    }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gram/sdk",
      "deployments",
      "deploymentsNumberGetDeployment",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllDeployment(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gram/sdk", "deployments", "deploymentsNumberGetDeployment"],
  });
}

export function buildDeploymentQuery(
  client$: GramCore,
  request: operations.DeploymentsNumberGetDeploymentRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<DeploymentQueryData>;
} {
  return {
    queryKey: queryKeyDeployment({
      id: request.id,
      gramSession: request.gramSession,
      gramProject: request.gramProject,
    }),
    queryFn: async function deploymentQueryFn(
      ctx,
    ): Promise<DeploymentQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(deploymentsDeploymentsNumberGetDeployment(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyDeployment(
  parameters: {
    id: string;
    gramSession?: string | undefined;
    gramProject?: string | undefined;
  },
): QueryKey {
  return [
    "@gram/sdk",
    "deployments",
    "deploymentsNumberGetDeployment",
    parameters,
  ];
}
