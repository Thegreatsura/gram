/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GramCore } from "../core.js";
import { mcpMcpNumberServePublic } from "../funcs/mcpMcpNumberServePublic.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGramContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type McpMcpNumberServePublicMutationVariables = {
  request: operations.McpNumberServePublicRequest;
  options?: RequestOptions;
};

export type McpMcpNumberServePublicMutationData =
  | operations.McpNumberServePublicResponse
  | undefined;

/**
 * servePublic mcp
 *
 * @remarks
 * MCP server endpoint for a toolset (public, no environment param).
 */
export function useMcpMcpNumberServePublicMutation(
  options?: MutationHookOptions<
    McpMcpNumberServePublicMutationData,
    Error,
    McpMcpNumberServePublicMutationVariables
  >,
): UseMutationResult<
  McpMcpNumberServePublicMutationData,
  Error,
  McpMcpNumberServePublicMutationVariables
> {
  const client = useGramContext();
  return useMutation({
    ...buildMcpMcpNumberServePublicMutation(client, options),
    ...options,
  });
}

export function mutationKeyMcpMcpNumberServePublic(): MutationKey {
  return ["@gram/client", "mcp", "mcpNumberServePublic"];
}

export function buildMcpMcpNumberServePublicMutation(
  client$: GramCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: McpMcpNumberServePublicMutationVariables,
  ) => Promise<McpMcpNumberServePublicMutationData>;
} {
  return {
    mutationKey: mutationKeyMcpMcpNumberServePublic(),
    mutationFn: function mcpMcpNumberServePublicMutationFn({
      request,
      options,
    }): Promise<McpMcpNumberServePublicMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(mcpMcpNumberServePublic(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
