/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GramCore } from "../core.js";
import { domainsGetDomain } from "../funcs/domainsGetDomain.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGramContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type GetDomainQueryData = components.CustomDomain;

/**
 * getDomain domains
 *
 * @remarks
 * Get the custom domain for a project
 */
export function useGetDomain(
  request?: operations.GetDomainRequest | undefined,
  security?: operations.GetDomainSecurity | undefined,
  options?: QueryHookOptions<GetDomainQueryData>,
): UseQueryResult<GetDomainQueryData, Error> {
  const client = useGramContext();
  return useQuery({
    ...buildGetDomainQuery(
      client,
      request,
      security,
      options,
    ),
    ...options,
  });
}

/**
 * getDomain domains
 *
 * @remarks
 * Get the custom domain for a project
 */
export function useGetDomainSuspense(
  request?: operations.GetDomainRequest | undefined,
  security?: operations.GetDomainSecurity | undefined,
  options?: SuspenseQueryHookOptions<GetDomainQueryData>,
): UseSuspenseQueryResult<GetDomainQueryData, Error> {
  const client = useGramContext();
  return useSuspenseQuery({
    ...buildGetDomainQuery(
      client,
      request,
      security,
      options,
    ),
    ...options,
  });
}

export function prefetchGetDomain(
  queryClient: QueryClient,
  client$: GramCore,
  request?: operations.GetDomainRequest | undefined,
  security?: operations.GetDomainSecurity | undefined,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildGetDomainQuery(
      client$,
      request,
      security,
    ),
  });
}

export function setGetDomainData(
  client: QueryClient,
  queryKeyBase: [
    parameters: {
      gramSession?: string | undefined;
      gramProject?: string | undefined;
    },
  ],
  data: GetDomainQueryData,
): GetDomainQueryData | undefined {
  const key = queryKeyGetDomain(...queryKeyBase);

  return client.setQueryData<GetDomainQueryData>(key, data);
}

export function invalidateGetDomain(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: {
      gramSession?: string | undefined;
      gramProject?: string | undefined;
    }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gram/client", "domains", "getDomain", ...queryKeyBase],
  });
}

export function invalidateAllGetDomain(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gram/client", "domains", "getDomain"],
  });
}

export function buildGetDomainQuery(
  client$: GramCore,
  request?: operations.GetDomainRequest | undefined,
  security?: operations.GetDomainSecurity | undefined,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<GetDomainQueryData>;
} {
  return {
    queryKey: queryKeyGetDomain({
      gramSession: request?.gramSession,
      gramProject: request?.gramProject,
    }),
    queryFn: async function getDomainQueryFn(ctx): Promise<GetDomainQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(domainsGetDomain(
        client$,
        request,
        security,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyGetDomain(
  parameters: {
    gramSession?: string | undefined;
    gramProject?: string | undefined;
  },
): QueryKey {
  return ["@gram/client", "domains", "getDomain", parameters];
}
