/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GramCore } from "../core.js";
import { assetsUploadImage } from "../funcs/assetsUploadImage.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGramContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type UploadImageMutationVariables = {
  request: operations.UploadImageRequest;
  options?: RequestOptions;
};

export type UploadImageMutationData = components.UploadImageResult;

/**
 * uploadImage assets
 *
 * @remarks
 * Upload an image to Gram.
 */
export function useUploadImageMutation(
  options?: MutationHookOptions<
    UploadImageMutationData,
    Error,
    UploadImageMutationVariables
  >,
): UseMutationResult<
  UploadImageMutationData,
  Error,
  UploadImageMutationVariables
> {
  const client = useGramContext();
  return useMutation({
    ...buildUploadImageMutation(client, options),
    ...options,
  });
}

export function mutationKeyUploadImage(): MutationKey {
  return ["@gram/client", "assets", "uploadImage"];
}

export function buildUploadImageMutation(
  client$: GramCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: UploadImageMutationVariables,
  ) => Promise<UploadImageMutationData>;
} {
  return {
    mutationKey: mutationKeyUploadImage(),
    mutationFn: function uploadImageMutationFn({
      request,
      options,
    }): Promise<UploadImageMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(assetsUploadImage(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
