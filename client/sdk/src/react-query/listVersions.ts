/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GramCore } from "../core.js";
import { packagesListVersions } from "../funcs/packagesListVersions.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGramContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ListVersionsQueryData = components.ListVersionsResult;

/**
 * listVersions packages
 *
 * @remarks
 * List published versions of a package.
 */
export function useListVersions(
  request: operations.ListVersionsRequest,
  security?: operations.ListVersionsSecurity | undefined,
  options?: QueryHookOptions<ListVersionsQueryData>,
): UseQueryResult<ListVersionsQueryData, Error> {
  const client = useGramContext();
  return useQuery({
    ...buildListVersionsQuery(
      client,
      request,
      security,
      options,
    ),
    ...options,
  });
}

/**
 * listVersions packages
 *
 * @remarks
 * List published versions of a package.
 */
export function useListVersionsSuspense(
  request: operations.ListVersionsRequest,
  security?: operations.ListVersionsSecurity | undefined,
  options?: SuspenseQueryHookOptions<ListVersionsQueryData>,
): UseSuspenseQueryResult<ListVersionsQueryData, Error> {
  const client = useGramContext();
  return useSuspenseQuery({
    ...buildListVersionsQuery(
      client,
      request,
      security,
      options,
    ),
    ...options,
  });
}

export function prefetchListVersions(
  queryClient: QueryClient,
  client$: GramCore,
  request: operations.ListVersionsRequest,
  security?: operations.ListVersionsSecurity | undefined,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildListVersionsQuery(
      client$,
      request,
      security,
    ),
  });
}

export function setListVersionsData(
  client: QueryClient,
  queryKeyBase: [
    parameters: {
      name: string;
      gramKey?: string | undefined;
      gramSession?: string | undefined;
      gramProject?: string | undefined;
    },
  ],
  data: ListVersionsQueryData,
): ListVersionsQueryData | undefined {
  const key = queryKeyListVersions(...queryKeyBase);

  return client.setQueryData<ListVersionsQueryData>(key, data);
}

export function invalidateListVersions(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: {
      name: string;
      gramKey?: string | undefined;
      gramSession?: string | undefined;
      gramProject?: string | undefined;
    }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gram/client", "packages", "listVersions", ...queryKeyBase],
  });
}

export function invalidateAllListVersions(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gram/client", "packages", "listVersions"],
  });
}

export function buildListVersionsQuery(
  client$: GramCore,
  request: operations.ListVersionsRequest,
  security?: operations.ListVersionsSecurity | undefined,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<ListVersionsQueryData>;
} {
  return {
    queryKey: queryKeyListVersions({
      name: request.name,
      gramKey: request.gramKey,
      gramSession: request.gramSession,
      gramProject: request.gramProject,
    }),
    queryFn: async function listVersionsQueryFn(
      ctx,
    ): Promise<ListVersionsQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(packagesListVersions(
        client$,
        request,
        security,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyListVersions(
  parameters: {
    name: string;
    gramKey?: string | undefined;
    gramSession?: string | undefined;
    gramProject?: string | undefined;
  },
): QueryKey {
  return ["@gram/client", "packages", "listVersions", parameters];
}
