/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GramCore } from "../core.js";
import { deploymentsDeploymentsNumberListDeployments } from "../funcs/deploymentsDeploymentsNumberListDeployments.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGramContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type DeploymentsDeploymentsNumberListDeploymentsMutationVariables = {
  request?: operations.DeploymentsNumberListDeploymentsRequest | undefined;
  options?: RequestOptions;
};

export type DeploymentsDeploymentsNumberListDeploymentsMutationData =
  components.ListDeploymentResult;

/**
 * listDeployments deployments
 *
 * @remarks
 * List all deployments in descending order of creation.
 */
export function useDeploymentsDeploymentsNumberListDeploymentsMutation(
  options?: MutationHookOptions<
    DeploymentsDeploymentsNumberListDeploymentsMutationData,
    Error,
    DeploymentsDeploymentsNumberListDeploymentsMutationVariables
  >,
): UseMutationResult<
  DeploymentsDeploymentsNumberListDeploymentsMutationData,
  Error,
  DeploymentsDeploymentsNumberListDeploymentsMutationVariables
> {
  const client = useGramContext();
  return useMutation({
    ...buildDeploymentsDeploymentsNumberListDeploymentsMutation(
      client,
      options,
    ),
    ...options,
  });
}

export function mutationKeyDeploymentsDeploymentsNumberListDeployments(): MutationKey {
  return ["@gram/sdk", "deployments", "deploymentsNumberListDeployments"];
}

export function buildDeploymentsDeploymentsNumberListDeploymentsMutation(
  client$: GramCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: DeploymentsDeploymentsNumberListDeploymentsMutationVariables,
  ) => Promise<DeploymentsDeploymentsNumberListDeploymentsMutationData>;
} {
  return {
    mutationKey: mutationKeyDeploymentsDeploymentsNumberListDeployments(),
    mutationFn: function deploymentsDeploymentsNumberListDeploymentsMutationFn({
      request,
      options,
    }): Promise<DeploymentsDeploymentsNumberListDeploymentsMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(deploymentsDeploymentsNumberListDeployments(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
