/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GramCore } from "../core.js";
import { keysKeysNumberListKeys } from "../funcs/keysKeysNumberListKeys.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGramContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ListAPIKeysQueryData = components.ListKeysResult;

/**
 * listKeys keys
 *
 * @remarks
 * List all api keys for an organization
 */
export function useListAPIKeys(
  request?: operations.KeysNumberListKeysRequest | undefined,
  options?: QueryHookOptions<ListAPIKeysQueryData>,
): UseQueryResult<ListAPIKeysQueryData, Error> {
  const client = useGramContext();
  return useQuery({
    ...buildListAPIKeysQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * listKeys keys
 *
 * @remarks
 * List all api keys for an organization
 */
export function useListAPIKeysSuspense(
  request?: operations.KeysNumberListKeysRequest | undefined,
  options?: SuspenseQueryHookOptions<ListAPIKeysQueryData>,
): UseSuspenseQueryResult<ListAPIKeysQueryData, Error> {
  const client = useGramContext();
  return useSuspenseQuery({
    ...buildListAPIKeysQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchListAPIKeys(
  queryClient: QueryClient,
  client$: GramCore,
  request?: operations.KeysNumberListKeysRequest | undefined,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildListAPIKeysQuery(
      client$,
      request,
    ),
  });
}

export function setListAPIKeysData(
  client: QueryClient,
  queryKeyBase: [parameters: { gramSession?: string | undefined }],
  data: ListAPIKeysQueryData,
): ListAPIKeysQueryData | undefined {
  const key = queryKeyListAPIKeys(...queryKeyBase);

  return client.setQueryData<ListAPIKeysQueryData>(key, data);
}

export function invalidateListAPIKeys(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: { gramSession?: string | undefined }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gram/sdk", "keys", "keysNumberListKeys", ...queryKeyBase],
  });
}

export function invalidateAllListAPIKeys(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gram/sdk", "keys", "keysNumberListKeys"],
  });
}

export function buildListAPIKeysQuery(
  client$: GramCore,
  request?: operations.KeysNumberListKeysRequest | undefined,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<ListAPIKeysQueryData>;
} {
  return {
    queryKey: queryKeyListAPIKeys({ gramSession: request?.gramSession }),
    queryFn: async function listAPIKeysQueryFn(
      ctx,
    ): Promise<ListAPIKeysQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(keysKeysNumberListKeys(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyListAPIKeys(
  parameters: { gramSession?: string | undefined },
): QueryKey {
  return ["@gram/sdk", "keys", "keysNumberListKeys", parameters];
}
