/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GramCore } from "../core.js";
import { instancesGetBySlug } from "../funcs/instancesGetBySlug.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGramContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type InstanceQueryData = components.GetInstanceResult;

/**
 * getInstance instances
 *
 * @remarks
 * Load all relevant data for an instance of a toolset and environment
 */
export function useInstance(
  security: operations.GetInstanceSecurity,
  request: operations.GetInstanceRequest,
  options?: QueryHookOptions<InstanceQueryData>,
): UseQueryResult<InstanceQueryData, Error> {
  const client = useGramContext();
  return useQuery({
    ...buildInstanceQuery(
      client,
      security,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * getInstance instances
 *
 * @remarks
 * Load all relevant data for an instance of a toolset and environment
 */
export function useInstanceSuspense(
  security: operations.GetInstanceSecurity,
  request: operations.GetInstanceRequest,
  options?: SuspenseQueryHookOptions<InstanceQueryData>,
): UseSuspenseQueryResult<InstanceQueryData, Error> {
  const client = useGramContext();
  return useSuspenseQuery({
    ...buildInstanceQuery(
      client,
      security,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchInstance(
  queryClient: QueryClient,
  client$: GramCore,
  security: operations.GetInstanceSecurity,
  request: operations.GetInstanceRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildInstanceQuery(
      client$,
      security,
      request,
    ),
  });
}

export function setInstanceData(
  client: QueryClient,
  queryKeyBase: [
    parameters: {
      toolsetSlug: string;
      environmentSlug?: string | undefined;
      gramSession?: string | undefined;
      gramProject?: string | undefined;
      gramKey?: string | undefined;
    },
  ],
  data: InstanceQueryData,
): InstanceQueryData | undefined {
  const key = queryKeyInstance(...queryKeyBase);

  return client.setQueryData<InstanceQueryData>(key, data);
}

export function invalidateInstance(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: {
      toolsetSlug: string;
      environmentSlug?: string | undefined;
      gramSession?: string | undefined;
      gramProject?: string | undefined;
      gramKey?: string | undefined;
    }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gram/client", "instances", "getBySlug", ...queryKeyBase],
  });
}

export function invalidateAllInstance(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gram/client", "instances", "getBySlug"],
  });
}

export function buildInstanceQuery(
  client$: GramCore,
  security: operations.GetInstanceSecurity,
  request: operations.GetInstanceRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<InstanceQueryData>;
} {
  return {
    queryKey: queryKeyInstance({
      toolsetSlug: request.toolsetSlug,
      environmentSlug: request.environmentSlug,
      gramSession: request.gramSession,
      gramProject: request.gramProject,
      gramKey: request.gramKey,
    }),
    queryFn: async function instanceQueryFn(ctx): Promise<InstanceQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(instancesGetBySlug(
        client$,
        security,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyInstance(
  parameters: {
    toolsetSlug: string;
    environmentSlug?: string | undefined;
    gramSession?: string | undefined;
    gramProject?: string | undefined;
    gramKey?: string | undefined;
  },
): QueryKey {
  return ["@gram/client", "instances", "getBySlug", parameters];
}
