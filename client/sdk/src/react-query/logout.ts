/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GramCore } from "../core.js";
import { authAuthNumberLogout } from "../funcs/authAuthNumberLogout.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGramContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type LogoutQueryData = operations.AuthNumberLogoutResponse | undefined;

/**
 * logout auth
 *
 * @remarks
 * Logs out the current user by clearing their session.
 */
export function useLogout(
  request?: operations.AuthNumberLogoutRequest | undefined,
  options?: QueryHookOptions<LogoutQueryData>,
): UseQueryResult<LogoutQueryData, Error> {
  const client = useGramContext();
  return useQuery({
    ...buildLogoutQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * logout auth
 *
 * @remarks
 * Logs out the current user by clearing their session.
 */
export function useLogoutSuspense(
  request?: operations.AuthNumberLogoutRequest | undefined,
  options?: SuspenseQueryHookOptions<LogoutQueryData>,
): UseSuspenseQueryResult<LogoutQueryData, Error> {
  const client = useGramContext();
  return useSuspenseQuery({
    ...buildLogoutQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchLogout(
  queryClient: QueryClient,
  client$: GramCore,
  request?: operations.AuthNumberLogoutRequest | undefined,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildLogoutQuery(
      client$,
      request,
    ),
  });
}

export function setLogoutData(
  client: QueryClient,
  queryKeyBase: [parameters: { gramSession?: string | undefined }],
  data: LogoutQueryData,
): LogoutQueryData | undefined {
  const key = queryKeyLogout(...queryKeyBase);

  return client.setQueryData<LogoutQueryData>(key, data);
}

export function invalidateLogout(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: { gramSession?: string | undefined }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gram/sdk", "auth", "authNumberLogout", ...queryKeyBase],
  });
}

export function invalidateAllLogout(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gram/sdk", "auth", "authNumberLogout"],
  });
}

export function buildLogoutQuery(
  client$: GramCore,
  request?: operations.AuthNumberLogoutRequest | undefined,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<LogoutQueryData>;
} {
  return {
    queryKey: queryKeyLogout({ gramSession: request?.gramSession }),
    queryFn: async function logoutQueryFn(ctx): Promise<LogoutQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(authAuthNumberLogout(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyLogout(
  parameters: { gramSession?: string | undefined },
): QueryKey {
  return ["@gram/sdk", "auth", "authNumberLogout", parameters];
}
