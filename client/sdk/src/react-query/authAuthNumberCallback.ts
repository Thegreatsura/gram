/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GramCore } from "../core.js";
import { authAuthNumberCallback } from "../funcs/authAuthNumberCallback.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGramContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type AuthAuthNumberCallbackQueryData =
  | operations.AuthNumberCallbackResponse
  | undefined;

/**
 * callback auth
 *
 * @remarks
 * Handles the authentication callback.
 */
export function useAuthAuthNumberCallback(
  request: operations.AuthNumberCallbackRequest,
  options?: QueryHookOptions<AuthAuthNumberCallbackQueryData>,
): UseQueryResult<AuthAuthNumberCallbackQueryData, Error> {
  const client = useGramContext();
  return useQuery({
    ...buildAuthAuthNumberCallbackQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * callback auth
 *
 * @remarks
 * Handles the authentication callback.
 */
export function useAuthAuthNumberCallbackSuspense(
  request: operations.AuthNumberCallbackRequest,
  options?: SuspenseQueryHookOptions<AuthAuthNumberCallbackQueryData>,
): UseSuspenseQueryResult<AuthAuthNumberCallbackQueryData, Error> {
  const client = useGramContext();
  return useSuspenseQuery({
    ...buildAuthAuthNumberCallbackQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchAuthAuthNumberCallback(
  queryClient: QueryClient,
  client$: GramCore,
  request: operations.AuthNumberCallbackRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildAuthAuthNumberCallbackQuery(
      client$,
      request,
    ),
  });
}

export function setAuthAuthNumberCallbackData(
  client: QueryClient,
  queryKeyBase: [parameters: { sharedToken: string }],
  data: AuthAuthNumberCallbackQueryData,
): AuthAuthNumberCallbackQueryData | undefined {
  const key = queryKeyAuthAuthNumberCallback(...queryKeyBase);

  return client.setQueryData<AuthAuthNumberCallbackQueryData>(key, data);
}

export function invalidateAuthAuthNumberCallback(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[parameters: { sharedToken: string }]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gram/sdk", "auth", "authNumberCallback", ...queryKeyBase],
  });
}

export function invalidateAllAuthAuthNumberCallback(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gram/sdk", "auth", "authNumberCallback"],
  });
}

export function buildAuthAuthNumberCallbackQuery(
  client$: GramCore,
  request: operations.AuthNumberCallbackRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<AuthAuthNumberCallbackQueryData>;
} {
  return {
    queryKey: queryKeyAuthAuthNumberCallback({
      sharedToken: request.sharedToken,
    }),
    queryFn: async function authAuthNumberCallbackQueryFn(
      ctx,
    ): Promise<AuthAuthNumberCallbackQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(authAuthNumberCallback(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyAuthAuthNumberCallback(
  parameters: { sharedToken: string },
): QueryKey {
  return ["@gram/sdk", "auth", "authNumberCallback", parameters];
}
