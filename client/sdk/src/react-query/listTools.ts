/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GramCore } from "../core.js";
import { toolsList } from "../funcs/toolsList.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGramContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ListToolsQueryData = components.ListToolsResult;

/**
 * listTools tools
 *
 * @remarks
 * List all tools for a project
 */
export function useListTools(
  request?: operations.ListToolsRequest | undefined,
  options?: QueryHookOptions<ListToolsQueryData>,
): UseQueryResult<ListToolsQueryData, Error> {
  const client = useGramContext();
  return useQuery({
    ...buildListToolsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * listTools tools
 *
 * @remarks
 * List all tools for a project
 */
export function useListToolsSuspense(
  request?: operations.ListToolsRequest | undefined,
  options?: SuspenseQueryHookOptions<ListToolsQueryData>,
): UseSuspenseQueryResult<ListToolsQueryData, Error> {
  const client = useGramContext();
  return useSuspenseQuery({
    ...buildListToolsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchListTools(
  queryClient: QueryClient,
  client$: GramCore,
  request?: operations.ListToolsRequest | undefined,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildListToolsQuery(
      client$,
      request,
    ),
  });
}

export function setListToolsData(
  client: QueryClient,
  queryKeyBase: [
    parameters: {
      cursor?: string | undefined;
      gramSession?: string | undefined;
      gramProject?: string | undefined;
    },
  ],
  data: ListToolsQueryData,
): ListToolsQueryData | undefined {
  const key = queryKeyListTools(...queryKeyBase);

  return client.setQueryData<ListToolsQueryData>(key, data);
}

export function invalidateListTools(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: {
      cursor?: string | undefined;
      gramSession?: string | undefined;
      gramProject?: string | undefined;
    }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gram/client", "tools", "list", ...queryKeyBase],
  });
}

export function invalidateAllListTools(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gram/client", "tools", "list"],
  });
}

export function buildListToolsQuery(
  client$: GramCore,
  request?: operations.ListToolsRequest | undefined,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<ListToolsQueryData>;
} {
  return {
    queryKey: queryKeyListTools({
      cursor: request?.cursor,
      gramSession: request?.gramSession,
      gramProject: request?.gramProject,
    }),
    queryFn: async function listToolsQueryFn(ctx): Promise<ListToolsQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(toolsList(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyListTools(
  parameters: {
    cursor?: string | undefined;
    gramSession?: string | undefined;
    gramProject?: string | undefined;
  },
): QueryKey {
  return ["@gram/client", "tools", "list", parameters];
}
