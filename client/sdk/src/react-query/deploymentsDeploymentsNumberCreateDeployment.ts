/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GramCore } from "../core.js";
import { deploymentsDeploymentsNumberCreateDeployment } from "../funcs/deploymentsDeploymentsNumberCreateDeployment.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGramContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type DeploymentsDeploymentsNumberCreateDeploymentMutationVariables = {
  request: operations.DeploymentsNumberCreateDeploymentRequest;
  options?: RequestOptions;
};

export type DeploymentsDeploymentsNumberCreateDeploymentMutationData =
  components.CreateDeploymentResult;

/**
 * createDeployment deployments
 *
 * @remarks
 * Create a deployment to load tool definitions.
 */
export function useDeploymentsDeploymentsNumberCreateDeploymentMutation(
  options?: MutationHookOptions<
    DeploymentsDeploymentsNumberCreateDeploymentMutationData,
    Error,
    DeploymentsDeploymentsNumberCreateDeploymentMutationVariables
  >,
): UseMutationResult<
  DeploymentsDeploymentsNumberCreateDeploymentMutationData,
  Error,
  DeploymentsDeploymentsNumberCreateDeploymentMutationVariables
> {
  const client = useGramContext();
  return useMutation({
    ...buildDeploymentsDeploymentsNumberCreateDeploymentMutation(
      client,
      options,
    ),
    ...options,
  });
}

export function mutationKeyDeploymentsDeploymentsNumberCreateDeployment(): MutationKey {
  return ["@gram/sdk", "deployments", "deploymentsNumberCreateDeployment"];
}

export function buildDeploymentsDeploymentsNumberCreateDeploymentMutation(
  client$: GramCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: DeploymentsDeploymentsNumberCreateDeploymentMutationVariables,
  ) => Promise<DeploymentsDeploymentsNumberCreateDeploymentMutationData>;
} {
  return {
    mutationKey: mutationKeyDeploymentsDeploymentsNumberCreateDeployment(),
    mutationFn: function deploymentsDeploymentsNumberCreateDeploymentMutationFn(
      {
        request,
        options,
      },
    ): Promise<DeploymentsDeploymentsNumberCreateDeploymentMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(deploymentsDeploymentsNumberCreateDeployment(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
