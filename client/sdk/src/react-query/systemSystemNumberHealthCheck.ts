/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GramCore } from "../core.js";
import { systemSystemNumberHealthCheck } from "../funcs/systemSystemNumberHealthCheck.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGramContext } from "./_context.js";
import { QueryHookOptions, SuspenseQueryHookOptions } from "./_types.js";

export type SystemSystemNumberHealthCheckQueryData =
  components.HealthCheckResult;

/**
 * healthCheck system
 *
 * @remarks
 * Check the health of the service.
 */
export function useSystemSystemNumberHealthCheck(
  options?: QueryHookOptions<SystemSystemNumberHealthCheckQueryData>,
): UseQueryResult<SystemSystemNumberHealthCheckQueryData, Error> {
  const client = useGramContext();
  return useQuery({
    ...buildSystemSystemNumberHealthCheckQuery(
      client,
      options,
    ),
    ...options,
  });
}

/**
 * healthCheck system
 *
 * @remarks
 * Check the health of the service.
 */
export function useSystemSystemNumberHealthCheckSuspense(
  options?: SuspenseQueryHookOptions<SystemSystemNumberHealthCheckQueryData>,
): UseSuspenseQueryResult<SystemSystemNumberHealthCheckQueryData, Error> {
  const client = useGramContext();
  return useSuspenseQuery({
    ...buildSystemSystemNumberHealthCheckQuery(
      client,
      options,
    ),
    ...options,
  });
}

export function prefetchSystemSystemNumberHealthCheck(
  queryClient: QueryClient,
  client$: GramCore,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildSystemSystemNumberHealthCheckQuery(
      client$,
    ),
  });
}

export function setSystemSystemNumberHealthCheckData(
  client: QueryClient,
  data: SystemSystemNumberHealthCheckQueryData,
): SystemSystemNumberHealthCheckQueryData | undefined {
  const key = queryKeySystemSystemNumberHealthCheck();

  return client.setQueryData<SystemSystemNumberHealthCheckQueryData>(key, data);
}

export function invalidateAllSystemSystemNumberHealthCheck(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gram/sdk", "system", "systemNumberHealthCheck"],
  });
}

export function buildSystemSystemNumberHealthCheckQuery(
  client$: GramCore,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<SystemSystemNumberHealthCheckQueryData>;
} {
  return {
    queryKey: queryKeySystemSystemNumberHealthCheck(),
    queryFn: async function systemSystemNumberHealthCheckQueryFn(
      ctx,
    ): Promise<SystemSystemNumberHealthCheckQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(systemSystemNumberHealthCheck(
        client$,
        mergedOptions,
      ));
    },
  };
}

export function queryKeySystemSystemNumberHealthCheck(): QueryKey {
  return ["@gram/sdk", "system", "systemNumberHealthCheck"];
}
