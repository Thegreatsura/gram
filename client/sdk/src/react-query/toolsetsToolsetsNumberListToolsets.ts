/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GramCore } from "../core.js";
import { toolsetsToolsetsNumberListToolsets } from "../funcs/toolsetsToolsetsNumberListToolsets.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGramContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ToolsetsToolsetsNumberListToolsetsQueryData =
  components.ListToolsetsResult;

/**
 * listToolsets toolsets
 *
 * @remarks
 * List all toolsets for a project
 */
export function useToolsetsToolsetsNumberListToolsets(
  request: operations.ToolsetsNumberListToolsetsRequest,
  options?: QueryHookOptions<ToolsetsToolsetsNumberListToolsetsQueryData>,
): UseQueryResult<ToolsetsToolsetsNumberListToolsetsQueryData, Error> {
  const client = useGramContext();
  return useQuery({
    ...buildToolsetsToolsetsNumberListToolsetsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * listToolsets toolsets
 *
 * @remarks
 * List all toolsets for a project
 */
export function useToolsetsToolsetsNumberListToolsetsSuspense(
  request: operations.ToolsetsNumberListToolsetsRequest,
  options?: SuspenseQueryHookOptions<
    ToolsetsToolsetsNumberListToolsetsQueryData
  >,
): UseSuspenseQueryResult<ToolsetsToolsetsNumberListToolsetsQueryData, Error> {
  const client = useGramContext();
  return useSuspenseQuery({
    ...buildToolsetsToolsetsNumberListToolsetsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchToolsetsToolsetsNumberListToolsets(
  queryClient: QueryClient,
  client$: GramCore,
  request: operations.ToolsetsNumberListToolsetsRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildToolsetsToolsetsNumberListToolsetsQuery(
      client$,
      request,
    ),
  });
}

export function setToolsetsToolsetsNumberListToolsetsData(
  client: QueryClient,
  queryKeyBase: [
    parameters: { projectId: string; xGramSession?: string | undefined },
  ],
  data: ToolsetsToolsetsNumberListToolsetsQueryData,
): ToolsetsToolsetsNumberListToolsetsQueryData | undefined {
  const key = queryKeyToolsetsToolsetsNumberListToolsets(...queryKeyBase);

  return client.setQueryData<ToolsetsToolsetsNumberListToolsetsQueryData>(
    key,
    data,
  );
}

export function invalidateToolsetsToolsetsNumberListToolsets(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: { projectId: string; xGramSession?: string | undefined }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gram/sdk",
      "toolsets",
      "toolsetsNumberListToolsets",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllToolsetsToolsetsNumberListToolsets(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gram/sdk", "toolsets", "toolsetsNumberListToolsets"],
  });
}

export function buildToolsetsToolsetsNumberListToolsetsQuery(
  client$: GramCore,
  request: operations.ToolsetsNumberListToolsetsRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<ToolsetsToolsetsNumberListToolsetsQueryData>;
} {
  return {
    queryKey: queryKeyToolsetsToolsetsNumberListToolsets({
      projectId: request.projectId,
      xGramSession: request.xGramSession,
    }),
    queryFn: async function toolsetsToolsetsNumberListToolsetsQueryFn(
      ctx,
    ): Promise<ToolsetsToolsetsNumberListToolsetsQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(toolsetsToolsetsNumberListToolsets(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyToolsetsToolsetsNumberListToolsets(
  parameters: { projectId: string; xGramSession?: string | undefined },
): QueryKey {
  return ["@gram/sdk", "toolsets", "toolsetsNumberListToolsets", parameters];
}
