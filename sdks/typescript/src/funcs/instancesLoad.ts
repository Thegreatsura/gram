/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { GramAPICore } from "../core.js";
import { encodeFormQuery, encodeSimple } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { resolveSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import * as components from "../models/components/index.js";
import { APIError } from "../models/errors/apierror.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as operations from "../models/operations/index.js";
import { APICall, APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";

/**
 * loadInstance instances
 *
 * @remarks
 * load all relevant data for an instance of a toolset and environment
 */
export function instancesLoad(
  client: GramAPICore,
  security: operations.InstancesNumberLoadInstanceSecurity,
  request: operations.InstancesNumberLoadInstanceRequest,
  options?: RequestOptions,
): APIPromise<
  Result<
    components.InstanceResult,
    | APIError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >
> {
  return new APIPromise($do(
    client,
    security,
    request,
    options,
  ));
}

async function $do(
  client: GramAPICore,
  security: operations.InstancesNumberLoadInstanceSecurity,
  request: operations.InstancesNumberLoadInstanceRequest,
  options?: RequestOptions,
): Promise<
  [
    Result<
      components.InstanceResult,
      | APIError
      | SDKValidationError
      | UnexpectedClientError
      | InvalidRequestError
      | RequestAbortedError
      | RequestTimeoutError
      | ConnectionError
    >,
    APICall,
  ]
> {
  const parsed = safeParse(
    request,
    (value) =>
      operations.InstancesNumberLoadInstanceRequest$outboundSchema.parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return [parsed, { status: "invalid" }];
  }
  const payload = parsed.value;
  const body = null;

  const path = pathToFunc("/rpc/instances.load")();

  const query = encodeFormQuery({
    "environment_slug": payload.environment_slug,
    "toolset_slug": payload.toolset_slug,
  });

  const headers = new Headers(compactMap({
    Accept: "application/json",
    "Gram-Key": encodeSimple("Gram-Key", payload["Gram-Key"], {
      explode: false,
      charEncoding: "none",
    }),
    "Gram-Project": encodeSimple("Gram-Project", payload["Gram-Project"], {
      explode: false,
      charEncoding: "none",
    }),
    "Gram-Session": encodeSimple("Gram-Session", payload["Gram-Session"], {
      explode: false,
      charEncoding: "none",
    }),
  }));

  const requestSecurity = resolveSecurity(
    [
      {
        fieldName: "Gram-Project",
        type: "apiKey:header",
        value: security?.option1?.projectSlugHeaderGramProject,
      },
      {
        fieldName: "Gram-Session",
        type: "apiKey:header",
        value: security?.option1?.sessionHeaderGramSession,
      },
    ],
    [
      {
        fieldName: "Gram-Key",
        type: "apiKey:header",
        value: security?.option2?.apikeyHeaderGramKey,
      },
      {
        fieldName: "Gram-Project",
        type: "apiKey:header",
        value: security?.option2?.projectSlugHeaderGramProject,
      },
    ],
  );

  const context = {
    baseURL: options?.serverURL ?? client._baseURL ?? "",
    operationID: "instances#loadInstance",
    oAuth2Scopes: null,

    resolvedSecurity: requestSecurity,

    securitySource: security,
    retryConfig: options?.retries
      || client._options.retryConfig
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "GET",
    baseURL: options?.serverURL,
    path: path,
    headers: headers,
    query: query,
    body: body,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return [requestRes, { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["4XX", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [doResult, { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const [result] = await M.match<
    components.InstanceResult,
    | APIError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >(
    M.json(200, components.InstanceResult$inboundSchema),
    M.fail("4XX"),
    M.fail("5XX"),
  )(response);
  if (!result.ok) {
    return [result, { status: "complete", request: req, response }];
  }

  return [result, { status: "complete", request: req, response }];
}
