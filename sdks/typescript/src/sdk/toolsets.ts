/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { toolsetsCreate } from "../funcs/toolsetsCreate.js";
import { toolsetsDeleteBySlug } from "../funcs/toolsetsDeleteBySlug.js";
import { toolsetsGetById } from "../funcs/toolsetsGetById.js";
import { toolsetsList } from "../funcs/toolsetsList.js";
import { toolsetsUpdateBySlug } from "../funcs/toolsetsUpdateBySlug.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Toolsets extends ClientSDK {
  /**
   * createToolset toolsets
   *
   * @remarks
   * Create a new toolset with associated tools
   */
  async create(
    request: operations.ToolsetsNumberCreateToolsetRequest,
    options?: RequestOptions,
  ): Promise<components.ToolsetDetails> {
    return unwrapAsync(toolsetsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * deleteToolset toolsets
   *
   * @remarks
   * Delete a toolset by its ID
   */
  async deleteBySlug(
    request: operations.ToolsetsNumberDeleteToolsetRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(toolsetsDeleteBySlug(
      this,
      request,
      options,
    ));
  }

  /**
   * getToolsetDetails toolsets
   *
   * @remarks
   * Get detailed information about a toolset including full HTTP tool definitions
   */
  async getById(
    request: operations.ToolsetsNumberGetToolsetDetailsRequest,
    options?: RequestOptions,
  ): Promise<components.ToolsetDetails> {
    return unwrapAsync(toolsetsGetById(
      this,
      request,
      options,
    ));
  }

  /**
   * listToolsets toolsets
   *
   * @remarks
   * List all toolsets for a project
   */
  async list(
    request?: operations.ToolsetsNumberListToolsetsRequest | undefined,
    options?: RequestOptions,
  ): Promise<components.ListToolsetsResult> {
    return unwrapAsync(toolsetsList(
      this,
      request,
      options,
    ));
  }

  /**
   * updateToolset toolsets
   *
   * @remarks
   * Update a toolset's properties including name, description, and HTTP tools
   */
  async updateBySlug(
    request: operations.ToolsetsNumberUpdateToolsetRequest,
    options?: RequestOptions,
  ): Promise<components.ToolsetDetails> {
    return unwrapAsync(toolsetsUpdateBySlug(
      this,
      request,
      options,
    ));
  }
}
