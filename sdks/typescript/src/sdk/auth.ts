/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { authCallback } from "../funcs/authCallback.js";
import { authInfo } from "../funcs/authInfo.js";
import { authLogout } from "../funcs/authLogout.js";
import { authSwitchScopes } from "../funcs/authSwitchScopes.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Auth extends ClientSDK {
  /**
   * callback auth
   *
   * @remarks
   * Handles the authentication callback.
   */
  async callback(
    request: operations.AuthNumberCallbackRequest,
    options?: RequestOptions,
  ): Promise<operations.AuthNumberCallbackResponse | undefined> {
    return unwrapAsync(authCallback(
      this,
      request,
      options,
    ));
  }

  /**
   * info auth
   *
   * @remarks
   * Provides information about the current authentication status.
   */
  async info(
    security: operations.AuthNumberInfoSecurity,
    request?: operations.AuthNumberInfoRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.AuthNumberInfoResponse> {
    return unwrapAsync(authInfo(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * logout auth
   *
   * @remarks
   * Logs out the current user by clearing their session.
   */
  async logout(
    security: operations.AuthNumberLogoutSecurity,
    request?: operations.AuthNumberLogoutRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.AuthNumberLogoutResponse | undefined> {
    return unwrapAsync(authLogout(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * switchScopes auth
   *
   * @remarks
   * Switches the authentication scope to a different organization.
   */
  async switchScopes(
    security: operations.AuthNumberSwitchScopesSecurity,
    request?: operations.AuthNumberSwitchScopesRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.AuthNumberSwitchScopesResponse | undefined> {
    return unwrapAsync(authSwitchScopes(
      this,
      security,
      request,
      options,
    ));
  }
}
