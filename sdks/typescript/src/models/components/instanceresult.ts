/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Environment,
  Environment$inboundSchema,
  Environment$Outbound,
  Environment$outboundSchema,
} from "./environment.js";
import {
  HTTPToolDefinition,
  HTTPToolDefinition$inboundSchema,
  HTTPToolDefinition$Outbound,
  HTTPToolDefinition$outboundSchema,
} from "./httptooldefinition.js";

export type InstanceResult = {
  /**
   * The description of the toolset
   */
  description?: string | undefined;
  /**
   * Model representing an environment
   */
  environment: Environment;
  /**
   * The name of the toolset
   */
  name: string;
  /**
   * The environment variables that are relevant to the toolset
   */
  relevantEnvironmentVariables?: Array<string> | undefined;
  /**
   * The list of tools
   */
  tools: Array<HTTPToolDefinition>;
};

/** @internal */
export const InstanceResult$inboundSchema: z.ZodType<
  InstanceResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  environment: Environment$inboundSchema,
  name: z.string(),
  relevant_environment_variables: z.array(z.string()).optional(),
  tools: z.array(HTTPToolDefinition$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "relevant_environment_variables": "relevantEnvironmentVariables",
  });
});

/** @internal */
export type InstanceResult$Outbound = {
  description?: string | undefined;
  environment: Environment$Outbound;
  name: string;
  relevant_environment_variables?: Array<string> | undefined;
  tools: Array<HTTPToolDefinition$Outbound>;
};

/** @internal */
export const InstanceResult$outboundSchema: z.ZodType<
  InstanceResult$Outbound,
  z.ZodTypeDef,
  InstanceResult
> = z.object({
  description: z.string().optional(),
  environment: Environment$outboundSchema,
  name: z.string(),
  relevantEnvironmentVariables: z.array(z.string()).optional(),
  tools: z.array(HTTPToolDefinition$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    relevantEnvironmentVariables: "relevant_environment_variables",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstanceResult$ {
  /** @deprecated use `InstanceResult$inboundSchema` instead. */
  export const inboundSchema = InstanceResult$inboundSchema;
  /** @deprecated use `InstanceResult$outboundSchema` instead. */
  export const outboundSchema = InstanceResult$outboundSchema;
  /** @deprecated use `InstanceResult$Outbound` instead. */
  export type Outbound = InstanceResult$Outbound;
}

export function instanceResultToJSON(instanceResult: InstanceResult): string {
  return JSON.stringify(InstanceResult$outboundSchema.parse(instanceResult));
}

export function instanceResultFromJSON(
  jsonString: string,
): SafeParseResult<InstanceResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InstanceResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstanceResult' from JSON`,
  );
}
