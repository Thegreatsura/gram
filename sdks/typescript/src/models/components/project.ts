/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Project = {
  projectId: string;
  projectName: string;
  projectSlug: string;
};

/** @internal */
export const Project$inboundSchema: z.ZodType<Project, z.ZodTypeDef, unknown> =
  z.object({
    project_id: z.string(),
    project_name: z.string(),
    project_slug: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "project_id": "projectId",
      "project_name": "projectName",
      "project_slug": "projectSlug",
    });
  });

/** @internal */
export type Project$Outbound = {
  project_id: string;
  project_name: string;
  project_slug: string;
};

/** @internal */
export const Project$outboundSchema: z.ZodType<
  Project$Outbound,
  z.ZodTypeDef,
  Project
> = z.object({
  projectId: z.string(),
  projectName: z.string(),
  projectSlug: z.string(),
}).transform((v) => {
  return remap$(v, {
    projectId: "project_id",
    projectName: "project_name",
    projectSlug: "project_slug",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Project$ {
  /** @deprecated use `Project$inboundSchema` instead. */
  export const inboundSchema = Project$inboundSchema;
  /** @deprecated use `Project$outboundSchema` instead. */
  export const outboundSchema = Project$outboundSchema;
  /** @deprecated use `Project$Outbound` instead. */
  export type Outbound = Project$Outbound;
}

export function projectToJSON(project: Project): string {
  return JSON.stringify(Project$outboundSchema.parse(project));
}

export function projectFromJSON(
  jsonString: string,
): SafeParseResult<Project, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Project$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Project' from JSON`,
  );
}
