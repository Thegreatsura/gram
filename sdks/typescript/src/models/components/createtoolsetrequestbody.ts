/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateToolsetRequestBody = {
  /**
   * The slug of the environment to use as the default for the toolset
   */
  defaultEnvironmentSlug?: string | undefined;
  /**
   * Description of the toolset
   */
  description?: string | undefined;
  /**
   * List of HTTP tool names to include
   */
  httpToolNames?: Array<string> | undefined;
  /**
   * The name of the toolset
   */
  name: string;
};

/** @internal */
export const CreateToolsetRequestBody$inboundSchema: z.ZodType<
  CreateToolsetRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  default_environment_slug: z.string().optional(),
  description: z.string().optional(),
  http_tool_names: z.array(z.string()).optional(),
  name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "default_environment_slug": "defaultEnvironmentSlug",
    "http_tool_names": "httpToolNames",
  });
});

/** @internal */
export type CreateToolsetRequestBody$Outbound = {
  default_environment_slug?: string | undefined;
  description?: string | undefined;
  http_tool_names?: Array<string> | undefined;
  name: string;
};

/** @internal */
export const CreateToolsetRequestBody$outboundSchema: z.ZodType<
  CreateToolsetRequestBody$Outbound,
  z.ZodTypeDef,
  CreateToolsetRequestBody
> = z.object({
  defaultEnvironmentSlug: z.string().optional(),
  description: z.string().optional(),
  httpToolNames: z.array(z.string()).optional(),
  name: z.string(),
}).transform((v) => {
  return remap$(v, {
    defaultEnvironmentSlug: "default_environment_slug",
    httpToolNames: "http_tool_names",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateToolsetRequestBody$ {
  /** @deprecated use `CreateToolsetRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateToolsetRequestBody$inboundSchema;
  /** @deprecated use `CreateToolsetRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateToolsetRequestBody$outboundSchema;
  /** @deprecated use `CreateToolsetRequestBody$Outbound` instead. */
  export type Outbound = CreateToolsetRequestBody$Outbound;
}

export function createToolsetRequestBodyToJSON(
  createToolsetRequestBody: CreateToolsetRequestBody,
): string {
  return JSON.stringify(
    CreateToolsetRequestBody$outboundSchema.parse(createToolsetRequestBody),
  );
}

export function createToolsetRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateToolsetRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateToolsetRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateToolsetRequestBody' from JSON`,
  );
}
