/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type KeysNumberRevokeKeySecurity = {
  sessionHeaderGramSession: string;
};

export type KeysNumberRevokeKeyRequest = {
  /**
   * The ID of the key to revoke
   */
  id: string;
  /**
   * Session header
   */
  gramSession?: string | undefined;
};

/** @internal */
export const KeysNumberRevokeKeySecurity$inboundSchema: z.ZodType<
  KeysNumberRevokeKeySecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  "session_header_Gram-Session": z.string(),
}).transform((v) => {
  return remap$(v, {
    "session_header_Gram-Session": "sessionHeaderGramSession",
  });
});

/** @internal */
export type KeysNumberRevokeKeySecurity$Outbound = {
  "session_header_Gram-Session": string;
};

/** @internal */
export const KeysNumberRevokeKeySecurity$outboundSchema: z.ZodType<
  KeysNumberRevokeKeySecurity$Outbound,
  z.ZodTypeDef,
  KeysNumberRevokeKeySecurity
> = z.object({
  sessionHeaderGramSession: z.string(),
}).transform((v) => {
  return remap$(v, {
    sessionHeaderGramSession: "session_header_Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace KeysNumberRevokeKeySecurity$ {
  /** @deprecated use `KeysNumberRevokeKeySecurity$inboundSchema` instead. */
  export const inboundSchema = KeysNumberRevokeKeySecurity$inboundSchema;
  /** @deprecated use `KeysNumberRevokeKeySecurity$outboundSchema` instead. */
  export const outboundSchema = KeysNumberRevokeKeySecurity$outboundSchema;
  /** @deprecated use `KeysNumberRevokeKeySecurity$Outbound` instead. */
  export type Outbound = KeysNumberRevokeKeySecurity$Outbound;
}

export function keysNumberRevokeKeySecurityToJSON(
  keysNumberRevokeKeySecurity: KeysNumberRevokeKeySecurity,
): string {
  return JSON.stringify(
    KeysNumberRevokeKeySecurity$outboundSchema.parse(
      keysNumberRevokeKeySecurity,
    ),
  );
}

export function keysNumberRevokeKeySecurityFromJSON(
  jsonString: string,
): SafeParseResult<KeysNumberRevokeKeySecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => KeysNumberRevokeKeySecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'KeysNumberRevokeKeySecurity' from JSON`,
  );
}

/** @internal */
export const KeysNumberRevokeKeyRequest$inboundSchema: z.ZodType<
  KeysNumberRevokeKeyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  "Gram-Session": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "Gram-Session": "gramSession",
  });
});

/** @internal */
export type KeysNumberRevokeKeyRequest$Outbound = {
  id: string;
  "Gram-Session"?: string | undefined;
};

/** @internal */
export const KeysNumberRevokeKeyRequest$outboundSchema: z.ZodType<
  KeysNumberRevokeKeyRequest$Outbound,
  z.ZodTypeDef,
  KeysNumberRevokeKeyRequest
> = z.object({
  id: z.string(),
  gramSession: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    gramSession: "Gram-Session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace KeysNumberRevokeKeyRequest$ {
  /** @deprecated use `KeysNumberRevokeKeyRequest$inboundSchema` instead. */
  export const inboundSchema = KeysNumberRevokeKeyRequest$inboundSchema;
  /** @deprecated use `KeysNumberRevokeKeyRequest$outboundSchema` instead. */
  export const outboundSchema = KeysNumberRevokeKeyRequest$outboundSchema;
  /** @deprecated use `KeysNumberRevokeKeyRequest$Outbound` instead. */
  export type Outbound = KeysNumberRevokeKeyRequest$Outbound;
}

export function keysNumberRevokeKeyRequestToJSON(
  keysNumberRevokeKeyRequest: KeysNumberRevokeKeyRequest,
): string {
  return JSON.stringify(
    KeysNumberRevokeKeyRequest$outboundSchema.parse(keysNumberRevokeKeyRequest),
  );
}

export function keysNumberRevokeKeyRequestFromJSON(
  jsonString: string,
): SafeParseResult<KeysNumberRevokeKeyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => KeysNumberRevokeKeyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'KeysNumberRevokeKeyRequest' from JSON`,
  );
}
