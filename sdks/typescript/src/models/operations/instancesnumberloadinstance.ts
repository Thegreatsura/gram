/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type InstancesNumberLoadInstanceSecurityOption1 = {
  projectSlugHeaderGramProject: string;
  sessionHeaderGramSession: string;
};

export type InstancesNumberLoadInstanceSecurityOption2 = {
  apikeyHeaderGramKey: string;
  projectSlugHeaderGramProject: string;
};

export type InstancesNumberLoadInstanceSecurity = {
  option1?: InstancesNumberLoadInstanceSecurityOption1 | undefined;
  option2?: InstancesNumberLoadInstanceSecurityOption2 | undefined;
};

export type InstancesNumberLoadInstanceRequest = {
  /**
   * The slug of the toolset to load
   */
  toolsetSlug: string;
  /**
   * The slug of the environment to load
   */
  environmentSlug?: string | undefined;
  /**
   * Session header
   */
  gramSession?: string | undefined;
  /**
   * project header
   */
  gramProject?: string | undefined;
  /**
   * API Key header
   */
  gramKey?: string | undefined;
};

/** @internal */
export const InstancesNumberLoadInstanceSecurityOption1$inboundSchema:
  z.ZodType<InstancesNumberLoadInstanceSecurityOption1, z.ZodTypeDef, unknown> =
    z.object({
      "project_slug_header_Gram-Project": z.string(),
      "session_header_Gram-Session": z.string(),
    }).transform((v) => {
      return remap$(v, {
        "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
        "session_header_Gram-Session": "sessionHeaderGramSession",
      });
    });

/** @internal */
export type InstancesNumberLoadInstanceSecurityOption1$Outbound = {
  "project_slug_header_Gram-Project": string;
  "session_header_Gram-Session": string;
};

/** @internal */
export const InstancesNumberLoadInstanceSecurityOption1$outboundSchema:
  z.ZodType<
    InstancesNumberLoadInstanceSecurityOption1$Outbound,
    z.ZodTypeDef,
    InstancesNumberLoadInstanceSecurityOption1
  > = z.object({
    projectSlugHeaderGramProject: z.string(),
    sessionHeaderGramSession: z.string(),
  }).transform((v) => {
    return remap$(v, {
      projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
      sessionHeaderGramSession: "session_header_Gram-Session",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstancesNumberLoadInstanceSecurityOption1$ {
  /** @deprecated use `InstancesNumberLoadInstanceSecurityOption1$inboundSchema` instead. */
  export const inboundSchema =
    InstancesNumberLoadInstanceSecurityOption1$inboundSchema;
  /** @deprecated use `InstancesNumberLoadInstanceSecurityOption1$outboundSchema` instead. */
  export const outboundSchema =
    InstancesNumberLoadInstanceSecurityOption1$outboundSchema;
  /** @deprecated use `InstancesNumberLoadInstanceSecurityOption1$Outbound` instead. */
  export type Outbound = InstancesNumberLoadInstanceSecurityOption1$Outbound;
}

export function instancesNumberLoadInstanceSecurityOption1ToJSON(
  instancesNumberLoadInstanceSecurityOption1:
    InstancesNumberLoadInstanceSecurityOption1,
): string {
  return JSON.stringify(
    InstancesNumberLoadInstanceSecurityOption1$outboundSchema.parse(
      instancesNumberLoadInstanceSecurityOption1,
    ),
  );
}

export function instancesNumberLoadInstanceSecurityOption1FromJSON(
  jsonString: string,
): SafeParseResult<
  InstancesNumberLoadInstanceSecurityOption1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      InstancesNumberLoadInstanceSecurityOption1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'InstancesNumberLoadInstanceSecurityOption1' from JSON`,
  );
}

/** @internal */
export const InstancesNumberLoadInstanceSecurityOption2$inboundSchema:
  z.ZodType<InstancesNumberLoadInstanceSecurityOption2, z.ZodTypeDef, unknown> =
    z.object({
      "apikey_header_Gram-Key": z.string(),
      "project_slug_header_Gram-Project": z.string(),
    }).transform((v) => {
      return remap$(v, {
        "apikey_header_Gram-Key": "apikeyHeaderGramKey",
        "project_slug_header_Gram-Project": "projectSlugHeaderGramProject",
      });
    });

/** @internal */
export type InstancesNumberLoadInstanceSecurityOption2$Outbound = {
  "apikey_header_Gram-Key": string;
  "project_slug_header_Gram-Project": string;
};

/** @internal */
export const InstancesNumberLoadInstanceSecurityOption2$outboundSchema:
  z.ZodType<
    InstancesNumberLoadInstanceSecurityOption2$Outbound,
    z.ZodTypeDef,
    InstancesNumberLoadInstanceSecurityOption2
  > = z.object({
    apikeyHeaderGramKey: z.string(),
    projectSlugHeaderGramProject: z.string(),
  }).transform((v) => {
    return remap$(v, {
      apikeyHeaderGramKey: "apikey_header_Gram-Key",
      projectSlugHeaderGramProject: "project_slug_header_Gram-Project",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstancesNumberLoadInstanceSecurityOption2$ {
  /** @deprecated use `InstancesNumberLoadInstanceSecurityOption2$inboundSchema` instead. */
  export const inboundSchema =
    InstancesNumberLoadInstanceSecurityOption2$inboundSchema;
  /** @deprecated use `InstancesNumberLoadInstanceSecurityOption2$outboundSchema` instead. */
  export const outboundSchema =
    InstancesNumberLoadInstanceSecurityOption2$outboundSchema;
  /** @deprecated use `InstancesNumberLoadInstanceSecurityOption2$Outbound` instead. */
  export type Outbound = InstancesNumberLoadInstanceSecurityOption2$Outbound;
}

export function instancesNumberLoadInstanceSecurityOption2ToJSON(
  instancesNumberLoadInstanceSecurityOption2:
    InstancesNumberLoadInstanceSecurityOption2,
): string {
  return JSON.stringify(
    InstancesNumberLoadInstanceSecurityOption2$outboundSchema.parse(
      instancesNumberLoadInstanceSecurityOption2,
    ),
  );
}

export function instancesNumberLoadInstanceSecurityOption2FromJSON(
  jsonString: string,
): SafeParseResult<
  InstancesNumberLoadInstanceSecurityOption2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      InstancesNumberLoadInstanceSecurityOption2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'InstancesNumberLoadInstanceSecurityOption2' from JSON`,
  );
}

/** @internal */
export const InstancesNumberLoadInstanceSecurity$inboundSchema: z.ZodType<
  InstancesNumberLoadInstanceSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Option1: z.lazy(() =>
    InstancesNumberLoadInstanceSecurityOption1$inboundSchema
  ).optional(),
  Option2: z.lazy(() =>
    InstancesNumberLoadInstanceSecurityOption2$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "Option1": "option1",
    "Option2": "option2",
  });
});

/** @internal */
export type InstancesNumberLoadInstanceSecurity$Outbound = {
  Option1?: InstancesNumberLoadInstanceSecurityOption1$Outbound | undefined;
  Option2?: InstancesNumberLoadInstanceSecurityOption2$Outbound | undefined;
};

/** @internal */
export const InstancesNumberLoadInstanceSecurity$outboundSchema: z.ZodType<
  InstancesNumberLoadInstanceSecurity$Outbound,
  z.ZodTypeDef,
  InstancesNumberLoadInstanceSecurity
> = z.object({
  option1: z.lazy(() =>
    InstancesNumberLoadInstanceSecurityOption1$outboundSchema
  ).optional(),
  option2: z.lazy(() =>
    InstancesNumberLoadInstanceSecurityOption2$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    option1: "Option1",
    option2: "Option2",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstancesNumberLoadInstanceSecurity$ {
  /** @deprecated use `InstancesNumberLoadInstanceSecurity$inboundSchema` instead. */
  export const inboundSchema =
    InstancesNumberLoadInstanceSecurity$inboundSchema;
  /** @deprecated use `InstancesNumberLoadInstanceSecurity$outboundSchema` instead. */
  export const outboundSchema =
    InstancesNumberLoadInstanceSecurity$outboundSchema;
  /** @deprecated use `InstancesNumberLoadInstanceSecurity$Outbound` instead. */
  export type Outbound = InstancesNumberLoadInstanceSecurity$Outbound;
}

export function instancesNumberLoadInstanceSecurityToJSON(
  instancesNumberLoadInstanceSecurity: InstancesNumberLoadInstanceSecurity,
): string {
  return JSON.stringify(
    InstancesNumberLoadInstanceSecurity$outboundSchema.parse(
      instancesNumberLoadInstanceSecurity,
    ),
  );
}

export function instancesNumberLoadInstanceSecurityFromJSON(
  jsonString: string,
): SafeParseResult<InstancesNumberLoadInstanceSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      InstancesNumberLoadInstanceSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstancesNumberLoadInstanceSecurity' from JSON`,
  );
}

/** @internal */
export const InstancesNumberLoadInstanceRequest$inboundSchema: z.ZodType<
  InstancesNumberLoadInstanceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  toolset_slug: z.string(),
  environment_slug: z.string().optional(),
  "Gram-Session": z.string().optional(),
  "Gram-Project": z.string().optional(),
  "Gram-Key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "toolset_slug": "toolsetSlug",
    "environment_slug": "environmentSlug",
    "Gram-Session": "gramSession",
    "Gram-Project": "gramProject",
    "Gram-Key": "gramKey",
  });
});

/** @internal */
export type InstancesNumberLoadInstanceRequest$Outbound = {
  toolset_slug: string;
  environment_slug?: string | undefined;
  "Gram-Session"?: string | undefined;
  "Gram-Project"?: string | undefined;
  "Gram-Key"?: string | undefined;
};

/** @internal */
export const InstancesNumberLoadInstanceRequest$outboundSchema: z.ZodType<
  InstancesNumberLoadInstanceRequest$Outbound,
  z.ZodTypeDef,
  InstancesNumberLoadInstanceRequest
> = z.object({
  toolsetSlug: z.string(),
  environmentSlug: z.string().optional(),
  gramSession: z.string().optional(),
  gramProject: z.string().optional(),
  gramKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    toolsetSlug: "toolset_slug",
    environmentSlug: "environment_slug",
    gramSession: "Gram-Session",
    gramProject: "Gram-Project",
    gramKey: "Gram-Key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstancesNumberLoadInstanceRequest$ {
  /** @deprecated use `InstancesNumberLoadInstanceRequest$inboundSchema` instead. */
  export const inboundSchema = InstancesNumberLoadInstanceRequest$inboundSchema;
  /** @deprecated use `InstancesNumberLoadInstanceRequest$outboundSchema` instead. */
  export const outboundSchema =
    InstancesNumberLoadInstanceRequest$outboundSchema;
  /** @deprecated use `InstancesNumberLoadInstanceRequest$Outbound` instead. */
  export type Outbound = InstancesNumberLoadInstanceRequest$Outbound;
}

export function instancesNumberLoadInstanceRequestToJSON(
  instancesNumberLoadInstanceRequest: InstancesNumberLoadInstanceRequest,
): string {
  return JSON.stringify(
    InstancesNumberLoadInstanceRequest$outboundSchema.parse(
      instancesNumberLoadInstanceRequest,
    ),
  );
}

export function instancesNumberLoadInstanceRequestFromJSON(
  jsonString: string,
): SafeParseResult<InstancesNumberLoadInstanceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      InstancesNumberLoadInstanceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstancesNumberLoadInstanceRequest' from JSON`,
  );
}
