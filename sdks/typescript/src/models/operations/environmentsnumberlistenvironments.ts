/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EnvironmentsNumberListEnvironmentsRequest = {
  /**
   * Session header
   */
  gramSession?: string | undefined;
  /**
   * project header
   */
  gramProject?: string | undefined;
};

/** @internal */
export const EnvironmentsNumberListEnvironmentsRequest$inboundSchema: z.ZodType<
  EnvironmentsNumberListEnvironmentsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Gram-Session": z.string().optional(),
  "Gram-Project": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "Gram-Session": "gramSession",
    "Gram-Project": "gramProject",
  });
});

/** @internal */
export type EnvironmentsNumberListEnvironmentsRequest$Outbound = {
  "Gram-Session"?: string | undefined;
  "Gram-Project"?: string | undefined;
};

/** @internal */
export const EnvironmentsNumberListEnvironmentsRequest$outboundSchema:
  z.ZodType<
    EnvironmentsNumberListEnvironmentsRequest$Outbound,
    z.ZodTypeDef,
    EnvironmentsNumberListEnvironmentsRequest
  > = z.object({
    gramSession: z.string().optional(),
    gramProject: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      gramSession: "Gram-Session",
      gramProject: "Gram-Project",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentsNumberListEnvironmentsRequest$ {
  /** @deprecated use `EnvironmentsNumberListEnvironmentsRequest$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentsNumberListEnvironmentsRequest$inboundSchema;
  /** @deprecated use `EnvironmentsNumberListEnvironmentsRequest$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentsNumberListEnvironmentsRequest$outboundSchema;
  /** @deprecated use `EnvironmentsNumberListEnvironmentsRequest$Outbound` instead. */
  export type Outbound = EnvironmentsNumberListEnvironmentsRequest$Outbound;
}

export function environmentsNumberListEnvironmentsRequestToJSON(
  environmentsNumberListEnvironmentsRequest:
    EnvironmentsNumberListEnvironmentsRequest,
): string {
  return JSON.stringify(
    EnvironmentsNumberListEnvironmentsRequest$outboundSchema.parse(
      environmentsNumberListEnvironmentsRequest,
    ),
  );
}

export function environmentsNumberListEnvironmentsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentsNumberListEnvironmentsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentsNumberListEnvironmentsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentsNumberListEnvironmentsRequest' from JSON`,
  );
}
