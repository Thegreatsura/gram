/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AuthNumberCallbackRequest = {
  /**
   * The shared token for authentication from the speakeasy system
   */
  sharedToken: string;
};

export type AuthNumberCallbackResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const AuthNumberCallbackRequest$inboundSchema: z.ZodType<
  AuthNumberCallbackRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  shared_token: z.string(),
}).transform((v) => {
  return remap$(v, {
    "shared_token": "sharedToken",
  });
});

/** @internal */
export type AuthNumberCallbackRequest$Outbound = {
  shared_token: string;
};

/** @internal */
export const AuthNumberCallbackRequest$outboundSchema: z.ZodType<
  AuthNumberCallbackRequest$Outbound,
  z.ZodTypeDef,
  AuthNumberCallbackRequest
> = z.object({
  sharedToken: z.string(),
}).transform((v) => {
  return remap$(v, {
    sharedToken: "shared_token",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthNumberCallbackRequest$ {
  /** @deprecated use `AuthNumberCallbackRequest$inboundSchema` instead. */
  export const inboundSchema = AuthNumberCallbackRequest$inboundSchema;
  /** @deprecated use `AuthNumberCallbackRequest$outboundSchema` instead. */
  export const outboundSchema = AuthNumberCallbackRequest$outboundSchema;
  /** @deprecated use `AuthNumberCallbackRequest$Outbound` instead. */
  export type Outbound = AuthNumberCallbackRequest$Outbound;
}

export function authNumberCallbackRequestToJSON(
  authNumberCallbackRequest: AuthNumberCallbackRequest,
): string {
  return JSON.stringify(
    AuthNumberCallbackRequest$outboundSchema.parse(authNumberCallbackRequest),
  );
}

export function authNumberCallbackRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthNumberCallbackRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthNumberCallbackRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthNumberCallbackRequest' from JSON`,
  );
}

/** @internal */
export const AuthNumberCallbackResponse$inboundSchema: z.ZodType<
  AuthNumberCallbackResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type AuthNumberCallbackResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const AuthNumberCallbackResponse$outboundSchema: z.ZodType<
  AuthNumberCallbackResponse$Outbound,
  z.ZodTypeDef,
  AuthNumberCallbackResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthNumberCallbackResponse$ {
  /** @deprecated use `AuthNumberCallbackResponse$inboundSchema` instead. */
  export const inboundSchema = AuthNumberCallbackResponse$inboundSchema;
  /** @deprecated use `AuthNumberCallbackResponse$outboundSchema` instead. */
  export const outboundSchema = AuthNumberCallbackResponse$outboundSchema;
  /** @deprecated use `AuthNumberCallbackResponse$Outbound` instead. */
  export type Outbound = AuthNumberCallbackResponse$Outbound;
}

export function authNumberCallbackResponseToJSON(
  authNumberCallbackResponse: AuthNumberCallbackResponse,
): string {
  return JSON.stringify(
    AuthNumberCallbackResponse$outboundSchema.parse(authNumberCallbackResponse),
  );
}

export function authNumberCallbackResponseFromJSON(
  jsonString: string,
): SafeParseResult<AuthNumberCallbackResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthNumberCallbackResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthNumberCallbackResponse' from JSON`,
  );
}
