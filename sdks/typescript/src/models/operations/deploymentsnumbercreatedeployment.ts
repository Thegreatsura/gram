/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeploymentsNumberCreateDeploymentRequest = {
  /**
   * Session header
   */
  gramSession?: string | undefined;
  /**
   * project header
   */
  gramProject?: string | undefined;
  /**
   * A unique identifier that will mitigate against duplicate deployments.
   */
  idempotencyKey: string;
  createDeploymentRequestBody: components.CreateDeploymentRequestBody;
};

/** @internal */
export const DeploymentsNumberCreateDeploymentRequest$inboundSchema: z.ZodType<
  DeploymentsNumberCreateDeploymentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Gram-Session": z.string().optional(),
  "Gram-Project": z.string().optional(),
  "Idempotency-Key": z.string(),
  CreateDeploymentRequestBody:
    components.CreateDeploymentRequestBody$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Gram-Session": "gramSession",
    "Gram-Project": "gramProject",
    "Idempotency-Key": "idempotencyKey",
    "CreateDeploymentRequestBody": "createDeploymentRequestBody",
  });
});

/** @internal */
export type DeploymentsNumberCreateDeploymentRequest$Outbound = {
  "Gram-Session"?: string | undefined;
  "Gram-Project"?: string | undefined;
  "Idempotency-Key": string;
  CreateDeploymentRequestBody: components.CreateDeploymentRequestBody$Outbound;
};

/** @internal */
export const DeploymentsNumberCreateDeploymentRequest$outboundSchema: z.ZodType<
  DeploymentsNumberCreateDeploymentRequest$Outbound,
  z.ZodTypeDef,
  DeploymentsNumberCreateDeploymentRequest
> = z.object({
  gramSession: z.string().optional(),
  gramProject: z.string().optional(),
  idempotencyKey: z.string(),
  createDeploymentRequestBody:
    components.CreateDeploymentRequestBody$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    gramSession: "Gram-Session",
    gramProject: "Gram-Project",
    idempotencyKey: "Idempotency-Key",
    createDeploymentRequestBody: "CreateDeploymentRequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentsNumberCreateDeploymentRequest$ {
  /** @deprecated use `DeploymentsNumberCreateDeploymentRequest$inboundSchema` instead. */
  export const inboundSchema =
    DeploymentsNumberCreateDeploymentRequest$inboundSchema;
  /** @deprecated use `DeploymentsNumberCreateDeploymentRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentsNumberCreateDeploymentRequest$outboundSchema;
  /** @deprecated use `DeploymentsNumberCreateDeploymentRequest$Outbound` instead. */
  export type Outbound = DeploymentsNumberCreateDeploymentRequest$Outbound;
}

export function deploymentsNumberCreateDeploymentRequestToJSON(
  deploymentsNumberCreateDeploymentRequest:
    DeploymentsNumberCreateDeploymentRequest,
): string {
  return JSON.stringify(
    DeploymentsNumberCreateDeploymentRequest$outboundSchema.parse(
      deploymentsNumberCreateDeploymentRequest,
    ),
  );
}

export function deploymentsNumberCreateDeploymentRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  DeploymentsNumberCreateDeploymentRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentsNumberCreateDeploymentRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeploymentsNumberCreateDeploymentRequest' from JSON`,
  );
}
