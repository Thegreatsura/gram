/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EnvironmentsNumberDeleteEnvironmentRequest = {
  /**
   * The slug of the environment to delete
   */
  slug: string;
  /**
   * Session header
   */
  gramSession?: string | undefined;
  /**
   * project header
   */
  gramProject?: string | undefined;
};

/** @internal */
export const EnvironmentsNumberDeleteEnvironmentRequest$inboundSchema:
  z.ZodType<EnvironmentsNumberDeleteEnvironmentRequest, z.ZodTypeDef, unknown> =
    z.object({
      slug: z.string(),
      "Gram-Session": z.string().optional(),
      "Gram-Project": z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        "Gram-Session": "gramSession",
        "Gram-Project": "gramProject",
      });
    });

/** @internal */
export type EnvironmentsNumberDeleteEnvironmentRequest$Outbound = {
  slug: string;
  "Gram-Session"?: string | undefined;
  "Gram-Project"?: string | undefined;
};

/** @internal */
export const EnvironmentsNumberDeleteEnvironmentRequest$outboundSchema:
  z.ZodType<
    EnvironmentsNumberDeleteEnvironmentRequest$Outbound,
    z.ZodTypeDef,
    EnvironmentsNumberDeleteEnvironmentRequest
  > = z.object({
    slug: z.string(),
    gramSession: z.string().optional(),
    gramProject: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      gramSession: "Gram-Session",
      gramProject: "Gram-Project",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentsNumberDeleteEnvironmentRequest$ {
  /** @deprecated use `EnvironmentsNumberDeleteEnvironmentRequest$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentsNumberDeleteEnvironmentRequest$inboundSchema;
  /** @deprecated use `EnvironmentsNumberDeleteEnvironmentRequest$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentsNumberDeleteEnvironmentRequest$outboundSchema;
  /** @deprecated use `EnvironmentsNumberDeleteEnvironmentRequest$Outbound` instead. */
  export type Outbound = EnvironmentsNumberDeleteEnvironmentRequest$Outbound;
}

export function environmentsNumberDeleteEnvironmentRequestToJSON(
  environmentsNumberDeleteEnvironmentRequest:
    EnvironmentsNumberDeleteEnvironmentRequest,
): string {
  return JSON.stringify(
    EnvironmentsNumberDeleteEnvironmentRequest$outboundSchema.parse(
      environmentsNumberDeleteEnvironmentRequest,
    ),
  );
}

export function environmentsNumberDeleteEnvironmentRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentsNumberDeleteEnvironmentRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentsNumberDeleteEnvironmentRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentsNumberDeleteEnvironmentRequest' from JSON`,
  );
}
