name: Pull Request
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
permissions:
  id-token: write
  contents: read
env:
  REGISTRY: gcr.io/linen-analyst-344721 #gcr for speakeasy-common gcr registry
  DOCKER_REPOSITORY_OWNER: ${{github.repository_owner}}
jobs:
  changes:
    name: Tag branch changes
    runs-on: ubicloud-standard-4
    permissions:
      contents: "read"
      pull-requests: read
    outputs:
      server: ${{ steps.filter.outputs.server }}
      client: ${{ steps.filter.outputs.client }}
      typescript_sdk: ${{ steps.filter.outputs.typescript_sdk }}
      python_sdk: ${{ steps.filter.outputs.python_sdk }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3.0.2
        name: Check for changed packages
        id: filter
        with:
          filters: .github/filters.yaml

  docker-build-server:
    runs-on: ubicloud-standard-4
    needs: changes
    if: ${{ needs.changes.outputs.server == 'true' || (github.event_name == 'push' && github.ref == 'refs/heads/main') }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: google-github-actions/auth@ba79af03959ebeac9769e648f473a284504d9193 # v2.1.10
        with:
          token_format: "access_token"
          workload_identity_provider: "projects/409661704476/locations/global/workloadIdentityPools/ga-pool/providers/github-oidc-provider"
          service_account: "speakeasy-registry-ga-ci@linen-analyst-344721.iam.gserviceaccount.com"
      - name: Login to GCR
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: gcr.io/linen-analyst-344721
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}
      - name: Build and Push Registry image to GCR
        id: build
        uses: ./.github/workflows/composite/build-push
        with:
          registry: ${{ env.REGISTRY }}
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}
          image: ${{ env.DOCKER_REPOSITORY_OWNER }}/gram
          context: ./server
          file: server/Dockerfile
          git-auth-token: ${{ secrets.BOT_REPO_TOKEN }}
          build-args: |
            GIT_USERNAME=speakeasybot
      - name: Pull and Run Image
        run: |
          echo "Pulling image: ${{ steps.build.outputs.image-tag }}"
          docker pull ${{ steps.build.outputs.image-tag }}
          echo "Running image..."
          docker run --rm ${{ steps.build.outputs.image-tag }} version

  docker-build-client:
    runs-on: ubicloud-standard-4
    needs: changes
    if: ${{ needs.changes.outputs.client == 'true'  || (github.event_name == 'push' && github.ref == 'refs/heads/main') }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: google-github-actions/auth@ba79af03959ebeac9769e648f473a284504d9193 # v2.1.10
        with:
          token_format: "access_token"
          workload_identity_provider: "projects/409661704476/locations/global/workloadIdentityPools/ga-pool/providers/github-oidc-provider"
          service_account: "speakeasy-registry-ga-ci@linen-analyst-344721.iam.gserviceaccount.com"
      - name: Echo
        run: |
          echo '::echo::on'
          echo ${{ steps.auth.outputs.access_token }}
      - name: Login to GCR
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: gcr.io/linen-analyst-344721
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}
      - name: Build and Push Registry image to GCR
        id: build
        uses: ./.github/workflows/composite/build-push
        with:
          registry: ${{ env.REGISTRY }}
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}
          image: ${{ env.DOCKER_REPOSITORY_OWNER }}/gram-dashboard
          context: .
          file: client/Dockerfile
          git-auth-token: ${{ secrets.BOT_REPO_TOKEN }}
          build-args: |
            GIT_USERNAME=speakeasybot

  server-build-lint-test:
    runs-on: ubicloud-standard-4
    needs: changes
    if: ${{ needs.changes.outputs.server == 'true' }}
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: gram
          POSTGRES_PASSWORD: gram
          POSTGRES_DB: gram
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5439:5432
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Setup Mise
        uses: jdx/mise-action@c94f0bf9e520b150e34c017db785461f7e71c5fb # v2.2.2
        with:
          install: true
          cache: true
      - name: Prepare GitHub Actions environment
        run: mise run github
      - name: Cache Go
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          key: ${{ env.GH_CACHE_GO_KEY }}
          restore-keys: |
            ${{ env.GH_CACHE_GO_KEY }}
            ${{ env.GH_CACHE_GO_KEY_PARTIAL }}
          path: |
            ${{ env.GOCACHE }}
            ${{ env.GOMODCACHE }}
      - name: Build
        run: mise run build:server --readonly
      - uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v8.0.0
        with:
          install-mode: none # installed by mise
          working-directory: server
      - name: Install Go tools
        run: go install tool
        working-directory: server
      - name: Run code generators
        run: mise run "gen:*"
      - name: Run "go mod tidy"
        run: mise run go:tidy
      - name: Check for dirty files
        run: mise run git:porcelain

  client-build-lint-test:
    runs-on: ubicloud-standard-4
    needs: changes
    if: ${{ needs.changes.outputs.client == 'true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Setup Mise
        uses: jdx/mise-action@c94f0bf9e520b150e34c017db785461f7e71c5fb # v2.2.2
        with:
          install: true
          cache: true
      - name: Prepare GitHub Actions environment
        run: mise run github
      - name: Cache PNPM
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          key: ${{ env.GH_CACHE_PNPM_KEY }}
          restore-keys: |
            ${{ env.GH_CACHE_PNPM_KEY }}
            ${{ env.GH_CACHE_PNPM_KEY_PARTIAL }}
          path: |
            ${{ env.PNPM_STORE_PATH }}
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Build
        run: pnpm build
      - name: Lint
        run: pnpm lint
        working-directory: client/dashboard
      - name: Prune PNPM store
        if: success()
        run: pnpm store prune
      - name: Check for dirty files
        run: mise run git:porcelain
  
  ts-sdk-build-lint:
    strategy:
      matrix:
        target: ["client/sdk"]
    runs-on: ubicloud-standard-4
    needs: changes
    if: ${{ needs.changes.outputs.client == 'true' || needs.changes.outputs.typescript_sdk == 'true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Setup Mise
        uses: jdx/mise-action@c94f0bf9e520b150e34c017db785461f7e71c5fb # v2.2.2
        with:
          install: true
          cache: true
      - name: Prepare GitHub Actions environment
        run: mise run github
      - name: Cache PNPM
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          key: ${{ env.GH_CACHE_PNPM_KEY }}
          restore-keys: |
            ${{ env.GH_CACHE_PNPM_KEY }}
            ${{ env.GH_CACHE_PNPM_KEY_PARTIAL }}
          path: |
            ${{ env.PNPM_STORE_PATH }}
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Build
        run: pnpm build
        working-directory: ${{ matrix.target }}
      - name: Lint
        run: pnpm lint
        working-directory: ${{ matrix.target }}
      - name: Prune PNPM store
        if: success()
        run: pnpm store prune
      - name: Check for dirty files
        run: mise run git:porcelain
